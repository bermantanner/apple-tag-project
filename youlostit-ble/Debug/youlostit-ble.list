
youlostit-ble.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a6c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08004bfc  08004bfc  00005bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d3c  08004d3c  000061c4  2**0
                  CONTENTS
  4 .ARM          00000008  08004d3c  08004d3c  00005d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d44  08004d44  000061c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d44  08004d44  00005d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d48  08004d48  00005d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c4  20000000  08004d4c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000300  200001c4  08004f10  000061c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004c4  08004f10  000064c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000061c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a736  00000000  00000000  000061f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f4b  00000000  00000000  0001092a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000998  00000000  00000000  00012878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000721  00000000  00000000  00013210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027212  00000000  00000000  00013931  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b13f  00000000  00000000  0003ab43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0eef  00000000  00000000  00045c82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00136b71  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d94  00000000  00000000  00136bb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a4  00000000  00000000  00139948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001c4 	.word	0x200001c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004be4 	.word	0x08004be4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001c8 	.word	0x200001c8
 80001cc:	08004be4 	.word	0x08004be4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <ble_init>:
 int16_t connectionHandler[2] = {-1, -1}; // Little Endian Format for connection handler

 /**
  * Initializes the BLE module with appropriate settings
  */
 void ble_init(){
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af02      	add	r7, sp, #8
	 //fetching the reset event
	 rxEvent=(uint8_t*)malloc(EVENT_STARTUP_SIZE);
 8000286:	2006      	movs	r0, #6
 8000288:	f003 fc78 	bl	8003b7c <malloc>
 800028c:	4603      	mov	r3, r0
 800028e:	461a      	mov	r2, r3
 8000290:	4b6f      	ldr	r3, [pc, #444]	@ (8000450 <ble_init+0x1d0>)
 8000292:	601a      	str	r2, [r3, #0]
	 int res;

	 while(!dataAvailable);
 8000294:	bf00      	nop
 8000296:	4b6f      	ldr	r3, [pc, #444]	@ (8000454 <ble_init+0x1d4>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d0fb      	beq.n	8000296 <ble_init+0x16>
	 res=fetchBleEvent(rxEvent,EVENT_STARTUP_SIZE);
 800029e:	4b6c      	ldr	r3, [pc, #432]	@ (8000450 <ble_init+0x1d0>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	2106      	movs	r1, #6
 80002a4:	4618      	mov	r0, r3
 80002a6:	f000 f91d 	bl	80004e4 <fetchBleEvent>
 80002aa:	6078      	str	r0, [r7, #4]

	 if(res==BLE_OK){
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d111      	bne.n	80002d6 <ble_init+0x56>
	 res=checkEventResp(rxEvent,EVENT_STATUP_DATA,EVENT_STARTUP_SIZE);
 80002b2:	4b67      	ldr	r3, [pc, #412]	@ (8000450 <ble_init+0x1d0>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	2206      	movs	r2, #6
 80002b8:	4967      	ldr	r1, [pc, #412]	@ (8000458 <ble_init+0x1d8>)
 80002ba:	4618      	mov	r0, r3
 80002bc:	f000 f99c 	bl	80005f8 <checkEventResp>
 80002c0:	6078      	str	r0, [r7, #4]
	 if(res==BLE_OK){
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d106      	bne.n	80002d6 <ble_init+0x56>
		stackInitCompleteFlag|=0x01;
 80002c8:	4b64      	ldr	r3, [pc, #400]	@ (800045c <ble_init+0x1dc>)
 80002ca:	881b      	ldrh	r3, [r3, #0]
 80002cc:	f043 0301 	orr.w	r3, r3, #1
 80002d0:	b29a      	uxth	r2, r3
 80002d2:	4b62      	ldr	r3, [pc, #392]	@ (800045c <ble_init+0x1dc>)
 80002d4:	801a      	strh	r2, [r3, #0]
	 }
	 }
	 HAL_Delay(10);
 80002d6:	200a      	movs	r0, #10
 80002d8:	f001 fd06 	bl	8001ce8 <HAL_Delay>
	 free(rxEvent);
 80002dc:	4b5c      	ldr	r3, [pc, #368]	@ (8000450 <ble_init+0x1d0>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4618      	mov	r0, r3
 80002e2:	f003 fc53 	bl	8003b8c <free>

	 //INIT GATT
	 if(BLE_command(ACI_GATT_INIT,sizeof(ACI_GATT_INIT),ACI_GATT_INIT_COMPLETE,sizeof(ACI_GATT_INIT_COMPLETE),0)==BLE_OK){
 80002e6:	2300      	movs	r3, #0
 80002e8:	9300      	str	r3, [sp, #0]
 80002ea:	2307      	movs	r3, #7
 80002ec:	4a5c      	ldr	r2, [pc, #368]	@ (8000460 <ble_init+0x1e0>)
 80002ee:	2104      	movs	r1, #4
 80002f0:	485c      	ldr	r0, [pc, #368]	@ (8000464 <ble_init+0x1e4>)
 80002f2:	f000 fab7 	bl	8000864 <BLE_command>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d106      	bne.n	800030a <ble_init+0x8a>
		stackInitCompleteFlag|=0x02;
 80002fc:	4b57      	ldr	r3, [pc, #348]	@ (800045c <ble_init+0x1dc>)
 80002fe:	881b      	ldrh	r3, [r3, #0]
 8000300:	f043 0302 	orr.w	r3, r3, #2
 8000304:	b29a      	uxth	r2, r3
 8000306:	4b55      	ldr	r3, [pc, #340]	@ (800045c <ble_init+0x1dc>)
 8000308:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 800030a:	4b51      	ldr	r3, [pc, #324]	@ (8000450 <ble_init+0x1d0>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	4618      	mov	r0, r3
 8000310:	f003 fc3c 	bl	8003b8c <free>

	 //INIT GAP, actually the handle that i get is a GATT handle of a service, will change the name later
	 if(BLE_command(ACI_GAP_INIT,sizeof(ACI_GAP_INIT),ACI_GAP_INIT_COMPLETE,sizeof(ACI_GAP_INIT_COMPLETE),3)==BLE_OK){
 8000314:	2303      	movs	r3, #3
 8000316:	9300      	str	r3, [sp, #0]
 8000318:	2307      	movs	r3, #7
 800031a:	4a53      	ldr	r2, [pc, #332]	@ (8000468 <ble_init+0x1e8>)
 800031c:	2107      	movs	r1, #7
 800031e:	4853      	ldr	r0, [pc, #332]	@ (800046c <ble_init+0x1ec>)
 8000320:	f000 faa0 	bl	8000864 <BLE_command>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d11b      	bne.n	8000362 <ble_init+0xe2>
		stackInitCompleteFlag|=0x04;
 800032a:	4b4c      	ldr	r3, [pc, #304]	@ (800045c <ble_init+0x1dc>)
 800032c:	881b      	ldrh	r3, [r3, #0]
 800032e:	f043 0304 	orr.w	r3, r3, #4
 8000332:	b29a      	uxth	r2, r3
 8000334:	4b49      	ldr	r3, [pc, #292]	@ (800045c <ble_init+0x1dc>)
 8000336:	801a      	strh	r2, [r3, #0]
		memcpy(GAP_SERVICE_HANDLE,rxEvent+7,2);
 8000338:	4b45      	ldr	r3, [pc, #276]	@ (8000450 <ble_init+0x1d0>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	3307      	adds	r3, #7
 800033e:	881b      	ldrh	r3, [r3, #0]
 8000340:	b29a      	uxth	r2, r3
 8000342:	4b4b      	ldr	r3, [pc, #300]	@ (8000470 <ble_init+0x1f0>)
 8000344:	801a      	strh	r2, [r3, #0]
		memcpy(GAP_CHAR_NAME_HANDLE,rxEvent+9,2);
 8000346:	4b42      	ldr	r3, [pc, #264]	@ (8000450 <ble_init+0x1d0>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	3309      	adds	r3, #9
 800034c:	881b      	ldrh	r3, [r3, #0]
 800034e:	b29a      	uxth	r2, r3
 8000350:	4b48      	ldr	r3, [pc, #288]	@ (8000474 <ble_init+0x1f4>)
 8000352:	801a      	strh	r2, [r3, #0]
		memcpy(GAP_CHAR_APP_HANDLE,rxEvent+11,2);
 8000354:	4b3e      	ldr	r3, [pc, #248]	@ (8000450 <ble_init+0x1d0>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	330b      	adds	r3, #11
 800035a:	881b      	ldrh	r3, [r3, #0]
 800035c:	b29a      	uxth	r2, r3
 800035e:	4b46      	ldr	r3, [pc, #280]	@ (8000478 <ble_init+0x1f8>)
 8000360:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 8000362:	4b3b      	ldr	r3, [pc, #236]	@ (8000450 <ble_init+0x1d0>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	4618      	mov	r0, r3
 8000368:	f003 fc10 	bl	8003b8c <free>

	 //SET THE NAME OF THE BOARD IN THE SERVICE CREATED AUTOMATICALLY
	 updateCharValue(GAP_SERVICE_HANDLE,GAP_CHAR_NAME_HANDLE,0,sizeof(deviceName),deviceName);
 800036c:	4b43      	ldr	r3, [pc, #268]	@ (800047c <ble_init+0x1fc>)
 800036e:	9300      	str	r3, [sp, #0]
 8000370:	2307      	movs	r3, #7
 8000372:	2200      	movs	r2, #0
 8000374:	493f      	ldr	r1, [pc, #252]	@ (8000474 <ble_init+0x1f4>)
 8000376:	483e      	ldr	r0, [pc, #248]	@ (8000470 <ble_init+0x1f0>)
 8000378:	f000 fb3a 	bl	80009f0 <updateCharValue>
	 stackInitCompleteFlag|=0x08;
 800037c:	4b37      	ldr	r3, [pc, #220]	@ (800045c <ble_init+0x1dc>)
 800037e:	881b      	ldrh	r3, [r3, #0]
 8000380:	f043 0308 	orr.w	r3, r3, #8
 8000384:	b29a      	uxth	r2, r3
 8000386:	4b35      	ldr	r3, [pc, #212]	@ (800045c <ble_init+0x1dc>)
 8000388:	801a      	strh	r2, [r3, #0]
	 free(rxEvent);
 800038a:	4b31      	ldr	r3, [pc, #196]	@ (8000450 <ble_init+0x1d0>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	4618      	mov	r0, r3
 8000390:	f003 fbfc 	bl	8003b8c <free>

	 //INIT AUTH
	 if(BLE_command(ACI_GAP_SET_AUTH,sizeof(ACI_GAP_SET_AUTH),ACI_GAP_SET_AUTH_RESP,sizeof(ACI_GAP_SET_AUTH_RESP),0)==BLE_OK){
 8000394:	2300      	movs	r3, #0
 8000396:	9300      	str	r3, [sp, #0]
 8000398:	2307      	movs	r3, #7
 800039a:	4a39      	ldr	r2, [pc, #228]	@ (8000480 <ble_init+0x200>)
 800039c:	2110      	movs	r1, #16
 800039e:	4839      	ldr	r0, [pc, #228]	@ (8000484 <ble_init+0x204>)
 80003a0:	f000 fa60 	bl	8000864 <BLE_command>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d106      	bne.n	80003b8 <ble_init+0x138>
		stackInitCompleteFlag|=0x10;
 80003aa:	4b2c      	ldr	r3, [pc, #176]	@ (800045c <ble_init+0x1dc>)
 80003ac:	881b      	ldrh	r3, [r3, #0]
 80003ae:	f043 0310 	orr.w	r3, r3, #16
 80003b2:	b29a      	uxth	r2, r3
 80003b4:	4b29      	ldr	r3, [pc, #164]	@ (800045c <ble_init+0x1dc>)
 80003b6:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 80003b8:	4b25      	ldr	r3, [pc, #148]	@ (8000450 <ble_init+0x1d0>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4618      	mov	r0, r3
 80003be:	f003 fbe5 	bl	8003b8c <free>

	 //SET_TX_LEVEL
	 if(BLE_command(ACI_HAL_SET_TX_POWER_LEVEL,sizeof(ACI_HAL_SET_TX_POWER_LEVEL),ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE,sizeof(ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE),0)==BLE_OK){
 80003c2:	2300      	movs	r3, #0
 80003c4:	9300      	str	r3, [sp, #0]
 80003c6:	2307      	movs	r3, #7
 80003c8:	4a2f      	ldr	r2, [pc, #188]	@ (8000488 <ble_init+0x208>)
 80003ca:	2106      	movs	r1, #6
 80003cc:	482f      	ldr	r0, [pc, #188]	@ (800048c <ble_init+0x20c>)
 80003ce:	f000 fa49 	bl	8000864 <BLE_command>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d106      	bne.n	80003e6 <ble_init+0x166>
		stackInitCompleteFlag|=0x20;
 80003d8:	4b20      	ldr	r3, [pc, #128]	@ (800045c <ble_init+0x1dc>)
 80003da:	881b      	ldrh	r3, [r3, #0]
 80003dc:	f043 0320 	orr.w	r3, r3, #32
 80003e0:	b29a      	uxth	r2, r3
 80003e2:	4b1e      	ldr	r3, [pc, #120]	@ (800045c <ble_init+0x1dc>)
 80003e4:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 80003e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000450 <ble_init+0x1d0>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	4618      	mov	r0, r3
 80003ec:	f003 fbce 	bl	8003b8c <free>

	 //SET SCAN RESPONSE DATA
	 if(BLE_command(HCI_LE_SET_SCAN_RESPONSE_DATA,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA),HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE),0)==BLE_OK){
 80003f0:	2300      	movs	r3, #0
 80003f2:	9300      	str	r3, [sp, #0]
 80003f4:	2307      	movs	r3, #7
 80003f6:	4a26      	ldr	r2, [pc, #152]	@ (8000490 <ble_init+0x210>)
 80003f8:	2124      	movs	r1, #36	@ 0x24
 80003fa:	4826      	ldr	r0, [pc, #152]	@ (8000494 <ble_init+0x214>)
 80003fc:	f000 fa32 	bl	8000864 <BLE_command>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d106      	bne.n	8000414 <ble_init+0x194>
		stackInitCompleteFlag|=0x40;
 8000406:	4b15      	ldr	r3, [pc, #84]	@ (800045c <ble_init+0x1dc>)
 8000408:	881b      	ldrh	r3, [r3, #0]
 800040a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800040e:	b29a      	uxth	r2, r3
 8000410:	4b12      	ldr	r3, [pc, #72]	@ (800045c <ble_init+0x1dc>)
 8000412:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 8000414:	4b0e      	ldr	r3, [pc, #56]	@ (8000450 <ble_init+0x1d0>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4618      	mov	r0, r3
 800041a:	f003 fbb7 	bl	8003b8c <free>

	 //This will start the advertisment,
	 //setConnectable();

	 //add the nordic UART service
	 addService(UUID_NORDIC_UART_SERVICE,NORDIC_UART_SERVICE_HANDLE,SET_ATTRIBUTES(7)); //SET_ATTRIBUTES(1+2+3*2+3+3));//1 atribute service +2 attribute char readable+3*(2 NOTIFYABLE READABLE charachteristics)
 800041e:	2207      	movs	r2, #7
 8000420:	491d      	ldr	r1, [pc, #116]	@ (8000498 <ble_init+0x218>)
 8000422:	481e      	ldr	r0, [pc, #120]	@ (800049c <ble_init+0x21c>)
 8000424:	f000 fa6a 	bl	80008fc <addService>

	 //add the nordic UART charachteristics
	 addCharacteristic(UUID_CHAR_READ,READ_CHAR_HANDLE,NORDIC_UART_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),NOTIFIBLE);
 8000428:	2310      	movs	r3, #16
 800042a:	9300      	str	r3, [sp, #0]
 800042c:	2314      	movs	r3, #20
 800042e:	4a1a      	ldr	r2, [pc, #104]	@ (8000498 <ble_init+0x218>)
 8000430:	491b      	ldr	r1, [pc, #108]	@ (80004a0 <ble_init+0x220>)
 8000432:	481c      	ldr	r0, [pc, #112]	@ (80004a4 <ble_init+0x224>)
 8000434:	f000 fa9a 	bl	800096c <addCharacteristic>
	 addCharacteristic(UUID_CHAR_WRITE,WRITE_CHAR_HANDLE,NORDIC_UART_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),WRITABLE);
 8000438:	2304      	movs	r3, #4
 800043a:	9300      	str	r3, [sp, #0]
 800043c:	2314      	movs	r3, #20
 800043e:	4a16      	ldr	r2, [pc, #88]	@ (8000498 <ble_init+0x218>)
 8000440:	4919      	ldr	r1, [pc, #100]	@ (80004a8 <ble_init+0x228>)
 8000442:	481a      	ldr	r0, [pc, #104]	@ (80004ac <ble_init+0x22c>)
 8000444:	f000 fa92 	bl	800096c <addCharacteristic>

	 if(stackInitCompleteFlag==255){
	   //turn on led blue if everything was fine
	 //  HAL_GPIO_WritePin(CPU_LED_GPIO_Port,CPU_LED_Pin,GPIO_PIN_SET);
	 }
	 return;
 8000448:	bf00      	nop
 }
 800044a:	3708      	adds	r7, #8
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}
 8000450:	200002f8 	.word	0x200002f8
 8000454:	200002fc 	.word	0x200002fc
 8000458:	20000000 	.word	0x20000000
 800045c:	200002f6 	.word	0x200002f6
 8000460:	2000000c 	.word	0x2000000c
 8000464:	20000008 	.word	0x20000008
 8000468:	2000001c 	.word	0x2000001c
 800046c:	20000014 	.word	0x20000014
 8000470:	200001e0 	.word	0x200001e0
 8000474:	200001e4 	.word	0x200001e4
 8000478:	200001e8 	.word	0x200001e8
 800047c:	20000120 	.word	0x20000120
 8000480:	20000034 	.word	0x20000034
 8000484:	20000024 	.word	0x20000024
 8000488:	20000044 	.word	0x20000044
 800048c:	2000003c 	.word	0x2000003c
 8000490:	2000007c 	.word	0x2000007c
 8000494:	20000058 	.word	0x20000058
 8000498:	200002ec 	.word	0x200002ec
 800049c:	20000128 	.word	0x20000128
 80004a0:	200002f4 	.word	0x200002f4
 80004a4:	20000148 	.word	0x20000148
 80004a8:	200002f0 	.word	0x200002f0
 80004ac:	20000138 	.word	0x20000138

080004b0 <standbyBle>:

 void standbyBle() {
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af02      	add	r7, sp, #8
	  //STANDBY MODE
	  if(BLE_command(ACI_HAL_SET_STANDBY,sizeof(ACI_HAL_SET_STANDBY),ACI_HAL_SET_STANDBY_COMPLETE,sizeof(ACI_HAL_SET_STANDBY_COMPLETE),0)==BLE_OK){
 80004b6:	2300      	movs	r3, #0
 80004b8:	9300      	str	r3, [sp, #0]
 80004ba:	2307      	movs	r3, #7
 80004bc:	4a06      	ldr	r2, [pc, #24]	@ (80004d8 <standbyBle+0x28>)
 80004be:	2104      	movs	r1, #4
 80004c0:	4806      	ldr	r0, [pc, #24]	@ (80004dc <standbyBle+0x2c>)
 80004c2:	f000 f9cf 	bl	8000864 <BLE_command>
	  }
	  free(rxEvent);
 80004c6:	4b06      	ldr	r3, [pc, #24]	@ (80004e0 <standbyBle+0x30>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	4618      	mov	r0, r3
 80004cc:	f003 fb5e 	bl	8003b8c <free>
 }
 80004d0:	bf00      	nop
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	20000050 	.word	0x20000050
 80004dc:	2000004c 	.word	0x2000004c
 80004e0:	200002f8 	.word	0x200002f8

080004e4 <fetchBleEvent>:

 int fetchBleEvent(uint8_t *container, int size){
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b08c      	sub	sp, #48	@ 0x30
 80004e8:	af02      	add	r7, sp, #8
 80004ea:	6078      	str	r0, [r7, #4]
 80004ec:	6039      	str	r1, [r7, #0]

   uint8_t master_header[]={0x0b,0x00,0x00,0x00,0x00};
 80004ee:	4a3d      	ldr	r2, [pc, #244]	@ (80005e4 <fetchBleEvent+0x100>)
 80004f0:	f107 0318 	add.w	r3, r7, #24
 80004f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004f8:	6018      	str	r0, [r3, #0]
 80004fa:	3304      	adds	r3, #4
 80004fc:	7019      	strb	r1, [r3, #0]
   uint8_t slave_header[5];

   //Wait until it is available an event coming from the BLE module (GPIO PIN COULD CHANGE ACCORDING TO THE BOARD)
   if(HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 80004fe:	2140      	movs	r1, #64	@ 0x40
 8000500:	4839      	ldr	r0, [pc, #228]	@ (80005e8 <fetchBleEvent+0x104>)
 8000502:	f001 fef1 	bl	80022e8 <HAL_GPIO_ReadPin>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d065      	beq.n	80005d8 <fetchBleEvent+0xf4>

   HAL_Delay(5);
 800050c:	2005      	movs	r0, #5
 800050e:	f001 fbeb 	bl	8001ce8 <HAL_Delay>
   //PIN_CS of SPI2 LOW
   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 8000512:	2200      	movs	r2, #0
 8000514:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000518:	4834      	ldr	r0, [pc, #208]	@ (80005ec <fetchBleEvent+0x108>)
 800051a:	f001 fefd 	bl	8002318 <HAL_GPIO_WritePin>

   //SPI2 in this case, it could change according to the board
   //we send a byte containing a request of reading followed by 4 dummy bytes
   HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 800051e:	f107 0210 	add.w	r2, r7, #16
 8000522:	f107 0118 	add.w	r1, r7, #24
 8000526:	2301      	movs	r3, #1
 8000528:	9300      	str	r3, [sp, #0]
 800052a:	2305      	movs	r3, #5
 800052c:	4830      	ldr	r0, [pc, #192]	@ (80005f0 <fetchBleEvent+0x10c>)
 800052e:	f002 ff9f 	bl	8003470 <HAL_SPI_TransmitReceive>
   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000532:	2201      	movs	r2, #1
 8000534:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000538:	482c      	ldr	r0, [pc, #176]	@ (80005ec <fetchBleEvent+0x108>)
 800053a:	f001 feed 	bl	8002318 <HAL_GPIO_WritePin>
   HAL_Delay(1);
 800053e:	2001      	movs	r0, #1
 8000540:	f001 fbd2 	bl	8001ce8 <HAL_Delay>
   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 8000544:	2200      	movs	r2, #0
 8000546:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800054a:	4828      	ldr	r0, [pc, #160]	@ (80005ec <fetchBleEvent+0x108>)
 800054c:	f001 fee4 	bl	8002318 <HAL_GPIO_WritePin>

   HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 8000550:	f107 0210 	add.w	r2, r7, #16
 8000554:	f107 0118 	add.w	r1, r7, #24
 8000558:	2301      	movs	r3, #1
 800055a:	9300      	str	r3, [sp, #0]
 800055c:	2305      	movs	r3, #5
 800055e:	4824      	ldr	r0, [pc, #144]	@ (80005f0 <fetchBleEvent+0x10c>)
 8000560:	f002 ff86 	bl	8003470 <HAL_SPI_TransmitReceive>

   //let's get the size of data available
   int dataSize;
   dataSize=(slave_header[3]|slave_header[4]<<8);
 8000564:	7cfb      	ldrb	r3, [r7, #19]
 8000566:	461a      	mov	r2, r3
 8000568:	7d3b      	ldrb	r3, [r7, #20]
 800056a:	021b      	lsls	r3, r3, #8
 800056c:	4313      	orrs	r3, r2
 800056e:	627b      	str	r3, [r7, #36]	@ 0x24
   int i;
   char dummy=0xff;
 8000570:	23ff      	movs	r3, #255	@ 0xff
 8000572:	73fb      	strb	r3, [r7, #15]

   if(dataSize>size){
 8000574:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000576:	683b      	ldr	r3, [r7, #0]
 8000578:	429a      	cmp	r2, r3
 800057a:	dd01      	ble.n	8000580 <fetchBleEvent+0x9c>
	   dataSize=size;
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	627b      	str	r3, [r7, #36]	@ 0x24
   }

   if(dataSize>0){
 8000580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000582:	2b00      	cmp	r3, #0
 8000584:	dd1f      	ble.n	80005c6 <fetchBleEvent+0xe2>
		 //let's fill the get the bytes availables and insert them into the container variable
		   for(i=0;i<dataSize;i++){
 8000586:	2300      	movs	r3, #0
 8000588:	623b      	str	r3, [r7, #32]
 800058a:	e00d      	b.n	80005a8 <fetchBleEvent+0xc4>
		   HAL_SPI_TransmitReceive(&hspi3,(uint8_t*)&dummy,container+i,1,1);
 800058c:	6a3b      	ldr	r3, [r7, #32]
 800058e:	687a      	ldr	r2, [r7, #4]
 8000590:	441a      	add	r2, r3
 8000592:	f107 010f 	add.w	r1, r7, #15
 8000596:	2301      	movs	r3, #1
 8000598:	9300      	str	r3, [sp, #0]
 800059a:	2301      	movs	r3, #1
 800059c:	4814      	ldr	r0, [pc, #80]	@ (80005f0 <fetchBleEvent+0x10c>)
 800059e:	f002 ff67 	bl	8003470 <HAL_SPI_TransmitReceive>
		   for(i=0;i<dataSize;i++){
 80005a2:	6a3b      	ldr	r3, [r7, #32]
 80005a4:	3301      	adds	r3, #1
 80005a6:	623b      	str	r3, [r7, #32]
 80005a8:	6a3a      	ldr	r2, [r7, #32]
 80005aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005ac:	429a      	cmp	r2, r3
 80005ae:	dbed      	blt.n	800058c <fetchBleEvent+0xa8>

		   }
		   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 80005b0:	2201      	movs	r2, #1
 80005b2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005b6:	480d      	ldr	r0, [pc, #52]	@ (80005ec <fetchBleEvent+0x108>)
 80005b8:	f001 feae 	bl	8002318 <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
		 return -1;
	   }

   //let's stop the SPI2
   dataAvailable=0;
 80005bc:	4b0d      	ldr	r3, [pc, #52]	@ (80005f4 <fetchBleEvent+0x110>)
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
   return BLE_OK;
 80005c2:	2300      	movs	r3, #0
 80005c4:	e00a      	b.n	80005dc <fetchBleEvent+0xf8>
		   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 80005c6:	2201      	movs	r2, #1
 80005c8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005cc:	4807      	ldr	r0, [pc, #28]	@ (80005ec <fetchBleEvent+0x108>)
 80005ce:	f001 fea3 	bl	8002318 <HAL_GPIO_WritePin>
		 return -1;
 80005d2:	f04f 33ff 	mov.w	r3, #4294967295
 80005d6:	e001      	b.n	80005dc <fetchBleEvent+0xf8>
   }else{
   return -2;
 80005d8:	f06f 0301 	mvn.w	r3, #1
   }
 }
 80005dc:	4618      	mov	r0, r3
 80005de:	3728      	adds	r7, #40	@ 0x28
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	08004bfc 	.word	0x08004bfc
 80005e8:	48001000 	.word	0x48001000
 80005ec:	48000c00 	.word	0x48000c00
 80005f0:	20000300 	.word	0x20000300
 80005f4:	200002fc 	.word	0x200002fc

080005f8 <checkEventResp>:


 int checkEventResp(uint8_t *event, uint8_t *reference, int size){
 80005f8:	b480      	push	{r7}
 80005fa:	b087      	sub	sp, #28
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	60f8      	str	r0, [r7, #12]
 8000600:	60b9      	str	r1, [r7, #8]
 8000602:	607a      	str	r2, [r7, #4]
	 int j=0;
 8000604:	2300      	movs	r3, #0
 8000606:	617b      	str	r3, [r7, #20]

	 for(j=0;j<size;j++){
 8000608:	2300      	movs	r3, #0
 800060a:	617b      	str	r3, [r7, #20]
 800060c:	e00f      	b.n	800062e <checkEventResp+0x36>

		 if(event[j]!=reference[j]){
 800060e:	697b      	ldr	r3, [r7, #20]
 8000610:	68fa      	ldr	r2, [r7, #12]
 8000612:	4413      	add	r3, r2
 8000614:	781a      	ldrb	r2, [r3, #0]
 8000616:	697b      	ldr	r3, [r7, #20]
 8000618:	68b9      	ldr	r1, [r7, #8]
 800061a:	440b      	add	r3, r1
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	429a      	cmp	r2, r3
 8000620:	d002      	beq.n	8000628 <checkEventResp+0x30>
			 return -1;
 8000622:	f04f 33ff 	mov.w	r3, #4294967295
 8000626:	e007      	b.n	8000638 <checkEventResp+0x40>
	 for(j=0;j<size;j++){
 8000628:	697b      	ldr	r3, [r7, #20]
 800062a:	3301      	adds	r3, #1
 800062c:	617b      	str	r3, [r7, #20]
 800062e:	697a      	ldr	r2, [r7, #20]
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	429a      	cmp	r2, r3
 8000634:	dbeb      	blt.n	800060e <checkEventResp+0x16>
		 }
	 }

 return BLE_OK;
 8000636:	2300      	movs	r3, #0
 }
 8000638:	4618      	mov	r0, r3
 800063a:	371c      	adds	r7, #28
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr

08000644 <sendCommand>:

 void sendCommand(uint8_t *command,int size){
 8000644:	b580      	push	{r7, lr}
 8000646:	b08a      	sub	sp, #40	@ 0x28
 8000648:	af02      	add	r7, sp, #8
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	6039      	str	r1, [r7, #0]

	   uint8_t master_header[]={0x0a,0x00,0x00,0x00,0x00};
 800064e:	4a1f      	ldr	r2, [pc, #124]	@ (80006cc <sendCommand+0x88>)
 8000650:	f107 0310 	add.w	r3, r7, #16
 8000654:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000658:	6018      	str	r0, [r3, #0]
 800065a:	3304      	adds	r3, #4
 800065c:	7019      	strb	r1, [r3, #0]
	   uint8_t slave_header[5];

	   int result;

	 do{
	   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 800065e:	2200      	movs	r2, #0
 8000660:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000664:	481a      	ldr	r0, [pc, #104]	@ (80006d0 <sendCommand+0x8c>)
 8000666:	f001 fe57 	bl	8002318 <HAL_GPIO_WritePin>

	   //wait until it is possible to write
	   //while(!dataAvailable);
	   HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 800066a:	f107 0208 	add.w	r2, r7, #8
 800066e:	f107 0110 	add.w	r1, r7, #16
 8000672:	2301      	movs	r3, #1
 8000674:	9300      	str	r3, [sp, #0]
 8000676:	2305      	movs	r3, #5
 8000678:	4816      	ldr	r0, [pc, #88]	@ (80006d4 <sendCommand+0x90>)
 800067a:	f002 fef9 	bl	8003470 <HAL_SPI_TransmitReceive>
	   int bufferSize=(slave_header[2]<<8|slave_header[1]);
 800067e:	7abb      	ldrb	r3, [r7, #10]
 8000680:	021b      	lsls	r3, r3, #8
 8000682:	7a7a      	ldrb	r2, [r7, #9]
 8000684:	4313      	orrs	r3, r2
 8000686:	61bb      	str	r3, [r7, #24]
	   if(bufferSize>=size){
 8000688:	69ba      	ldr	r2, [r7, #24]
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	429a      	cmp	r2, r3
 800068e:	db09      	blt.n	80006a4 <sendCommand+0x60>
		 HAL_SPI_Transmit(&hspi3,command,size,1);
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	b29a      	uxth	r2, r3
 8000694:	2301      	movs	r3, #1
 8000696:	6879      	ldr	r1, [r7, #4]
 8000698:	480e      	ldr	r0, [pc, #56]	@ (80006d4 <sendCommand+0x90>)
 800069a:	f002 fd74 	bl	8003186 <HAL_SPI_Transmit>
		 result=0;
 800069e:	2300      	movs	r3, #0
 80006a0:	61fb      	str	r3, [r7, #28]
 80006a2:	e002      	b.n	80006aa <sendCommand+0x66>
	   }else{
		 result=-1;
 80006a4:	f04f 33ff 	mov.w	r3, #4294967295
 80006a8:	61fb      	str	r3, [r7, #28]
	   }
	   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 80006aa:	2201      	movs	r2, #1
 80006ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006b0:	4807      	ldr	r0, [pc, #28]	@ (80006d0 <sendCommand+0x8c>)
 80006b2:	f001 fe31 	bl	8002318 <HAL_GPIO_WritePin>
	   dataAvailable=0;
 80006b6:	4b08      	ldr	r3, [pc, #32]	@ (80006d8 <sendCommand+0x94>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
	 }while(result!=0);
 80006bc:	69fb      	ldr	r3, [r7, #28]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d1cd      	bne.n	800065e <sendCommand+0x1a>

 }
 80006c2:	bf00      	nop
 80006c4:	bf00      	nop
 80006c6:	3720      	adds	r7, #32
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	08004c04 	.word	0x08004c04
 80006d0:	48000c00 	.word	0x48000c00
 80006d4:	20000300 	.word	0x20000300
 80006d8:	200002fc 	.word	0x200002fc

080006dc <catchBLE>:

 void catchBLE(uint8_t * byte1, uint8_t * byte2){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	6039      	str	r1, [r7, #0]
	 int result=fetchBleEvent(buffer,127);
 80006e6:	217f      	movs	r1, #127	@ 0x7f
 80006e8:	4819      	ldr	r0, [pc, #100]	@ (8000750 <catchBLE+0x74>)
 80006ea:	f7ff fefb 	bl	80004e4 <fetchBleEvent>
 80006ee:	60f8      	str	r0, [r7, #12]
	 if(result==BLE_OK){
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d128      	bne.n	8000748 <catchBLE+0x6c>
		 if(checkEventResp(buffer,EVENT_DISCONNECTED,3)==BLE_OK){
 80006f6:	2203      	movs	r2, #3
 80006f8:	4916      	ldr	r1, [pc, #88]	@ (8000754 <catchBLE+0x78>)
 80006fa:	4815      	ldr	r0, [pc, #84]	@ (8000750 <catchBLE+0x74>)
 80006fc:	f7ff ff7c 	bl	80005f8 <checkEventResp>
			 //setConnectable();
		 }
		 if(checkEventResp(buffer, EVENT_CONNECTED, 5)==BLE_OK){
 8000700:	2205      	movs	r2, #5
 8000702:	4915      	ldr	r1, [pc, #84]	@ (8000758 <catchBLE+0x7c>)
 8000704:	4812      	ldr	r0, [pc, #72]	@ (8000750 <catchBLE+0x74>)
 8000706:	f7ff ff77 	bl	80005f8 <checkEventResp>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d109      	bne.n	8000724 <catchBLE+0x48>
			 // Little Endian Format
			 *(connectionHandler) = buffer[5];
 8000710:	4b0f      	ldr	r3, [pc, #60]	@ (8000750 <catchBLE+0x74>)
 8000712:	795b      	ldrb	r3, [r3, #5]
 8000714:	b21a      	sxth	r2, r3
 8000716:	4b11      	ldr	r3, [pc, #68]	@ (800075c <catchBLE+0x80>)
 8000718:	801a      	strh	r2, [r3, #0]
			 *(connectionHandler + 1) = buffer[6];
 800071a:	4b0d      	ldr	r3, [pc, #52]	@ (8000750 <catchBLE+0x74>)
 800071c:	799b      	ldrb	r3, [r3, #6]
 800071e:	b21a      	sxth	r2, r3
 8000720:	4b0e      	ldr	r3, [pc, #56]	@ (800075c <catchBLE+0x80>)
 8000722:	805a      	strh	r2, [r3, #2]
		 }
		 if (checkEventResp(buffer, EVENT_GATT_CHANGED, 5)){
 8000724:	2205      	movs	r2, #5
 8000726:	490e      	ldr	r1, [pc, #56]	@ (8000760 <catchBLE+0x84>)
 8000728:	4809      	ldr	r0, [pc, #36]	@ (8000750 <catchBLE+0x74>)
 800072a:	f7ff ff65 	bl	80005f8 <checkEventResp>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d009      	beq.n	8000748 <catchBLE+0x6c>
			 *(connectionHandler) = buffer[5];
 8000734:	4b06      	ldr	r3, [pc, #24]	@ (8000750 <catchBLE+0x74>)
 8000736:	795b      	ldrb	r3, [r3, #5]
 8000738:	b21a      	sxth	r2, r3
 800073a:	4b08      	ldr	r3, [pc, #32]	@ (800075c <catchBLE+0x80>)
 800073c:	801a      	strh	r2, [r3, #0]
			 *(connectionHandler + 1) = buffer[6];
 800073e:	4b04      	ldr	r3, [pc, #16]	@ (8000750 <catchBLE+0x74>)
 8000740:	799b      	ldrb	r3, [r3, #6]
 8000742:	b21a      	sxth	r2, r3
 8000744:	4b05      	ldr	r3, [pc, #20]	@ (800075c <catchBLE+0x80>)
 8000746:	805a      	strh	r2, [r3, #2]
		 }
	 }else{
		 //something bad is happening if I am here
	 }
 }
 8000748:	bf00      	nop
 800074a:	3710      	adds	r7, #16
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	200001ec 	.word	0x200001ec
 8000754:	200000f8 	.word	0x200000f8
 8000758:	20000104 	.word	0x20000104
 800075c:	20000158 	.word	0x20000158
 8000760:	2000010c 	.word	0x2000010c

08000764 <setConnectable>:
//		free(discoverableCommand);
//		free(localname);
//		HAL_Delay(10);
// }

 void setConnectable(){
 8000764:	b590      	push	{r4, r7, lr}
 8000766:	b085      	sub	sp, #20
 8000768:	af00      	add	r7, sp, #0
 		uint8_t* rxEvent;
 		//Start advertising
 		uint8_t *localname;
 		int res;
 		localname=(uint8_t*)malloc(sizeof(deviceName)+5);//carattere di terminazione+listauid+slavetemp
 800076a:	200c      	movs	r0, #12
 800076c:	f003 fa06 	bl	8003b7c <malloc>
 8000770:	4603      	mov	r3, r0
 8000772:	60fb      	str	r3, [r7, #12]
 		memcpy(localname,deviceName,sizeof(deviceName));
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	4a37      	ldr	r2, [pc, #220]	@ (8000854 <setConnectable+0xf0>)
 8000778:	6810      	ldr	r0, [r2, #0]
 800077a:	6018      	str	r0, [r3, #0]
 800077c:	8891      	ldrh	r1, [r2, #4]
 800077e:	7992      	ldrb	r2, [r2, #6]
 8000780:	8099      	strh	r1, [r3, #4]
 8000782:	719a      	strb	r2, [r3, #6]
 		localname[sizeof(deviceName)+1]=0x00;
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	3308      	adds	r3, #8
 8000788:	2200      	movs	r2, #0
 800078a:	701a      	strb	r2, [r3, #0]
 		localname[sizeof(deviceName)+2]=0x00;
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	3309      	adds	r3, #9
 8000790:	2200      	movs	r2, #0
 8000792:	701a      	strb	r2, [r3, #0]
 		localname[sizeof(deviceName)+3]=0x00;
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	330a      	adds	r3, #10
 8000798:	2200      	movs	r2, #0
 800079a:	701a      	strb	r2, [r3, #0]
 		localname[sizeof(deviceName)+4]=0x00;
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	330b      	adds	r3, #11
 80007a0:	2200      	movs	r2, #0
 80007a2:	701a      	strb	r2, [r3, #0]
 		localname[sizeof(deviceName)]=0x00;
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	3307      	adds	r3, #7
 80007a8:	2200      	movs	r2, #0
 80007aa:	701a      	strb	r2, [r3, #0]


 		ACI_GAP_SET_DISCOVERABLE[11]=sizeof(deviceName)+1;
 80007ac:	4b2a      	ldr	r3, [pc, #168]	@ (8000858 <setConnectable+0xf4>)
 80007ae:	2208      	movs	r2, #8
 80007b0:	72da      	strb	r2, [r3, #11]
 		ACI_GAP_SET_DISCOVERABLE[3]=sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE)-4;
 80007b2:	4b29      	ldr	r3, [pc, #164]	@ (8000858 <setConnectable+0xf4>)
 80007b4:	2215      	movs	r2, #21
 80007b6:	70da      	strb	r2, [r3, #3]

 		uint8_t *discoverableCommand;
 		discoverableCommand=(uint8_t*)malloc(sizeof(ACI_GAP_SET_DISCOVERABLE)+sizeof(deviceName)+5);
 80007b8:	2019      	movs	r0, #25
 80007ba:	f003 f9df 	bl	8003b7c <malloc>
 80007be:	4603      	mov	r3, r0
 80007c0:	60bb      	str	r3, [r7, #8]
 		memcpy(discoverableCommand,ACI_GAP_SET_DISCOVERABLE,sizeof(ACI_GAP_SET_DISCOVERABLE));
 80007c2:	68bb      	ldr	r3, [r7, #8]
 80007c4:	4a24      	ldr	r2, [pc, #144]	@ (8000858 <setConnectable+0xf4>)
 80007c6:	461c      	mov	r4, r3
 80007c8:	4613      	mov	r3, r2
 80007ca:	cb07      	ldmia	r3!, {r0, r1, r2}
 80007cc:	6020      	str	r0, [r4, #0]
 80007ce:	6061      	str	r1, [r4, #4]
 80007d0:	60a2      	str	r2, [r4, #8]
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	7323      	strb	r3, [r4, #12]
 		memcpy(discoverableCommand+sizeof(ACI_GAP_SET_DISCOVERABLE),localname,sizeof(deviceName)+5);
 80007d6:	68bb      	ldr	r3, [r7, #8]
 80007d8:	330d      	adds	r3, #13
 80007da:	220c      	movs	r2, #12
 80007dc:	68f9      	ldr	r1, [r7, #12]
 80007de:	4618      	mov	r0, r3
 80007e0:	f003 fd41 	bl	8004266 <memcpy>

 		// remove existing buffer content
 		rxEvent=(uint8_t*)malloc(7);
 80007e4:	2007      	movs	r0, #7
 80007e6:	f003 f9c9 	bl	8003b7c <malloc>
 80007ea:	4603      	mov	r3, r0
 80007ec:	607b      	str	r3, [r7, #4]
 		res=fetchBleEvent(rxEvent,7);
 80007ee:	2107      	movs	r1, #7
 80007f0:	6878      	ldr	r0, [r7, #4]
 80007f2:	f7ff fe77 	bl	80004e4 <fetchBleEvent>
 80007f6:	6038      	str	r0, [r7, #0]

 		// send the command to make the peripheral discoverable
 		sendCommand(discoverableCommand,sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE));
 80007f8:	2119      	movs	r1, #25
 80007fa:	68b8      	ldr	r0, [r7, #8]
 80007fc:	f7ff ff22 	bl	8000644 <sendCommand>
 		HAL_Delay(100);
 8000800:	2064      	movs	r0, #100	@ 0x64
 8000802:	f001 fa71 	bl	8001ce8 <HAL_Delay>
 		res=fetchBleEvent(rxEvent,7);
 8000806:	2107      	movs	r1, #7
 8000808:	6878      	ldr	r0, [r7, #4]
 800080a:	f7ff fe6b 	bl	80004e4 <fetchBleEvent>
 800080e:	6038      	str	r0, [r7, #0]
 		if(res==BLE_OK){
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d10e      	bne.n	8000834 <setConnectable+0xd0>
 		   if(checkEventResp(rxEvent, ACI_GAP_SET_DISCOVERABLE_COMPLETE, 7)==BLE_OK){
 8000816:	2207      	movs	r2, #7
 8000818:	4910      	ldr	r1, [pc, #64]	@ (800085c <setConnectable+0xf8>)
 800081a:	6878      	ldr	r0, [r7, #4]
 800081c:	f7ff feec 	bl	80005f8 <checkEventResp>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d106      	bne.n	8000834 <setConnectable+0xd0>
 			  stackInitCompleteFlag|=0x80;
 8000826:	4b0e      	ldr	r3, [pc, #56]	@ (8000860 <setConnectable+0xfc>)
 8000828:	881b      	ldrh	r3, [r3, #0]
 800082a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800082e:	b29a      	uxth	r2, r3
 8000830:	4b0b      	ldr	r3, [pc, #44]	@ (8000860 <setConnectable+0xfc>)
 8000832:	801a      	strh	r2, [r3, #0]
 		   }
 		}
 		free(rxEvent);
 8000834:	6878      	ldr	r0, [r7, #4]
 8000836:	f003 f9a9 	bl	8003b8c <free>
 		free(discoverableCommand);
 800083a:	68b8      	ldr	r0, [r7, #8]
 800083c:	f003 f9a6 	bl	8003b8c <free>
 		free(localname);
 8000840:	68f8      	ldr	r0, [r7, #12]
 8000842:	f003 f9a3 	bl	8003b8c <free>
 		HAL_Delay(10);
 8000846:	200a      	movs	r0, #10
 8000848:	f001 fa4e 	bl	8001ce8 <HAL_Delay>
  }
 800084c:	bf00      	nop
 800084e:	3714      	adds	r7, #20
 8000850:	46bd      	mov	sp, r7
 8000852:	bd90      	pop	{r4, r7, pc}
 8000854:	20000120 	.word	0x20000120
 8000858:	20000084 	.word	0x20000084
 800085c:	20000094 	.word	0x20000094
 8000860:	200002f6 	.word	0x200002f6

08000864 <BLE_command>:
  * @param sizeRes Expected size of the response result.
  * @param returnHandles Number of handles expected in the response (each handle occupies 2 bytes).
  * @return int Returns BLE_OK if the command was successfully executed and the event response is valid,
  *             or an error code if something went wrong.
  */
 int BLE_command(uint8_t* command, int size, uint8_t* result, int sizeRes, int returnHandles){
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af00      	add	r7, sp, #0
 800086a:	60f8      	str	r0, [r7, #12]
 800086c:	60b9      	str	r1, [r7, #8]
 800086e:	607a      	str	r2, [r7, #4]
 8000870:	603b      	str	r3, [r7, #0]
		int response;

		sendCommand(command,size);
 8000872:	68b9      	ldr	r1, [r7, #8]
 8000874:	68f8      	ldr	r0, [r7, #12]
 8000876:	f7ff fee5 	bl	8000644 <sendCommand>
		rxEvent=(uint8_t*)malloc(sizeRes+2*returnHandles);
 800087a:	6a3b      	ldr	r3, [r7, #32]
 800087c:	005a      	lsls	r2, r3, #1
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	4413      	add	r3, r2
 8000882:	4618      	mov	r0, r3
 8000884:	f003 f97a 	bl	8003b7c <malloc>
 8000888:	4603      	mov	r3, r0
 800088a:	461a      	mov	r2, r3
 800088c:	4b19      	ldr	r3, [pc, #100]	@ (80008f4 <BLE_command+0x90>)
 800088e:	601a      	str	r2, [r3, #0]

		long contatore=0;
 8000890:	2300      	movs	r3, #0
 8000892:	613b      	str	r3, [r7, #16]
		while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8000894:	e007      	b.n	80008a6 <BLE_command+0x42>
			contatore++;
 8000896:	693b      	ldr	r3, [r7, #16]
 8000898:	3301      	adds	r3, #1
 800089a:	613b      	str	r3, [r7, #16]
			if(contatore>30000){
 800089c:	693b      	ldr	r3, [r7, #16]
 800089e:	f247 5230 	movw	r2, #30000	@ 0x7530
 80008a2:	4293      	cmp	r3, r2
 80008a4:	dc07      	bgt.n	80008b6 <BLE_command+0x52>
		while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 80008a6:	2140      	movs	r1, #64	@ 0x40
 80008a8:	4813      	ldr	r0, [pc, #76]	@ (80008f8 <BLE_command+0x94>)
 80008aa:	f001 fd1d 	bl	80022e8 <HAL_GPIO_ReadPin>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d0f0      	beq.n	8000896 <BLE_command+0x32>
 80008b4:	e000      	b.n	80008b8 <BLE_command+0x54>
				break;
 80008b6:	bf00      	nop
			}
		}


		response=fetchBleEvent(rxEvent,sizeRes+returnHandles*2);
 80008b8:	4b0e      	ldr	r3, [pc, #56]	@ (80008f4 <BLE_command+0x90>)
 80008ba:	6818      	ldr	r0, [r3, #0]
 80008bc:	6a3b      	ldr	r3, [r7, #32]
 80008be:	005a      	lsls	r2, r3, #1
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	4413      	add	r3, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	f7ff fe0d 	bl	80004e4 <fetchBleEvent>
 80008ca:	6178      	str	r0, [r7, #20]
		if(response==BLE_OK){
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d107      	bne.n	80008e2 <BLE_command+0x7e>
			response=checkEventResp(rxEvent,result,sizeRes);
 80008d2:	4b08      	ldr	r3, [pc, #32]	@ (80008f4 <BLE_command+0x90>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	683a      	ldr	r2, [r7, #0]
 80008d8:	6879      	ldr	r1, [r7, #4]
 80008da:	4618      	mov	r0, r3
 80008dc:	f7ff fe8c 	bl	80005f8 <checkEventResp>
 80008e0:	6178      	str	r0, [r7, #20]
		}
		HAL_Delay(10);
 80008e2:	200a      	movs	r0, #10
 80008e4:	f001 fa00 	bl	8001ce8 <HAL_Delay>


	 return response;
 80008e8:	697b      	ldr	r3, [r7, #20]
 }
 80008ea:	4618      	mov	r0, r3
 80008ec:	3718      	adds	r7, #24
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	200002f8 	.word	0x200002f8
 80008f8:	48001000 	.word	0x48001000

080008fc <addService>:

 void addService(uint8_t* UUID, uint8_t* handle, int attributes){
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b086      	sub	sp, #24
 8000900:	af02      	add	r7, sp, #8
 8000902:	60f8      	str	r0, [r7, #12]
 8000904:	60b9      	str	r1, [r7, #8]
 8000906:	607a      	str	r2, [r7, #4]


	 //memcpy
	 memcpy(ADD_PRIMARY_SERVICE+5,UUID,16);
 8000908:	4b14      	ldr	r3, [pc, #80]	@ (800095c <addService+0x60>)
 800090a:	2210      	movs	r2, #16
 800090c:	68f9      	ldr	r1, [r7, #12]
 800090e:	4618      	mov	r0, r3
 8000910:	f003 fca9 	bl	8004266 <memcpy>
	 ADD_PRIMARY_SERVICE[22]=attributes;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	b2da      	uxtb	r2, r3
 8000918:	4b11      	ldr	r3, [pc, #68]	@ (8000960 <addService+0x64>)
 800091a:	759a      	strb	r2, [r3, #22]
		if(BLE_command(ADD_PRIMARY_SERVICE,sizeof(ADD_PRIMARY_SERVICE),ADD_PRIMARY_SERVICE_COMPLETE,sizeof(ADD_PRIMARY_SERVICE_COMPLETE),1)==BLE_OK){
 800091c:	2301      	movs	r3, #1
 800091e:	9300      	str	r3, [sp, #0]
 8000920:	2307      	movs	r3, #7
 8000922:	4a10      	ldr	r2, [pc, #64]	@ (8000964 <addService+0x68>)
 8000924:	2117      	movs	r1, #23
 8000926:	480e      	ldr	r0, [pc, #56]	@ (8000960 <addService+0x64>)
 8000928:	f7ff ff9c 	bl	8000864 <BLE_command>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d10a      	bne.n	8000948 <addService+0x4c>
			handle[0]=rxEvent[7];
 8000932:	4b0d      	ldr	r3, [pc, #52]	@ (8000968 <addService+0x6c>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	79da      	ldrb	r2, [r3, #7]
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	701a      	strb	r2, [r3, #0]
			handle[1]=rxEvent[8];
 800093c:	4b0a      	ldr	r3, [pc, #40]	@ (8000968 <addService+0x6c>)
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	3301      	adds	r3, #1
 8000944:	7a12      	ldrb	r2, [r2, #8]
 8000946:	701a      	strb	r2, [r3, #0]
		 }
		free(rxEvent);
 8000948:	4b07      	ldr	r3, [pc, #28]	@ (8000968 <addService+0x6c>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4618      	mov	r0, r3
 800094e:	f003 f91d 	bl	8003b8c <free>
 }
 8000952:	bf00      	nop
 8000954:	3710      	adds	r7, #16
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	200000a1 	.word	0x200000a1
 8000960:	2000009c 	.word	0x2000009c
 8000964:	200000b4 	.word	0x200000b4
 8000968:	200002f8 	.word	0x200002f8

0800096c <addCharacteristic>:

 void addCharacteristic(uint8_t* UUID,uint8_t* handleChar, uint8_t* handleService, uint8_t maxsize, uint8_t proprieties){
 800096c:	b580      	push	{r7, lr}
 800096e:	b086      	sub	sp, #24
 8000970:	af02      	add	r7, sp, #8
 8000972:	60f8      	str	r0, [r7, #12]
 8000974:	60b9      	str	r1, [r7, #8]
 8000976:	607a      	str	r2, [r7, #4]
 8000978:	70fb      	strb	r3, [r7, #3]
	 memcpy(ADD_CUSTOM_CHAR+7,UUID,16);
 800097a:	4b19      	ldr	r3, [pc, #100]	@ (80009e0 <addCharacteristic+0x74>)
 800097c:	2210      	movs	r2, #16
 800097e:	68f9      	ldr	r1, [r7, #12]
 8000980:	4618      	mov	r0, r3
 8000982:	f003 fc70 	bl	8004266 <memcpy>

	 ADD_CUSTOM_CHAR[4]= handleService[0];
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	781a      	ldrb	r2, [r3, #0]
 800098a:	4b16      	ldr	r3, [pc, #88]	@ (80009e4 <addCharacteristic+0x78>)
 800098c:	711a      	strb	r2, [r3, #4]
	 ADD_CUSTOM_CHAR[5]= handleService[1];
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	785a      	ldrb	r2, [r3, #1]
 8000992:	4b14      	ldr	r3, [pc, #80]	@ (80009e4 <addCharacteristic+0x78>)
 8000994:	715a      	strb	r2, [r3, #5]
	 ADD_CUSTOM_CHAR[23]= maxsize;
 8000996:	4a13      	ldr	r2, [pc, #76]	@ (80009e4 <addCharacteristic+0x78>)
 8000998:	78fb      	ldrb	r3, [r7, #3]
 800099a:	75d3      	strb	r3, [r2, #23]
	 ADD_CUSTOM_CHAR[25]= proprieties;
 800099c:	4a11      	ldr	r2, [pc, #68]	@ (80009e4 <addCharacteristic+0x78>)
 800099e:	7e3b      	ldrb	r3, [r7, #24]
 80009a0:	7653      	strb	r3, [r2, #25]
	 if(BLE_command(ADD_CUSTOM_CHAR,sizeof(ADD_CUSTOM_CHAR),ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),1)==BLE_OK){
 80009a2:	2301      	movs	r3, #1
 80009a4:	9300      	str	r3, [sp, #0]
 80009a6:	2307      	movs	r3, #7
 80009a8:	4a0f      	ldr	r2, [pc, #60]	@ (80009e8 <addCharacteristic+0x7c>)
 80009aa:	211e      	movs	r1, #30
 80009ac:	480d      	ldr	r0, [pc, #52]	@ (80009e4 <addCharacteristic+0x78>)
 80009ae:	f7ff ff59 	bl	8000864 <BLE_command>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d10a      	bne.n	80009ce <addCharacteristic+0x62>
		 handleChar[0]=rxEvent[7];
 80009b8:	4b0c      	ldr	r3, [pc, #48]	@ (80009ec <addCharacteristic+0x80>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	79da      	ldrb	r2, [r3, #7]
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	701a      	strb	r2, [r3, #0]
		 handleChar[1]=rxEvent[8];
 80009c2:	4b0a      	ldr	r3, [pc, #40]	@ (80009ec <addCharacteristic+0x80>)
 80009c4:	681a      	ldr	r2, [r3, #0]
 80009c6:	68bb      	ldr	r3, [r7, #8]
 80009c8:	3301      	adds	r3, #1
 80009ca:	7a12      	ldrb	r2, [r2, #8]
 80009cc:	701a      	strb	r2, [r3, #0]
	 }
	 free(rxEvent);
 80009ce:	4b07      	ldr	r3, [pc, #28]	@ (80009ec <addCharacteristic+0x80>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4618      	mov	r0, r3
 80009d4:	f003 f8da 	bl	8003b8c <free>
 }
 80009d8:	bf00      	nop
 80009da:	3710      	adds	r7, #16
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	200000c3 	.word	0x200000c3
 80009e4:	200000bc 	.word	0x200000bc
 80009e8:	200000dc 	.word	0x200000dc
 80009ec:	200002f8 	.word	0x200002f8

080009f0 <updateCharValue>:

 void updateCharValue(uint8_t* handleService,uint8_t* handleChar, int offset, int size,uint8_t* data){
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b088      	sub	sp, #32
 80009f4:	af02      	add	r7, sp, #8
 80009f6:	60f8      	str	r0, [r7, #12]
 80009f8:	60b9      	str	r1, [r7, #8]
 80009fa:	607a      	str	r2, [r7, #4]
 80009fc:	603b      	str	r3, [r7, #0]
	 UPDATE_CHAR[3]=size+6;
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	3306      	adds	r3, #6
 8000a04:	b2da      	uxtb	r2, r3
 8000a06:	4b21      	ldr	r3, [pc, #132]	@ (8000a8c <updateCharValue+0x9c>)
 8000a08:	70da      	strb	r2, [r3, #3]
	 UPDATE_CHAR[4]=handleService[0];
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	781a      	ldrb	r2, [r3, #0]
 8000a0e:	4b1f      	ldr	r3, [pc, #124]	@ (8000a8c <updateCharValue+0x9c>)
 8000a10:	711a      	strb	r2, [r3, #4]
	 UPDATE_CHAR[5]=handleService[1];
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	785a      	ldrb	r2, [r3, #1]
 8000a16:	4b1d      	ldr	r3, [pc, #116]	@ (8000a8c <updateCharValue+0x9c>)
 8000a18:	715a      	strb	r2, [r3, #5]
	 UPDATE_CHAR[6]=handleChar[0];
 8000a1a:	68bb      	ldr	r3, [r7, #8]
 8000a1c:	781a      	ldrb	r2, [r3, #0]
 8000a1e:	4b1b      	ldr	r3, [pc, #108]	@ (8000a8c <updateCharValue+0x9c>)
 8000a20:	719a      	strb	r2, [r3, #6]
	 UPDATE_CHAR[7]=handleChar[1];
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	785a      	ldrb	r2, [r3, #1]
 8000a26:	4b19      	ldr	r3, [pc, #100]	@ (8000a8c <updateCharValue+0x9c>)
 8000a28:	71da      	strb	r2, [r3, #7]
	 UPDATE_CHAR[8]=offset;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	b2da      	uxtb	r2, r3
 8000a2e:	4b17      	ldr	r3, [pc, #92]	@ (8000a8c <updateCharValue+0x9c>)
 8000a30:	721a      	strb	r2, [r3, #8]
	 UPDATE_CHAR[9]=size;
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	b2da      	uxtb	r2, r3
 8000a36:	4b15      	ldr	r3, [pc, #84]	@ (8000a8c <updateCharValue+0x9c>)
 8000a38:	725a      	strb	r2, [r3, #9]

	 uint8_t* commandComplete;
	 commandComplete=(uint8_t*)malloc(10+size);
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	330a      	adds	r3, #10
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f003 f89c 	bl	8003b7c <malloc>
 8000a44:	4603      	mov	r3, r0
 8000a46:	617b      	str	r3, [r7, #20]
	 memcpy(commandComplete,UPDATE_CHAR,10);
 8000a48:	220a      	movs	r2, #10
 8000a4a:	4910      	ldr	r1, [pc, #64]	@ (8000a8c <updateCharValue+0x9c>)
 8000a4c:	6978      	ldr	r0, [r7, #20]
 8000a4e:	f003 fc0a 	bl	8004266 <memcpy>
	 memcpy(commandComplete+10,data,size);
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	330a      	adds	r3, #10
 8000a56:	683a      	ldr	r2, [r7, #0]
 8000a58:	6a39      	ldr	r1, [r7, #32]
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f003 fc03 	bl	8004266 <memcpy>

	 BLE_command(commandComplete,10+size,ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),0);
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	f103 010a 	add.w	r1, r3, #10
 8000a66:	2300      	movs	r3, #0
 8000a68:	9300      	str	r3, [sp, #0]
 8000a6a:	2307      	movs	r3, #7
 8000a6c:	4a08      	ldr	r2, [pc, #32]	@ (8000a90 <updateCharValue+0xa0>)
 8000a6e:	6978      	ldr	r0, [r7, #20]
 8000a70:	f7ff fef8 	bl	8000864 <BLE_command>

	 free(commandComplete);
 8000a74:	6978      	ldr	r0, [r7, #20]
 8000a76:	f003 f889 	bl	8003b8c <free>
	 free(rxEvent);
 8000a7a:	4b06      	ldr	r3, [pc, #24]	@ (8000a94 <updateCharValue+0xa4>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f003 f884 	bl	8003b8c <free>
 }
 8000a84:	bf00      	nop
 8000a86:	3718      	adds	r7, #24
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	200000e4 	.word	0x200000e4
 8000a90:	200000dc 	.word	0x200000dc
 8000a94:	200002f8 	.word	0x200002f8

08000a98 <disconnectBLE>:

 /**
  * @brief Disconnects the peripheral from the central
 */
 void disconnectBLE(){
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b086      	sub	sp, #24
 8000a9c:	af02      	add	r7, sp, #8
	 if (connectionHandler[0] == -1 && connectionHandler[1] == -1){
 8000a9e:	4b24      	ldr	r3, [pc, #144]	@ (8000b30 <disconnectBLE+0x98>)
 8000aa0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aa8:	d105      	bne.n	8000ab6 <disconnectBLE+0x1e>
 8000aaa:	4b21      	ldr	r3, [pc, #132]	@ (8000b30 <disconnectBLE+0x98>)
 8000aac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ab4:	d037      	beq.n	8000b26 <disconnectBLE+0x8e>
		// should not be -1
		return;
	 }
	 uint8_t command[7];
	 memcpy(command, DISCONNECT, 4);
 8000ab6:	4b1f      	ldr	r3, [pc, #124]	@ (8000b34 <disconnectBLE+0x9c>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	607b      	str	r3, [r7, #4]
	 command[4] = connectionHandler[0];
 8000abc:	4b1c      	ldr	r3, [pc, #112]	@ (8000b30 <disconnectBLE+0x98>)
 8000abe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	723b      	strb	r3, [r7, #8]
	 command[5] = connectionHandler[1];
 8000ac6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b30 <disconnectBLE+0x98>)
 8000ac8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	727b      	strb	r3, [r7, #9]
	 command[6] = 0x13;
 8000ad0:	2313      	movs	r3, #19
 8000ad2:	72bb      	strb	r3, [r7, #10]
	 if(BLE_command(command,sizeof(command),EVENT_DISCONNECT_PENDING,7,0)==BLE_OK){
 8000ad4:	1d38      	adds	r0, r7, #4
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	9300      	str	r3, [sp, #0]
 8000ada:	2307      	movs	r3, #7
 8000adc:	4a16      	ldr	r2, [pc, #88]	@ (8000b38 <disconnectBLE+0xa0>)
 8000ade:	2107      	movs	r1, #7
 8000ae0:	f7ff fec0 	bl	8000864 <BLE_command>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d11e      	bne.n	8000b28 <disconnectBLE+0x90>
		 int result=fetchBleEvent(buffer,127);
 8000aea:	217f      	movs	r1, #127	@ 0x7f
 8000aec:	4813      	ldr	r0, [pc, #76]	@ (8000b3c <disconnectBLE+0xa4>)
 8000aee:	f7ff fcf9 	bl	80004e4 <fetchBleEvent>
 8000af2:	60f8      	str	r0, [r7, #12]
		 if(result==BLE_OK){
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d10f      	bne.n	8000b1a <disconnectBLE+0x82>
			  if(checkEventResp(buffer,EVENT_DISCONNECTED,4)==BLE_OK){
 8000afa:	2204      	movs	r2, #4
 8000afc:	4910      	ldr	r1, [pc, #64]	@ (8000b40 <disconnectBLE+0xa8>)
 8000afe:	480f      	ldr	r0, [pc, #60]	@ (8000b3c <disconnectBLE+0xa4>)
 8000b00:	f7ff fd7a 	bl	80005f8 <checkEventResp>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d107      	bne.n	8000b1a <disconnectBLE+0x82>
				  //setConnectable();
				  connectionHandler[0] = -1;
 8000b0a:	4b09      	ldr	r3, [pc, #36]	@ (8000b30 <disconnectBLE+0x98>)
 8000b0c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b10:	801a      	strh	r2, [r3, #0]
				  connectionHandler[1] = -1;
 8000b12:	4b07      	ldr	r3, [pc, #28]	@ (8000b30 <disconnectBLE+0x98>)
 8000b14:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b18:	805a      	strh	r2, [r3, #2]
			  }
		 }
	 free(rxEvent);
 8000b1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b44 <disconnectBLE+0xac>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f003 f834 	bl	8003b8c <free>
 8000b24:	e000      	b.n	8000b28 <disconnectBLE+0x90>
		return;
 8000b26:	bf00      	nop
	 }
 }
 8000b28:	3710      	adds	r7, #16
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20000158 	.word	0x20000158
 8000b34:	200000f4 	.word	0x200000f4
 8000b38:	200000fc 	.word	0x200000fc
 8000b3c:	200001ec 	.word	0x200001ec
 8000b40:	200000f8 	.word	0x200000f8
 8000b44:	200002f8 	.word	0x200002f8

08000b48 <setDiscoverability>:
 /**
  * DO NOT CHANGE FUNCTION definition
  * @brief Sets the discoverability of the peripheral
  * @param mode 0 => Non Discoverable, 1 => Discoverable
  * */
 void setDiscoverability(uint8_t mode){
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af02      	add	r7, sp, #8
 8000b4e:	4603      	mov	r3, r0
 8000b50:	71fb      	strb	r3, [r7, #7]
	 if (mode == 1){
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d102      	bne.n	8000b5e <setDiscoverability+0x16>
		 setConnectable();
 8000b58:	f7ff fe04 	bl	8000764 <setConnectable>
		 free(rxEvent);
	 }
	 else{
		 // Do nothing
	 }
 }
 8000b5c:	e00f      	b.n	8000b7e <setDiscoverability+0x36>
	 else if (mode == 0){
 8000b5e:	79fb      	ldrb	r3, [r7, #7]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d10c      	bne.n	8000b7e <setDiscoverability+0x36>
		 if(BLE_command(ACI_GAP_SET_NON_DISCOVERABLE,sizeof(ACI_GAP_SET_NON_DISCOVERABLE),ACI_GAP_SET_NON_DISCOVERABLE_COMPLETE,sizeof(ACI_GAP_SET_NON_DISCOVERABLE_COMPLETE),0)==BLE_OK){
 8000b64:	2300      	movs	r3, #0
 8000b66:	9300      	str	r3, [sp, #0]
 8000b68:	2307      	movs	r3, #7
 8000b6a:	4a07      	ldr	r2, [pc, #28]	@ (8000b88 <setDiscoverability+0x40>)
 8000b6c:	2104      	movs	r1, #4
 8000b6e:	4807      	ldr	r0, [pc, #28]	@ (8000b8c <setDiscoverability+0x44>)
 8000b70:	f7ff fe78 	bl	8000864 <BLE_command>
		 free(rxEvent);
 8000b74:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <setDiscoverability+0x48>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f003 f807 	bl	8003b8c <free>
 }
 8000b7e:	bf00      	nop
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20000118 	.word	0x20000118
 8000b8c:	20000114 	.word	0x20000114
 8000b90:	200002f8 	.word	0x200002f8

08000b94 <i2c_init>:
 *      Author: tannerberman
 */

#include "i2c.h"

void i2c_init() {
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
	//I2C peripheral clock enabled in clock controller (4MHz)
	RCC->APB1ENR1 |= RCC_APB1ENR1_I2C2EN;
 8000b98:	4b4c      	ldr	r3, [pc, #304]	@ (8000ccc <i2c_init+0x138>)
 8000b9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b9c:	4a4b      	ldr	r2, [pc, #300]	@ (8000ccc <i2c_init+0x138>)
 8000b9e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ba2:	6593      	str	r3, [r2, #88]	@ 0x58

	//Now, we must configure the I2C peripheral itself before enabling it

	//1. STM32’s default pin mode is GPIO, but I2C needs to use Alternate Function Mode.
	//So we must Configure GPIO Pins (PB10 & PB11) for I2C
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN; // Enable GPIOB peripheral clock
 8000ba4:	4b49      	ldr	r3, [pc, #292]	@ (8000ccc <i2c_init+0x138>)
 8000ba6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ba8:	4a48      	ldr	r2, [pc, #288]	@ (8000ccc <i2c_init+0x138>)
 8000baa:	f043 0302 	orr.w	r3, r3, #2
 8000bae:	64d3      	str	r3, [r2, #76]	@ 0x4c

	//Now we must put our pins in alternate function mode
	GPIOB->MODER &= ~GPIO_MODER_MODE10_Msk; //Clear mode state of GPIOB pin 10
 8000bb0:	4b47      	ldr	r3, [pc, #284]	@ (8000cd0 <i2c_init+0x13c>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a46      	ldr	r2, [pc, #280]	@ (8000cd0 <i2c_init+0x13c>)
 8000bb6:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8000bba:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~GPIO_MODER_MODE11_Msk; //Clear mode state of GPIOB pin 11
 8000bbc:	4b44      	ldr	r3, [pc, #272]	@ (8000cd0 <i2c_init+0x13c>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a43      	ldr	r2, [pc, #268]	@ (8000cd0 <i2c_init+0x13c>)
 8000bc2:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000bc6:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= GPIO_MODER_MODE10_1; 	//Set 2nd bit position to 1 for pin 10 (which sets it to alternate function (which is 0b10))
 8000bc8:	4b41      	ldr	r3, [pc, #260]	@ (8000cd0 <i2c_init+0x13c>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a40      	ldr	r2, [pc, #256]	@ (8000cd0 <i2c_init+0x13c>)
 8000bce:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000bd2:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= GPIO_MODER_MODE11_1; 	//same as above but for pin 11
 8000bd4:	4b3e      	ldr	r3, [pc, #248]	@ (8000cd0 <i2c_init+0x13c>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a3d      	ldr	r2, [pc, #244]	@ (8000cd0 <i2c_init+0x13c>)
 8000bda:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000bde:	6013      	str	r3, [r2, #0]

	//Now we must actually set our pins to alternate function mode AF4 (I2C2's), bits need to be 0100 for this
	GPIOB->AFR[1] &= ~GPIO_AFRH_AFSEL10_Msk; 	// Clear Alternate function State for pin 10
 8000be0:	4b3b      	ldr	r3, [pc, #236]	@ (8000cd0 <i2c_init+0x13c>)
 8000be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000be4:	4a3a      	ldr	r2, [pc, #232]	@ (8000cd0 <i2c_init+0x13c>)
 8000be6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000bea:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] &= ~GPIO_AFRH_AFSEL11_Msk; 	// Clear Alternate Function state for pin 10
 8000bec:	4b38      	ldr	r3, [pc, #224]	@ (8000cd0 <i2c_init+0x13c>)
 8000bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bf0:	4a37      	ldr	r2, [pc, #220]	@ (8000cd0 <i2c_init+0x13c>)
 8000bf2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8000bf6:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |= GPIO_AFRH_AFSEL10_2; 		//Setting AFSEL area to 0b0100, for alternate function mode 4 (AF4)
 8000bf8:	4b35      	ldr	r3, [pc, #212]	@ (8000cd0 <i2c_init+0x13c>)
 8000bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bfc:	4a34      	ldr	r2, [pc, #208]	@ (8000cd0 <i2c_init+0x13c>)
 8000bfe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c02:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |= GPIO_AFRH_AFSEL11_2; 		//same as above but for pin 11
 8000c04:	4b32      	ldr	r3, [pc, #200]	@ (8000cd0 <i2c_init+0x13c>)
 8000c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c08:	4a31      	ldr	r2, [pc, #196]	@ (8000cd0 <i2c_init+0x13c>)
 8000c0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c0e:	6253      	str	r3, [r2, #36]	@ 0x24

	//Must make our output type Open-Drain, (good for multiple devices)
	GPIOB->OTYPER |= GPIO_OTYPER_OT10;
 8000c10:	4b2f      	ldr	r3, [pc, #188]	@ (8000cd0 <i2c_init+0x13c>)
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	4a2e      	ldr	r2, [pc, #184]	@ (8000cd0 <i2c_init+0x13c>)
 8000c16:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c1a:	6053      	str	r3, [r2, #4]
	GPIOB->OTYPER |= GPIO_OTYPER_OT11;
 8000c1c:	4b2c      	ldr	r3, [pc, #176]	@ (8000cd0 <i2c_init+0x13c>)
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	4a2b      	ldr	r2, [pc, #172]	@ (8000cd0 <i2c_init+0x13c>)
 8000c22:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000c26:	6053      	str	r3, [r2, #4]
	// to manually enable internal pull-ups in software

	//GPIO setup is complete, now we must configure the I2C2 peripheral itself

	// "Clear PE bit in I2C_CR1"
	I2C2->CR1 &= ~I2C_CR1_PE;
 8000c28:	4b2a      	ldr	r3, [pc, #168]	@ (8000cd4 <i2c_init+0x140>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a29      	ldr	r2, [pc, #164]	@ (8000cd4 <i2c_init+0x140>)
 8000c2e:	f023 0301 	bic.w	r3, r3, #1
 8000c32:	6013      	str	r3, [r2, #0]
	//
	// Therefore, the actual SCL period is:
	//   133 ticks * 250 ns/tick = 33.25 µs,
	// which gives an SCL frequency of around 30.08 kHz.

	I2C2->TIMINGR &= ~I2C_TIMINGR_PRESC_Msk;
 8000c34:	4b27      	ldr	r3, [pc, #156]	@ (8000cd4 <i2c_init+0x140>)
 8000c36:	691b      	ldr	r3, [r3, #16]
 8000c38:	4a26      	ldr	r2, [pc, #152]	@ (8000cd4 <i2c_init+0x140>)
 8000c3a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8000c3e:	6113      	str	r3, [r2, #16]
	I2C2->TIMINGR |= (0 << I2C_TIMINGR_PRESC_Pos);       // PRESC = 0 (no division), so each tick = 250 ns
 8000c40:	4b24      	ldr	r3, [pc, #144]	@ (8000cd4 <i2c_init+0x140>)
 8000c42:	4a24      	ldr	r2, [pc, #144]	@ (8000cd4 <i2c_init+0x140>)
 8000c44:	691b      	ldr	r3, [r3, #16]
 8000c46:	6113      	str	r3, [r2, #16]

	I2C2->TIMINGR &= ~I2C_TIMINGR_SCLL_Msk;
 8000c48:	4b22      	ldr	r3, [pc, #136]	@ (8000cd4 <i2c_init+0x140>)
 8000c4a:	691b      	ldr	r3, [r3, #16]
 8000c4c:	4a21      	ldr	r2, [pc, #132]	@ (8000cd4 <i2c_init+0x140>)
 8000c4e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000c52:	6113      	str	r3, [r2, #16]
	I2C2->TIMINGR |= (0x41 << I2C_TIMINGR_SCLL_Pos);      // SCLL = 65 (0x41)
 8000c54:	4b1f      	ldr	r3, [pc, #124]	@ (8000cd4 <i2c_init+0x140>)
 8000c56:	691b      	ldr	r3, [r3, #16]
 8000c58:	4a1e      	ldr	r2, [pc, #120]	@ (8000cd4 <i2c_init+0x140>)
 8000c5a:	f043 0341 	orr.w	r3, r3, #65	@ 0x41
 8000c5e:	6113      	str	r3, [r2, #16]

	I2C2->TIMINGR &= ~I2C_TIMINGR_SCLH_Msk;
 8000c60:	4b1c      	ldr	r3, [pc, #112]	@ (8000cd4 <i2c_init+0x140>)
 8000c62:	691b      	ldr	r3, [r3, #16]
 8000c64:	4a1b      	ldr	r2, [pc, #108]	@ (8000cd4 <i2c_init+0x140>)
 8000c66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8000c6a:	6113      	str	r3, [r2, #16]
	I2C2->TIMINGR |= (0x42 << I2C_TIMINGR_SCLH_Pos);      // SCLH = 66 (0x42)
 8000c6c:	4b19      	ldr	r3, [pc, #100]	@ (8000cd4 <i2c_init+0x140>)
 8000c6e:	691b      	ldr	r3, [r3, #16]
 8000c70:	4a18      	ldr	r2, [pc, #96]	@ (8000cd4 <i2c_init+0x140>)
 8000c72:	f443 4384 	orr.w	r3, r3, #16896	@ 0x4200
 8000c76:	6113      	str	r3, [r2, #16]

	I2C2->TIMINGR &= ~I2C_TIMINGR_SDADEL_Msk;
 8000c78:	4b16      	ldr	r3, [pc, #88]	@ (8000cd4 <i2c_init+0x140>)
 8000c7a:	691b      	ldr	r3, [r3, #16]
 8000c7c:	4a15      	ldr	r2, [pc, #84]	@ (8000cd4 <i2c_init+0x140>)
 8000c7e:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8000c82:	6113      	str	r3, [r2, #16]
	I2C2->TIMINGR |= (0x2 << I2C_TIMINGR_SDADEL_Pos);      // SDADEL = 2 (2 ticks = 500 ns delay)
 8000c84:	4b13      	ldr	r3, [pc, #76]	@ (8000cd4 <i2c_init+0x140>)
 8000c86:	691b      	ldr	r3, [r3, #16]
 8000c88:	4a12      	ldr	r2, [pc, #72]	@ (8000cd4 <i2c_init+0x140>)
 8000c8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c8e:	6113      	str	r3, [r2, #16]

	I2C2->TIMINGR &= ~I2C_TIMINGR_SCLDEL_Msk;
 8000c90:	4b10      	ldr	r3, [pc, #64]	@ (8000cd4 <i2c_init+0x140>)
 8000c92:	691b      	ldr	r3, [r3, #16]
 8000c94:	4a0f      	ldr	r2, [pc, #60]	@ (8000cd4 <i2c_init+0x140>)
 8000c96:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8000c9a:	6113      	str	r3, [r2, #16]
	I2C2->TIMINGR |= (0x4 << I2C_TIMINGR_SCLDEL_Pos);      // SCLDEL = 4 (4 ticks = 1 µs delay)
 8000c9c:	4b0d      	ldr	r3, [pc, #52]	@ (8000cd4 <i2c_init+0x140>)
 8000c9e:	691b      	ldr	r3, [r3, #16]
 8000ca0:	4a0c      	ldr	r2, [pc, #48]	@ (8000cd4 <i2c_init+0x140>)
 8000ca2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ca6:	6113      	str	r3, [r2, #16]

	//Finally, Enable I2C2 (check if off first)
	if ((I2C2->CR1 & I2C_CR1_PE) == 0) {
 8000ca8:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd4 <i2c_init+0x140>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f003 0301 	and.w	r3, r3, #1
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d105      	bne.n	8000cc0 <i2c_init+0x12c>
		I2C2->CR1 |= I2C_CR1_PE;
 8000cb4:	4b07      	ldr	r3, [pc, #28]	@ (8000cd4 <i2c_init+0x140>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a06      	ldr	r2, [pc, #24]	@ (8000cd4 <i2c_init+0x140>)
 8000cba:	f043 0301 	orr.w	r3, r3, #1
 8000cbe:	6013      	str	r3, [r2, #0]
	}
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	40021000 	.word	0x40021000
 8000cd0:	48000400 	.word	0x48000400
 8000cd4:	40005800 	.word	0x40005800

08000cd8 <i2c_transaction>:

uint8_t i2c_transaction(uint8_t address, uint8_t dir, uint8_t* data, uint8_t len) {
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	603a      	str	r2, [r7, #0]
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	71fb      	strb	r3, [r7, #7]
 8000ce6:	460b      	mov	r3, r1
 8000ce8:	71bb      	strb	r3, [r7, #6]
 8000cea:	4613      	mov	r3, r2
 8000cec:	717b      	strb	r3, [r7, #5]

    // Clear all previous settings in CR2 (for clean transactions)
    I2C2->CR2 &= ~(I2C_CR2_SADD_Msk | I2C_CR2_NBYTES_Msk | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP);
 8000cee:	4b57      	ldr	r3, [pc, #348]	@ (8000e4c <i2c_transaction+0x174>)
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	4a56      	ldr	r2, [pc, #344]	@ (8000e4c <i2c_transaction+0x174>)
 8000cf4:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 8000cf8:	f423 43ce 	bic.w	r3, r3, #26368	@ 0x6700
 8000cfc:	6053      	str	r3, [r2, #4]

    // Set the 7-bit slave address (properly shifted and masked)
    I2C2->CR2 |= ((address << 1) & I2C_CR2_SADD_Msk);
 8000cfe:	4b53      	ldr	r3, [pc, #332]	@ (8000e4c <i2c_transaction+0x174>)
 8000d00:	685a      	ldr	r2, [r3, #4]
 8000d02:	79fb      	ldrb	r3, [r7, #7]
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000d0a:	4950      	ldr	r1, [pc, #320]	@ (8000e4c <i2c_transaction+0x174>)
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	604b      	str	r3, [r1, #4]

    // Set the number of bytes to transfer
    I2C2->CR2 |= (len << I2C_CR2_NBYTES_Pos);
 8000d10:	4b4e      	ldr	r3, [pc, #312]	@ (8000e4c <i2c_transaction+0x174>)
 8000d12:	685a      	ldr	r2, [r3, #4]
 8000d14:	797b      	ldrb	r3, [r7, #5]
 8000d16:	041b      	lsls	r3, r3, #16
 8000d18:	494c      	ldr	r1, [pc, #304]	@ (8000e4c <i2c_transaction+0x174>)
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	604b      	str	r3, [r1, #4]

    // Set direction (write = 0, read = 1)
    if (dir == 1) {
 8000d1e:	79bb      	ldrb	r3, [r7, #6]
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d106      	bne.n	8000d32 <i2c_transaction+0x5a>
        I2C2->CR2 |= I2C_CR2_RD_WRN;
 8000d24:	4b49      	ldr	r3, [pc, #292]	@ (8000e4c <i2c_transaction+0x174>)
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	4a48      	ldr	r2, [pc, #288]	@ (8000e4c <i2c_transaction+0x174>)
 8000d2a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d2e:	6053      	str	r3, [r2, #4]
 8000d30:	e005      	b.n	8000d3e <i2c_transaction+0x66>
    } else {
        I2C2->CR2 &= ~I2C_CR2_RD_WRN;
 8000d32:	4b46      	ldr	r3, [pc, #280]	@ (8000e4c <i2c_transaction+0x174>)
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	4a45      	ldr	r2, [pc, #276]	@ (8000e4c <i2c_transaction+0x174>)
 8000d38:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000d3c:	6053      	str	r3, [r2, #4]
    }

    // Generate START condition
    I2C2->CR2 |= I2C_CR2_START;
 8000d3e:	4b43      	ldr	r3, [pc, #268]	@ (8000e4c <i2c_transaction+0x174>)
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	4a42      	ldr	r2, [pc, #264]	@ (8000e4c <i2c_transaction+0x174>)
 8000d44:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000d48:	6053      	str	r3, [r2, #4]

    // Write Operation (Sending Data)
    if (dir == 0) {
 8000d4a:	79bb      	ldrb	r3, [r7, #6]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d13f      	bne.n	8000dd0 <i2c_transaction+0xf8>

    	// Loop over how ever many bytes we want to write
        for (uint8_t i = 0; i < len; i++) {
 8000d50:	2300      	movs	r3, #0
 8000d52:	73fb      	strb	r3, [r7, #15]
 8000d54:	e01c      	b.n	8000d90 <i2c_transaction+0xb8>

        	// Wait until the transmit data register (TXDR) is empty and ready for the next byte
            while (!(I2C2->ISR & I2C_ISR_TXIS)) {
                // Check for the NACKF, when the peripheral didn't acknowledge
            	if (I2C2->ISR & I2C_ISR_NACKF) {
 8000d56:	4b3d      	ldr	r3, [pc, #244]	@ (8000e4c <i2c_transaction+0x174>)
 8000d58:	699b      	ldr	r3, [r3, #24]
 8000d5a:	f003 0310 	and.w	r3, r3, #16
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d007      	beq.n	8000d72 <i2c_transaction+0x9a>
            		// Clear the NACKF flag
            		I2C2->ICR |= I2C_ICR_NACKCF;
 8000d62:	4b3a      	ldr	r3, [pc, #232]	@ (8000e4c <i2c_transaction+0x174>)
 8000d64:	69db      	ldr	r3, [r3, #28]
 8000d66:	4a39      	ldr	r2, [pc, #228]	@ (8000e4c <i2c_transaction+0x174>)
 8000d68:	f043 0310 	orr.w	r3, r3, #16
 8000d6c:	61d3      	str	r3, [r2, #28]
            		return 1; // Return 1, indicating that it was not a successful operation
 8000d6e:	2301      	movs	r3, #1
 8000d70:	e066      	b.n	8000e40 <i2c_transaction+0x168>
            while (!(I2C2->ISR & I2C_ISR_TXIS)) {
 8000d72:	4b36      	ldr	r3, [pc, #216]	@ (8000e4c <i2c_transaction+0x174>)
 8000d74:	699b      	ldr	r3, [r3, #24]
 8000d76:	f003 0302 	and.w	r3, r3, #2
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d0eb      	beq.n	8000d56 <i2c_transaction+0x7e>
            	}
            }

            // Send the data byte
            I2C2->TXDR = data[i];
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
 8000d80:	683a      	ldr	r2, [r7, #0]
 8000d82:	4413      	add	r3, r2
 8000d84:	781a      	ldrb	r2, [r3, #0]
 8000d86:	4b31      	ldr	r3, [pc, #196]	@ (8000e4c <i2c_transaction+0x174>)
 8000d88:	629a      	str	r2, [r3, #40]	@ 0x28
        for (uint8_t i = 0; i < len; i++) {
 8000d8a:	7bfb      	ldrb	r3, [r7, #15]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	73fb      	strb	r3, [r7, #15]
 8000d90:	7bfa      	ldrb	r2, [r7, #15]
 8000d92:	797b      	ldrb	r3, [r7, #5]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	d3ec      	bcc.n	8000d72 <i2c_transaction+0x9a>

        }

        // Wait until the Transfer Complete (TC) flag is set
        while (!(I2C2->ISR & I2C_ISR_TC));
 8000d98:	bf00      	nop
 8000d9a:	4b2c      	ldr	r3, [pc, #176]	@ (8000e4c <i2c_transaction+0x174>)
 8000d9c:	699b      	ldr	r3, [r3, #24]
 8000d9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d0f9      	beq.n	8000d9a <i2c_transaction+0xc2>

        // Generate STOP condition
        I2C2->CR2 |= I2C_CR2_STOP;
 8000da6:	4b29      	ldr	r3, [pc, #164]	@ (8000e4c <i2c_transaction+0x174>)
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	4a28      	ldr	r2, [pc, #160]	@ (8000e4c <i2c_transaction+0x174>)
 8000dac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000db0:	6053      	str	r3, [r2, #4]

        // Clearing the flag
        while (!(I2C2->ISR & I2C_ISR_STOPF));
 8000db2:	bf00      	nop
 8000db4:	4b25      	ldr	r3, [pc, #148]	@ (8000e4c <i2c_transaction+0x174>)
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	f003 0320 	and.w	r3, r3, #32
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d0f9      	beq.n	8000db4 <i2c_transaction+0xdc>
        I2C2->ICR |= I2C_ICR_STOPCF;
 8000dc0:	4b22      	ldr	r3, [pc, #136]	@ (8000e4c <i2c_transaction+0x174>)
 8000dc2:	69db      	ldr	r3, [r3, #28]
 8000dc4:	4a21      	ldr	r2, [pc, #132]	@ (8000e4c <i2c_transaction+0x174>)
 8000dc6:	f043 0320 	orr.w	r3, r3, #32
 8000dca:	61d3      	str	r3, [r2, #28]

        return 0;	// Return 0 indicating it was a successful operation
 8000dcc:	2300      	movs	r3, #0
 8000dce:	e037      	b.n	8000e40 <i2c_transaction+0x168>
    }

    // Read Operation (Receiving Data)
    if (dir == 1) {
 8000dd0:	79bb      	ldrb	r3, [r7, #6]
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d133      	bne.n	8000e3e <i2c_transaction+0x166>

    	// Loop over how ever many bytes we want to read
        for (uint8_t i = 0; i < len; i++) {
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	73bb      	strb	r3, [r7, #14]
 8000dda:	e010      	b.n	8000dfe <i2c_transaction+0x126>

            // Wait until RX buffer has data
            while (!(I2C2->ISR & I2C_ISR_RXNE));
 8000ddc:	bf00      	nop
 8000dde:	4b1b      	ldr	r3, [pc, #108]	@ (8000e4c <i2c_transaction+0x174>)
 8000de0:	699b      	ldr	r3, [r3, #24]
 8000de2:	f003 0304 	and.w	r3, r3, #4
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d0f9      	beq.n	8000dde <i2c_transaction+0x106>

            // Read received data
            data[i] = I2C2->RXDR;
 8000dea:	4b18      	ldr	r3, [pc, #96]	@ (8000e4c <i2c_transaction+0x174>)
 8000dec:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000dee:	7bbb      	ldrb	r3, [r7, #14]
 8000df0:	683a      	ldr	r2, [r7, #0]
 8000df2:	4413      	add	r3, r2
 8000df4:	b2ca      	uxtb	r2, r1
 8000df6:	701a      	strb	r2, [r3, #0]
        for (uint8_t i = 0; i < len; i++) {
 8000df8:	7bbb      	ldrb	r3, [r7, #14]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	73bb      	strb	r3, [r7, #14]
 8000dfe:	7bba      	ldrb	r2, [r7, #14]
 8000e00:	797b      	ldrb	r3, [r7, #5]
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d3ea      	bcc.n	8000ddc <i2c_transaction+0x104>
        }

        // Wait until the Transfer Complete (TC) flag is set
        while (!(I2C2->ISR & I2C_ISR_TC));
 8000e06:	bf00      	nop
 8000e08:	4b10      	ldr	r3, [pc, #64]	@ (8000e4c <i2c_transaction+0x174>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d0f9      	beq.n	8000e08 <i2c_transaction+0x130>

        // Generate STOP condition
        I2C2->CR2 |= I2C_CR2_STOP;
 8000e14:	4b0d      	ldr	r3, [pc, #52]	@ (8000e4c <i2c_transaction+0x174>)
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	4a0c      	ldr	r2, [pc, #48]	@ (8000e4c <i2c_transaction+0x174>)
 8000e1a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e1e:	6053      	str	r3, [r2, #4]

        // Clearing the flag
        while (!(I2C2->ISR & I2C_ISR_STOPF));
 8000e20:	bf00      	nop
 8000e22:	4b0a      	ldr	r3, [pc, #40]	@ (8000e4c <i2c_transaction+0x174>)
 8000e24:	699b      	ldr	r3, [r3, #24]
 8000e26:	f003 0320 	and.w	r3, r3, #32
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d0f9      	beq.n	8000e22 <i2c_transaction+0x14a>
        I2C2->ICR |= I2C_ICR_STOPCF;
 8000e2e:	4b07      	ldr	r3, [pc, #28]	@ (8000e4c <i2c_transaction+0x174>)
 8000e30:	69db      	ldr	r3, [r3, #28]
 8000e32:	4a06      	ldr	r2, [pc, #24]	@ (8000e4c <i2c_transaction+0x174>)
 8000e34:	f043 0320 	orr.w	r3, r3, #32
 8000e38:	61d3      	str	r3, [r2, #28]

        return 0; 	// Return 0 indicating it was a successful operation
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	e000      	b.n	8000e40 <i2c_transaction+0x168>
    }

    return 1; 		// Should never reach here, or when dir is not 0 or 1
 8000e3e:	2301      	movs	r3, #1
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3714      	adds	r7, #20
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	40005800 	.word	0x40005800

08000e50 <lsm6dsl_init>:
#define OUTY_L 0x2A		   // Y-axis low byte
#define OUTY_H 0x2B		   // Y-axis high byte
#define OUTZ_L 0x2C		   // Z-axis low byte
#define OUTZ_H 0x2D		   // Z-axis high byte

void lsm6dsl_init() {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0

	// An array to hold the data we want to write to, peripheral address, register address,
    uint8_t data[2];

    // Step 1: Enable accelerometer, 416Hz, ±2g range
    data[0] = CTRL1_XL;
 8000e56:	2310      	movs	r3, #16
 8000e58:	713b      	strb	r3, [r7, #4]
    data[1] = 0x60;  			// 16Hz ODR, high-performance mode
 8000e5a:	2360      	movs	r3, #96	@ 0x60
 8000e5c:	717b      	strb	r3, [r7, #5]
    if (i2c_transaction(LSM6DSL_ADDR, 0, data, 2)) {
 8000e5e:	1d3a      	adds	r2, r7, #4
 8000e60:	2302      	movs	r3, #2
 8000e62:	2100      	movs	r1, #0
 8000e64:	206a      	movs	r0, #106	@ 0x6a
 8000e66:	f7ff ff37 	bl	8000cd8 <i2c_transaction>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d002      	beq.n	8000e76 <lsm6dsl_init+0x26>
        printf("Error: Failed to configure CTRL1_XL\n");
 8000e70:	480b      	ldr	r0, [pc, #44]	@ (8000ea0 <lsm6dsl_init+0x50>)
 8000e72:	f003 f859 	bl	8003f28 <puts>
    }

    // Step 2: Enable accelerometer data-ready interrupt on INT1
    data[0] = INT1_CTRL;
 8000e76:	230d      	movs	r3, #13
 8000e78:	713b      	strb	r3, [r7, #4]
    data[1] = 0x01;  			// Enable INT1_DRDY_XL
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	717b      	strb	r3, [r7, #5]
    if (i2c_transaction(LSM6DSL_ADDR, 0, data, 2)) {
 8000e7e:	1d3a      	adds	r2, r7, #4
 8000e80:	2302      	movs	r3, #2
 8000e82:	2100      	movs	r1, #0
 8000e84:	206a      	movs	r0, #106	@ 0x6a
 8000e86:	f7ff ff27 	bl	8000cd8 <i2c_transaction>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d002      	beq.n	8000e96 <lsm6dsl_init+0x46>
        printf("Error: Failed to configure INT1_CTRL\n");
 8000e90:	4804      	ldr	r0, [pc, #16]	@ (8000ea4 <lsm6dsl_init+0x54>)
 8000e92:	f003 f849 	bl	8003f28 <puts>
    }
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	08004c0c 	.word	0x08004c0c
 8000ea4:	08004c30 	.word	0x08004c30

08000ea8 <lsm6dsl_read_xyz>:


void lsm6dsl_read_xyz(int16_t* x, int16_t* y, int16_t* z) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]

	// Slave register address, we want to start at OUTX_L
	uint8_t reg = OUTX_L;
 8000eb4:	2328      	movs	r3, #40	@ 0x28
 8000eb6:	75fb      	strb	r3, [r7, #23]
	// Since all the register we need to access are adjacent to each other, we can just read 6 bytes of data starting from OUTX_L
	// An array to hold all the x y z data -> OUTX_L, OUTX_H, OUTY_L, OUTY_H, OUTZ_L, OUTZ_H
    uint8_t data[6];

    // Write register address, then read 6 bytes in one transaction,
    if (i2c_transaction(LSM6DSL_ADDR, 0, &reg, 1)) {
 8000eb8:	f107 0217 	add.w	r2, r7, #23
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	206a      	movs	r0, #106	@ 0x6a
 8000ec2:	f7ff ff09 	bl	8000cd8 <i2c_transaction>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d003      	beq.n	8000ed4 <lsm6dsl_read_xyz+0x2c>
        printf("Error: Failed to set register address for reading\n");
 8000ecc:	4817      	ldr	r0, [pc, #92]	@ (8000f2c <lsm6dsl_read_xyz+0x84>)
 8000ece:	f003 f82b 	bl	8003f28 <puts>
        return;
 8000ed2:	e028      	b.n	8000f26 <lsm6dsl_read_xyz+0x7e>
    }
    if (i2c_transaction(LSM6DSL_ADDR, 1, data, 6)) {
 8000ed4:	f107 0210 	add.w	r2, r7, #16
 8000ed8:	2306      	movs	r3, #6
 8000eda:	2101      	movs	r1, #1
 8000edc:	206a      	movs	r0, #106	@ 0x6a
 8000ede:	f7ff fefb 	bl	8000cd8 <i2c_transaction>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d003      	beq.n	8000ef0 <lsm6dsl_read_xyz+0x48>
        printf("Error: Failed to read accelerometer data\n");
 8000ee8:	4811      	ldr	r0, [pc, #68]	@ (8000f30 <lsm6dsl_read_xyz+0x88>)
 8000eea:	f003 f81d 	bl	8003f28 <puts>
        return;
 8000eee:	e01a      	b.n	8000f26 <lsm6dsl_read_xyz+0x7e>
    }

    // Convert the high and low data into their right position using bit shift
    // X values are in the first 2 elements of data, Y values are in the next 2 and so on
    *x = (int16_t)(data[1] << 8 | data[0]);
 8000ef0:	7c7b      	ldrb	r3, [r7, #17]
 8000ef2:	021b      	lsls	r3, r3, #8
 8000ef4:	b21a      	sxth	r2, r3
 8000ef6:	7c3b      	ldrb	r3, [r7, #16]
 8000ef8:	b21b      	sxth	r3, r3
 8000efa:	4313      	orrs	r3, r2
 8000efc:	b21a      	sxth	r2, r3
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	801a      	strh	r2, [r3, #0]
    *y = (int16_t)(data[3] << 8 | data[2]);
 8000f02:	7cfb      	ldrb	r3, [r7, #19]
 8000f04:	021b      	lsls	r3, r3, #8
 8000f06:	b21a      	sxth	r2, r3
 8000f08:	7cbb      	ldrb	r3, [r7, #18]
 8000f0a:	b21b      	sxth	r3, r3
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	b21a      	sxth	r2, r3
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	801a      	strh	r2, [r3, #0]
    *z = (int16_t)(data[5] << 8 | data[4]);
 8000f14:	7d7b      	ldrb	r3, [r7, #21]
 8000f16:	021b      	lsls	r3, r3, #8
 8000f18:	b21a      	sxth	r2, r3
 8000f1a:	7d3b      	ldrb	r3, [r7, #20]
 8000f1c:	b21b      	sxth	r3, r3
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	b21a      	sxth	r2, r3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	801a      	strh	r2, [r3, #0]
}
 8000f26:	3718      	adds	r7, #24
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	08004c58 	.word	0x08004c58
 8000f30:	08004c8c 	.word	0x08004c8c

08000f34 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f3c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f40:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000f44:	f003 0301 	and.w	r3, r3, #1
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d013      	beq.n	8000f74 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000f4c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f50:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000f54:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d00b      	beq.n	8000f74 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000f5c:	e000      	b.n	8000f60 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000f5e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000f60:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d0f9      	beq.n	8000f5e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000f6a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	b2d2      	uxtb	r2, r2
 8000f72:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000f74:	687b      	ldr	r3, [r7, #4]
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <_write>:
volatile uint32_t time_still = 0;	 	// value for how long device has been still
volatile uint8_t send_message = 0;		// flag to trigger a BLE message every 10 seconds


// Redefine the libc _write() function so you can use printf in your code
int _write(int file, char *ptr, int len) {
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b086      	sub	sp, #24
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	60f8      	str	r0, [r7, #12]
 8000f8a:	60b9      	str	r1, [r7, #8]
 8000f8c:	607a      	str	r2, [r7, #4]
	int i = 0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	617b      	str	r3, [r7, #20]
    for (i = 0; i < len; i++) {
 8000f92:	2300      	movs	r3, #0
 8000f94:	617b      	str	r3, [r7, #20]
 8000f96:	e009      	b.n	8000fac <_write+0x2a>
        ITM_SendChar(*ptr++);
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	1c5a      	adds	r2, r3, #1
 8000f9c:	60ba      	str	r2, [r7, #8]
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff ffc7 	bl	8000f34 <ITM_SendChar>
    for (i = 0; i < len; i++) {
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	617b      	str	r3, [r7, #20]
 8000fac:	697a      	ldr	r2, [r7, #20]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	dbf1      	blt.n	8000f98 <_write+0x16>
    }
    return len;
 8000fb4:	687b      	ldr	r3, [r7, #4]
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3718      	adds	r7, #24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
	...

08000fc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b09e      	sub	sp, #120	@ 0x78
 8000fc4:	af02      	add	r7, sp, #8
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fc6:	f000 fe1a 	bl	8001bfe <HAL_Init>

  /* Configure the system clock */
  //SystemClock_Config();
  SystemClock_FullSpeed_Config();
 8000fca:	f000 fab3 	bl	8001534 <SystemClock_FullSpeed_Config>
  //disable_unused_peripherals_register();

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fce:	f000 fb35 	bl	800163c <MX_GPIO_Init>
  MX_SPI3_Init();
 8000fd2:	f000 faf5 	bl	80015c0 <MX_SPI3_Init>

  //RESET BLE MODULE
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_RESET);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fdc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fe0:	f001 f99a 	bl	8002318 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8000fe4:	200a      	movs	r0, #10
 8000fe6:	f000 fe7f 	bl	8001ce8 <HAL_Delay>
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_SET);
 8000fea:	2201      	movs	r2, #1
 8000fec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ff0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ff4:	f001 f990 	bl	8002318 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8000ff8:	200a      	movs	r0, #10
 8000ffa:	f000 fe75 	bl	8001ce8 <HAL_Delay>

  // Initialize the ble configurations
  ble_init();
 8000ffe:	f7ff f93f 	bl	8000280 <ble_init>

//  privtag_run();				   // Call the privtag_run function to start the "application"
  //Initialize peripherals
  	//PWR->CR1 |= PWR_CR1_LPR;

  	i2c_init();
 8001002:	f7ff fdc7 	bl	8000b94 <i2c_init>
  	lsm6dsl_init();
 8001006:	f7ff ff23 	bl	8000e50 <lsm6dsl_init>

  	FLASH->ACR &= ~0b111;
 800100a:	4b8b      	ldr	r3, [pc, #556]	@ (8001238 <main+0x278>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a8a      	ldr	r2, [pc, #552]	@ (8001238 <main+0x278>)
 8001010:	f023 0307 	bic.w	r3, r3, #7
 8001014:	6013      	str	r3, [r2, #0]
  	FLASH->ACR |= 0b000;
 8001016:	4b88      	ldr	r3, [pc, #544]	@ (8001238 <main+0x278>)
 8001018:	4a87      	ldr	r2, [pc, #540]	@ (8001238 <main+0x278>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	6013      	str	r3, [r2, #0]

  	PWR->CR1 &= ~0b11000000000;
 800101e:	4b87      	ldr	r3, [pc, #540]	@ (800123c <main+0x27c>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a86      	ldr	r2, [pc, #536]	@ (800123c <main+0x27c>)
 8001024:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001028:	6013      	str	r3, [r2, #0]
  	PWR->CR1 |=  0b10000000000;
 800102a:	4b84      	ldr	r3, [pc, #528]	@ (800123c <main+0x27c>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a83      	ldr	r2, [pc, #524]	@ (800123c <main+0x27c>)
 8001030:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001034:	6013      	str	r3, [r2, #0]

  	while ((PWR->SR2 & PWR_SR2_VOSF) != 0)
 8001036:	bf00      	nop
 8001038:	4b80      	ldr	r3, [pc, #512]	@ (800123c <main+0x27c>)
 800103a:	695b      	ldr	r3, [r3, #20]
 800103c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001040:	2b00      	cmp	r3, #0
 8001042:	d1f9      	bne.n	8001038 <main+0x78>
  	{
  	    // Wait???
  	}

  	lptim_init();
 8001044:	f000 fd38 	bl	8001ab8 <lptim_init>
  	set_low_timer_ms();
 8001048:	f000 fda2 	bl	8001b90 <set_low_timer_ms>
  	// x y z variables to hold current accelerations in the x y z acceleration values
  	int16_t x, y, z;

  	//prev_x, prev_y and prev_z variables to hold the previous x y z acceleration values
  	int16_t prev_x = 0, prev_y = 0, prev_z = 0;
 800104c:	2300      	movs	r3, #0
 800104e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8001052:	2300      	movs	r3, #0
 8001054:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8001058:	2300      	movs	r3, #0
 800105a:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a

  	// A flag to determine if the device has moved
  	uint8_t device_moved_flag;

  	// Variable to store the minutes since lost (for project 2)
  	uint8_t minutes_since_lost = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

  	// Variable to store the seconds since lost
  	uint32_t seconds_since_lost = 0;
 8001064:	2300      	movs	r3, #0
 8001066:	663b      	str	r3, [r7, #96]	@ 0x60
  	char seconds_since_lost_str[20];

  	// First disconnect the device, set the discoverability to be false because we are not in lost mode yet, and set the non discoverable flag to be true
  	///SystemClock_FullSpeed_Config();

  	disconnectBLE();
 8001068:	f7ff fd16 	bl	8000a98 <disconnectBLE>
  	setDiscoverability(0);
 800106c:	2000      	movs	r0, #0
 800106e:	f7ff fd6b 	bl	8000b48 <setDiscoverability>
  	uint8_t nonDiscoverable = 1;
 8001072:	2301      	movs	r3, #1
 8001074:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
  	standbyBle();
 8001078:	f7ff fa1a 	bl	80004b0 <standbyBle>

  	disableUselessShit();
 800107c:	f000 f92a 	bl	80012d4 <disableUselessShit>
  	//SystemClock_LowPower_Config();

  	//disable_unused_peripherals_register();

  	// Hard coded name for the device
  	unsigned char device_name[] = "TaneTag";
 8001080:	4a6f      	ldr	r2, [pc, #444]	@ (8001240 <main+0x280>)
 8001082:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001086:	e892 0003 	ldmia.w	r2, {r0, r1}
 800108a:	e883 0003 	stmia.w	r3, {r0, r1}

  	while (1) {

  		if(!nonDiscoverable && HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 800108e:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8001092:	2b00      	cmp	r3, #0
 8001094:	d108      	bne.n	80010a8 <main+0xe8>
 8001096:	2140      	movs	r1, #64	@ 0x40
 8001098:	486a      	ldr	r0, [pc, #424]	@ (8001244 <main+0x284>)
 800109a:	f001 f925 	bl	80022e8 <HAL_GPIO_ReadPin>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <main+0xe8>
  			//SystemClock_FullSpeed_Config();

  			catchBLE();
 80010a4:	f7ff fb1a 	bl	80006dc <catchBLE>

  			//SystemClock_LowPower_Config();
  		}

  		if (timer_flag) { 			       // This triggers every 50 ms
 80010a8:	4b67      	ldr	r3, [pc, #412]	@ (8001248 <main+0x288>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	f000 80b9 	beq.w	8001226 <main+0x266>
  			timer_flag = 0; 			   // Reset the timer flag
 80010b4:	4b64      	ldr	r3, [pc, #400]	@ (8001248 <main+0x288>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	701a      	strb	r2, [r3, #0]
  			lsm6dsl_read_xyz(&x, &y, &z);  // Read acceleration data
 80010ba:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 80010be:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 80010c2:	f107 0346 	add.w	r3, r7, #70	@ 0x46
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff feee 	bl	8000ea8 <lsm6dsl_read_xyz>

  			// Calculate total magnitude of change in movement
  			delta_x = abs(x - prev_x);
 80010cc:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 80010d0:	461a      	mov	r2, r3
 80010d2:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	2b00      	cmp	r3, #0
 80010da:	bfb8      	it	lt
 80010dc:	425b      	neglt	r3, r3
 80010de:	65fb      	str	r3, [r7, #92]	@ 0x5c
  			delta_y = abs(y - prev_y);
 80010e0:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 80010e4:	461a      	mov	r2, r3
 80010e6:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	@ 0x6c
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	bfb8      	it	lt
 80010f0:	425b      	neglt	r3, r3
 80010f2:	65bb      	str	r3, [r7, #88]	@ 0x58
  			delta_z = abs(z - prev_z);
 80010f4:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 80010f8:	461a      	mov	r2, r3
 80010fa:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	@ 0x6a
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	2b00      	cmp	r3, #0
 8001102:	bfb8      	it	lt
 8001104:	425b      	neglt	r3, r3
 8001106:	657b      	str	r3, [r7, #84]	@ 0x54

  			// Calculate the the total movement
  			total_movement = delta_x + delta_y + delta_z;
 8001108:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800110a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800110c:	4413      	add	r3, r2
 800110e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001110:	4413      	add	r3, r2
 8001112:	653b      	str	r3, [r7, #80]	@ 0x50

  			//Saves the current x y z values as the prev_x, prev_y, and prev_z for the next iteration
  			prev_x = x;
 8001114:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001118:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  			prev_y = y;
 800111c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8001120:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
  			prev_z = z;
 8001124:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001128:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a

  			//If our device's total movement is beyond threshold, update device moved flag.
  			if (total_movement > MOVEMENT_THRESHOLD) {
 800112c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800112e:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8001132:	dd03      	ble.n	800113c <main+0x17c>
  				device_moved_flag = 1;
 8001134:	2301      	movs	r3, #1
 8001136:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
 800113a:	e002      	b.n	8001142 <main+0x182>
  			}
  			else {
  				device_moved_flag = 0;
 800113c:	2300      	movs	r3, #0
 800113e:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
  			}


  			//If device DID move.
  			if (device_moved_flag) {
 8001142:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 8001146:	2b00      	cmp	r3, #0
 8001148:	d019      	beq.n	800117e <main+0x1be>
  				is_lost = 0;										 // If device moved, turn is lost mode to be OFF
 800114a:	4b40      	ldr	r3, [pc, #256]	@ (800124c <main+0x28c>)
 800114c:	2200      	movs	r2, #0
 800114e:	701a      	strb	r2, [r3, #0]
  				time_still = 0;										 // If device moved, reset the time that it was still to be 0
 8001150:	4b3f      	ldr	r3, [pc, #252]	@ (8001250 <main+0x290>)
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
  				minutes_since_lost = 0;								 // If device moved, reset the minutes since lost to be 0
 8001156:	2300      	movs	r3, #0
 8001158:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  				seconds_since_lost = 0;								 // If device moved, reset the seconds since lost to be 0
 800115c:	2300      	movs	r3, #0
 800115e:	663b      	str	r3, [r7, #96]	@ 0x60
				disconnectBLE();
 8001160:	f7ff fc9a 	bl	8000a98 <disconnectBLE>
  				// If the device is not in nonDiscoverable mode and it moved, then we disconnect the device first, then we set the discoverability to be false, and set the nonDiscoverable flag to be true
  				if (!nonDiscoverable) {
 8001164:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8001168:	2b00      	cmp	r3, #0
 800116a:	d105      	bne.n	8001178 <main+0x1b8>
  					//SystemClock_FullSpeed_Config();
  				    setDiscoverability(0);
 800116c:	2000      	movs	r0, #0
 800116e:	f7ff fceb 	bl	8000b48 <setDiscoverability>

  				    nonDiscoverable = 1;
 8001172:	2301      	movs	r3, #1
 8001174:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68

  				    //SystemClock_LowPower_Config();
  				}
  				standbyBle();
 8001178:	f7ff f99a 	bl	80004b0 <standbyBle>
 800117c:	e017      	b.n	80011ae <main+0x1ee>

  			}
  			else {
  			    if (time_still >= LOST_TIME_THRESHOLD && !is_lost) { // If the device has been there for long as the threshold, and it is not currently lost, turn on lost mode
 800117e:	4b34      	ldr	r3, [pc, #208]	@ (8001250 <main+0x290>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f642 62df 	movw	r2, #11999	@ 0x2edf
 8001186:	4293      	cmp	r3, r2
 8001188:	d911      	bls.n	80011ae <main+0x1ee>
 800118a:	4b30      	ldr	r3, [pc, #192]	@ (800124c <main+0x28c>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	b2db      	uxtb	r3, r3
 8001190:	2b00      	cmp	r3, #0
 8001192:	d10c      	bne.n	80011ae <main+0x1ee>
  			        is_lost = 1;
 8001194:	4b2d      	ldr	r3, [pc, #180]	@ (800124c <main+0x28c>)
 8001196:	2201      	movs	r2, #1
 8001198:	701a      	strb	r2, [r3, #0]
  			        //If the device is in non discoverable mode, then we set the discoverability to be true, and set the nonDiscoverable flag to be false



  			        if (nonDiscoverable) {
 800119a:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d005      	beq.n	80011ae <main+0x1ee>
  			        	//SystemClock_FullSpeed_Config();

  			            setDiscoverability(1);
 80011a2:	2001      	movs	r0, #1
 80011a4:	f7ff fcd0 	bl	8000b48 <setDiscoverability>
  			            nonDiscoverable = 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
  			    }

  			}


  			if (is_lost) { //LOST MODE!
 80011ae:	4b27      	ldr	r3, [pc, #156]	@ (800124c <main+0x28c>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d036      	beq.n	8001226 <main+0x266>
  				// Calculates the total minutes lost
  				minutes_since_lost = ((time_still - LOST_TIME_THRESHOLD) / LOST_TIME_THRESHOLD) + 1;
 80011b8:	4b25      	ldr	r3, [pc, #148]	@ (8001250 <main+0x290>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f5a3 533b 	sub.w	r3, r3, #11968	@ 0x2ec0
 80011c0:	3b20      	subs	r3, #32
 80011c2:	4a24      	ldr	r2, [pc, #144]	@ (8001254 <main+0x294>)
 80011c4:	fba2 2303 	umull	r2, r3, r2, r3
 80011c8:	0a1b      	lsrs	r3, r3, #8
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	3301      	adds	r3, #1
 80011ce:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

  				// Calculates the total seconds lost
  				uint32_t seconds_since_lost = (time_still - LOST_TIME_THRESHOLD) / 1000;
 80011d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001250 <main+0x290>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f5a3 533b 	sub.w	r3, r3, #11968	@ 0x2ec0
 80011da:	3b20      	subs	r3, #32
 80011dc:	4a1e      	ldr	r2, [pc, #120]	@ (8001258 <main+0x298>)
 80011de:	fba2 2303 	umull	r2, r3, r2, r3
 80011e2:	099b      	lsrs	r3, r3, #6
 80011e4:	64fb      	str	r3, [r7, #76]	@ 0x4c

  				// If the send message flag is set, send a message to the user
  				if (send_message) {
 80011e6:	4b1d      	ldr	r3, [pc, #116]	@ (800125c <main+0x29c>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d01a      	beq.n	8001226 <main+0x266>

  					//SystemClock_FullSpeed_Config();

  					//Build the string to send out
  					unsigned char formatted_str[32];
  					snprintf((char*)formatted_str, sizeof(formatted_str), "%s %us", device_name, seconds_since_lost);
 80011f0:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80011f4:	1d38      	adds	r0, r7, #4
 80011f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80011f8:	9300      	str	r3, [sp, #0]
 80011fa:	4613      	mov	r3, r2
 80011fc:	4a18      	ldr	r2, [pc, #96]	@ (8001260 <main+0x2a0>)
 80011fe:	2120      	movs	r1, #32
 8001200:	f002 fe9a 	bl	8003f38 <sniprintf>

  					// Use strlen to get the actual string length
  					int str_len = strlen((char*)formatted_str);
 8001204:	1d3b      	adds	r3, r7, #4
 8001206:	4618      	mov	r0, r3
 8001208:	f7fe ffe2 	bl	80001d0 <strlen>
 800120c:	4603      	mov	r3, r0
 800120e:	64bb      	str	r3, [r7, #72]	@ 0x48

  					// Send the message to the user
  					updateCharValue(NORDIC_UART_SERVICE_HANDLE, READ_CHAR_HANDLE, 0, str_len, formatted_str);
 8001210:	1d3b      	adds	r3, r7, #4
 8001212:	9300      	str	r3, [sp, #0]
 8001214:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001216:	2200      	movs	r2, #0
 8001218:	4912      	ldr	r1, [pc, #72]	@ (8001264 <main+0x2a4>)
 800121a:	4813      	ldr	r0, [pc, #76]	@ (8001268 <main+0x2a8>)
 800121c:	f7ff fbe8 	bl	80009f0 <updateCharValue>
  					send_message = 0;
 8001220:	4b0e      	ldr	r3, [pc, #56]	@ (800125c <main+0x29c>)
 8001222:	2200      	movs	r2, #0
 8001224:	701a      	strb	r2, [r3, #0]

  					//SystemClock_LowPower_Config();
  				}
  			}
  		}
  		HAL_SuspendTick();
 8001226:	f000 fd83 	bl	8001d30 <HAL_SuspendTick>
  		HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 800122a:	2001      	movs	r0, #1
 800122c:	f001 f914 	bl	8002458 <HAL_PWREx_EnterSTOP2Mode>
  		HAL_ResumeTick();
 8001230:	f000 fd8e 	bl	8001d50 <HAL_ResumeTick>
  		if(!nonDiscoverable && HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8001234:	e72b      	b.n	800108e <main+0xce>
 8001236:	bf00      	nop
 8001238:	40022000 	.word	0x40022000
 800123c:	40007000 	.word	0x40007000
 8001240:	08004cc0 	.word	0x08004cc0
 8001244:	48001000 	.word	0x48001000
 8001248:	20000364 	.word	0x20000364
 800124c:	20000365 	.word	0x20000365
 8001250:	20000368 	.word	0x20000368
 8001254:	057619f1 	.word	0x057619f1
 8001258:	10624dd3 	.word	0x10624dd3
 800125c:	2000036c 	.word	0x2000036c
 8001260:	08004cb8 	.word	0x08004cb8
 8001264:	200002f4 	.word	0x200002f4
 8001268:	200002ec 	.word	0x200002ec

0800126c <LPTIM1_IRQHandler>:
  	}

}

void LPTIM1_IRQHandler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
    // Check if Auto-Reload Match interrupt is triggered
    if ((LPTIM1->ISR & LPTIM_ISR_ARRM) != 0) {
 8001270:	4b13      	ldr	r3, [pc, #76]	@ (80012c0 <LPTIM1_IRQHandler+0x54>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 0302 	and.w	r3, r3, #2
 8001278:	2b00      	cmp	r3, #0
 800127a:	d01b      	beq.n	80012b4 <LPTIM1_IRQHandler+0x48>
        // Clear the interrupt flag
        LPTIM1->ICR = LPTIM_ICR_ARRMCF;
 800127c:	4b10      	ldr	r3, [pc, #64]	@ (80012c0 <LPTIM1_IRQHandler+0x54>)
 800127e:	2202      	movs	r2, #2
 8001280:	605a      	str	r2, [r3, #4]

        // Set flag for main loop (equivalent to timer_flag)
        timer_flag = 1;
 8001282:	4b10      	ldr	r3, [pc, #64]	@ (80012c4 <LPTIM1_IRQHandler+0x58>)
 8001284:	2201      	movs	r2, #1
 8001286:	701a      	strb	r2, [r3, #0]

        // Increment time_still (now 1000 ms per interrupt instead of 50 ms)
        time_still += 1000;
 8001288:	4b0f      	ldr	r3, [pc, #60]	@ (80012c8 <LPTIM1_IRQHandler+0x5c>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001290:	4a0d      	ldr	r2, [pc, #52]	@ (80012c8 <LPTIM1_IRQHandler+0x5c>)
 8001292:	6013      	str	r3, [r2, #0]

        // Check for 10-second interval
        if ((time_still % 10000) == 0) {
 8001294:	4b0c      	ldr	r3, [pc, #48]	@ (80012c8 <LPTIM1_IRQHandler+0x5c>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	4b0c      	ldr	r3, [pc, #48]	@ (80012cc <LPTIM1_IRQHandler+0x60>)
 800129a:	fba3 1302 	umull	r1, r3, r3, r2
 800129e:	0b5b      	lsrs	r3, r3, #13
 80012a0:	f242 7110 	movw	r1, #10000	@ 0x2710
 80012a4:	fb01 f303 	mul.w	r3, r1, r3
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d102      	bne.n	80012b4 <LPTIM1_IRQHandler+0x48>
            send_message = 1;
 80012ae:	4b08      	ldr	r3, [pc, #32]	@ (80012d0 <LPTIM1_IRQHandler+0x64>)
 80012b0:	2201      	movs	r2, #1
 80012b2:	701a      	strb	r2, [r3, #0]
        }
    }
}
 80012b4:	bf00      	nop
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	40007c00 	.word	0x40007c00
 80012c4:	20000364 	.word	0x20000364
 80012c8:	20000368 	.word	0x20000368
 80012cc:	d1b71759 	.word	0xd1b71759
 80012d0:	2000036c 	.word	0x2000036c

080012d4 <disableUselessShit>:

void disableUselessShit() {
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0

	// Disable DMA1
	RCC->AHB1ENR &= ~(RCC_AHB1ENR_DMA1EN);
 80012d8:	4b95      	ldr	r3, [pc, #596]	@ (8001530 <disableUselessShit+0x25c>)
 80012da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012dc:	4a94      	ldr	r2, [pc, #592]	@ (8001530 <disableUselessShit+0x25c>)
 80012de:	f023 0301 	bic.w	r3, r3, #1
 80012e2:	6493      	str	r3, [r2, #72]	@ 0x48

	// Disable DMA2
	RCC->AHB1ENR &= ~(RCC_AHB1ENR_DMA2EN);
 80012e4:	4b92      	ldr	r3, [pc, #584]	@ (8001530 <disableUselessShit+0x25c>)
 80012e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012e8:	4a91      	ldr	r2, [pc, #580]	@ (8001530 <disableUselessShit+0x25c>)
 80012ea:	f023 0302 	bic.w	r3, r3, #2
 80012ee:	6493      	str	r3, [r2, #72]	@ 0x48

	// Disable Flash (Be very careful with this!)
	RCC->AHB1ENR &= ~(RCC_AHB1ENR_FLASHEN);
 80012f0:	4b8f      	ldr	r3, [pc, #572]	@ (8001530 <disableUselessShit+0x25c>)
 80012f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012f4:	4a8e      	ldr	r2, [pc, #568]	@ (8001530 <disableUselessShit+0x25c>)
 80012f6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80012fa:	6493      	str	r3, [r2, #72]	@ 0x48

	// Disable CRC
	RCC->AHB1ENR &= ~(RCC_AHB1ENR_CRCEN);
 80012fc:	4b8c      	ldr	r3, [pc, #560]	@ (8001530 <disableUselessShit+0x25c>)
 80012fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001300:	4a8b      	ldr	r2, [pc, #556]	@ (8001530 <disableUselessShit+0x25c>)
 8001302:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001306:	6493      	str	r3, [r2, #72]	@ 0x48

	// Disable Touch Sensing Controller
	RCC->AHB1ENR &= ~(RCC_AHB1ENR_TSCEN);
 8001308:	4b89      	ldr	r3, [pc, #548]	@ (8001530 <disableUselessShit+0x25c>)
 800130a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800130c:	4a88      	ldr	r2, [pc, #544]	@ (8001530 <disableUselessShit+0x25c>)
 800130e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001312:	6493      	str	r3, [r2, #72]	@ 0x48

	//EVERYTHING WORKS WELL

	// Disable GPIO Ports
	RCC->AHB2ENR &= ~(RCC_AHB2ENR_GPIOAEN);
 8001314:	4b86      	ldr	r3, [pc, #536]	@ (8001530 <disableUselessShit+0x25c>)
 8001316:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001318:	4a85      	ldr	r2, [pc, #532]	@ (8001530 <disableUselessShit+0x25c>)
 800131a:	f023 0301 	bic.w	r3, r3, #1
 800131e:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->AHB2ENR &= ~(RCC_AHB2ENR_GPIOBEN);
 8001320:	4b83      	ldr	r3, [pc, #524]	@ (8001530 <disableUselessShit+0x25c>)
 8001322:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001324:	4a82      	ldr	r2, [pc, #520]	@ (8001530 <disableUselessShit+0x25c>)
 8001326:	f023 0302 	bic.w	r3, r3, #2
 800132a:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->AHB2ENR &= ~(RCC_AHB2ENR_GPIOCEN);
 800132c:	4b80      	ldr	r3, [pc, #512]	@ (8001530 <disableUselessShit+0x25c>)
 800132e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001330:	4a7f      	ldr	r2, [pc, #508]	@ (8001530 <disableUselessShit+0x25c>)
 8001332:	f023 0304 	bic.w	r3, r3, #4
 8001336:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->AHB2ENR &= ~(RCC_AHB2ENR_GPIOFEN);
 8001338:	4b7d      	ldr	r3, [pc, #500]	@ (8001530 <disableUselessShit+0x25c>)
 800133a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800133c:	4a7c      	ldr	r2, [pc, #496]	@ (8001530 <disableUselessShit+0x25c>)
 800133e:	f023 0320 	bic.w	r3, r3, #32
 8001342:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->AHB2ENR &= ~(RCC_AHB2ENR_GPIOGEN);
 8001344:	4b7a      	ldr	r3, [pc, #488]	@ (8001530 <disableUselessShit+0x25c>)
 8001346:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001348:	4a79      	ldr	r2, [pc, #484]	@ (8001530 <disableUselessShit+0x25c>)
 800134a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800134e:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->AHB2ENR &= ~(RCC_AHB2ENR_GPIOHEN);
 8001350:	4b77      	ldr	r3, [pc, #476]	@ (8001530 <disableUselessShit+0x25c>)
 8001352:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001354:	4a76      	ldr	r2, [pc, #472]	@ (8001530 <disableUselessShit+0x25c>)
 8001356:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800135a:	64d3      	str	r3, [r2, #76]	@ 0x4c

	// Disable ADC
	RCC->AHB2ENR &= ~(RCC_AHB2ENR_ADCEN);
 800135c:	4b74      	ldr	r3, [pc, #464]	@ (8001530 <disableUselessShit+0x25c>)
 800135e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001360:	4a73      	ldr	r2, [pc, #460]	@ (8001530 <disableUselessShit+0x25c>)
 8001362:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001366:	64d3      	str	r3, [r2, #76]	@ 0x4c

	// Disable RNGEN

	RCC->AHB2ENR &= ~(RCC_AHB2ENR_RNGEN);
 8001368:	4b71      	ldr	r3, [pc, #452]	@ (8001530 <disableUselessShit+0x25c>)
 800136a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800136c:	4a70      	ldr	r2, [pc, #448]	@ (8001530 <disableUselessShit+0x25c>)
 800136e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001372:	64d3      	str	r3, [r2, #76]	@ 0x4c

	// Disable Random Number Generator
	RCC->AHB2ENR &= ~(RCC_AHB2ENR_RNGEN);
 8001374:	4b6e      	ldr	r3, [pc, #440]	@ (8001530 <disableUselessShit+0x25c>)
 8001376:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001378:	4a6d      	ldr	r2, [pc, #436]	@ (8001530 <disableUselessShit+0x25c>)
 800137a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800137e:	64d3      	str	r3, [r2, #76]	@ 0x4c

	// Everything works

	// Disable QSPI (Quad SPI memory interface)
	RCC->AHB3ENR &= ~(RCC_AHB3ENR_QSPIEN);
 8001380:	4b6b      	ldr	r3, [pc, #428]	@ (8001530 <disableUselessShit+0x25c>)
 8001382:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001384:	4a6a      	ldr	r2, [pc, #424]	@ (8001530 <disableUselessShit+0x25c>)
 8001386:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800138a:	6513      	str	r3, [r2, #80]	@ 0x50

	// Disable Flexible Memory Controller (FMC)
	RCC->AHB3ENR &= ~(RCC_AHB3ENR_FMCEN);
 800138c:	4b68      	ldr	r3, [pc, #416]	@ (8001530 <disableUselessShit+0x25c>)
 800138e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001390:	4a67      	ldr	r2, [pc, #412]	@ (8001530 <disableUselessShit+0x25c>)
 8001392:	f023 0301 	bic.w	r3, r3, #1
 8001396:	6513      	str	r3, [r2, #80]	@ 0x50

	// Bit 29: OPAMPEN
	RCC->APB1ENR1 &= ~(RCC_APB1ENR1_OPAMPEN);
 8001398:	4b65      	ldr	r3, [pc, #404]	@ (8001530 <disableUselessShit+0x25c>)
 800139a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800139c:	4a64      	ldr	r2, [pc, #400]	@ (8001530 <disableUselessShit+0x25c>)
 800139e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80013a2:	6593      	str	r3, [r2, #88]	@ 0x58

	// Bit 28: DAC1EN
	RCC->APB1ENR1 &= ~(RCC_APB1ENR1_DAC1EN);
 80013a4:	4b62      	ldr	r3, [pc, #392]	@ (8001530 <disableUselessShit+0x25c>)
 80013a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013a8:	4a61      	ldr	r2, [pc, #388]	@ (8001530 <disableUselessShit+0x25c>)
 80013aa:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80013ae:	6593      	str	r3, [r2, #88]	@ 0x58
//
//	// Bit 26: Reserved (do not modify)
//
	// Bit 24: CAN1EN
	RCC->APB1ENR1 &= ~(RCC_APB1ENR1_CAN1EN);
 80013b0:	4b5f      	ldr	r3, [pc, #380]	@ (8001530 <disableUselessShit+0x25c>)
 80013b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013b4:	4a5e      	ldr	r2, [pc, #376]	@ (8001530 <disableUselessShit+0x25c>)
 80013b6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80013ba:	6593      	str	r3, [r2, #88]	@ 0x58

	// Disable Window Watchdog Timer
	RCC->APB1ENR1 &= ~(RCC_APB1ENR1_WWDGEN);
 80013bc:	4b5c      	ldr	r3, [pc, #368]	@ (8001530 <disableUselessShit+0x25c>)
 80013be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013c0:	4a5b      	ldr	r2, [pc, #364]	@ (8001530 <disableUselessShit+0x25c>)
 80013c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80013c6:	6593      	str	r3, [r2, #88]	@ 0x58

	// Bit 23: I2C3EN
	RCC->APB1ENR1 &= ~(RCC_APB1ENR1_I2C3EN);
 80013c8:	4b59      	ldr	r3, [pc, #356]	@ (8001530 <disableUselessShit+0x25c>)
 80013ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013cc:	4a58      	ldr	r2, [pc, #352]	@ (8001530 <disableUselessShit+0x25c>)
 80013ce:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80013d2:	6593      	str	r3, [r2, #88]	@ 0x58

	// Bit 22: I2C2EN (keeping this enabled as per your instruction)

	// Bit 21: I2C1EN
	RCC->APB1ENR1 &= ~(RCC_APB1ENR1_I2C1EN);
 80013d4:	4b56      	ldr	r3, [pc, #344]	@ (8001530 <disableUselessShit+0x25c>)
 80013d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013d8:	4a55      	ldr	r2, [pc, #340]	@ (8001530 <disableUselessShit+0x25c>)
 80013da:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80013de:	6593      	str	r3, [r2, #88]	@ 0x58

	// Bit 20-19: Reserved (do not modify)

	// Bit 18: UART5EN
	RCC->APB1ENR1 &= ~(RCC_APB1ENR1_UART5EN);
 80013e0:	4b53      	ldr	r3, [pc, #332]	@ (8001530 <disableUselessShit+0x25c>)
 80013e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013e4:	4a52      	ldr	r2, [pc, #328]	@ (8001530 <disableUselessShit+0x25c>)
 80013e6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80013ea:	6593      	str	r3, [r2, #88]	@ 0x58

	// Bit 17: UART4EN
	RCC->APB1ENR1 &= ~(RCC_APB1ENR1_UART4EN);
 80013ec:	4b50      	ldr	r3, [pc, #320]	@ (8001530 <disableUselessShit+0x25c>)
 80013ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013f0:	4a4f      	ldr	r2, [pc, #316]	@ (8001530 <disableUselessShit+0x25c>)
 80013f2:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80013f6:	6593      	str	r3, [r2, #88]	@ 0x58

	// Bit 16: USART3EN
	RCC->APB1ENR1 &= ~(RCC_APB1ENR1_USART3EN);
 80013f8:	4b4d      	ldr	r3, [pc, #308]	@ (8001530 <disableUselessShit+0x25c>)
 80013fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013fc:	4a4c      	ldr	r2, [pc, #304]	@ (8001530 <disableUselessShit+0x25c>)
 80013fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001402:	6593      	str	r3, [r2, #88]	@ 0x58

	// Bit 15: USART2EN
	RCC->APB1ENR1 &= ~(RCC_APB1ENR1_USART2EN);
 8001404:	4b4a      	ldr	r3, [pc, #296]	@ (8001530 <disableUselessShit+0x25c>)
 8001406:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001408:	4a49      	ldr	r2, [pc, #292]	@ (8001530 <disableUselessShit+0x25c>)
 800140a:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800140e:	6593      	str	r3, [r2, #88]	@ 0x58

	// Bit 14-13: Reserved (do not modify)

	// Bit 11: SPI2EN
	RCC->APB1ENR1 &= ~(RCC_APB1ENR1_SPI2EN);
 8001410:	4b47      	ldr	r3, [pc, #284]	@ (8001530 <disableUselessShit+0x25c>)
 8001412:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001414:	4a46      	ldr	r2, [pc, #280]	@ (8001530 <disableUselessShit+0x25c>)
 8001416:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800141a:	6593      	str	r3, [r2, #88]	@ 0x58
//
//	// Bit 10-9: Reserved (do not modify)
//
	// Bit 8: TIM7EN
	RCC->APB1ENR1 &= ~(RCC_APB1ENR1_TIM7EN);
 800141c:	4b44      	ldr	r3, [pc, #272]	@ (8001530 <disableUselessShit+0x25c>)
 800141e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001420:	4a43      	ldr	r2, [pc, #268]	@ (8001530 <disableUselessShit+0x25c>)
 8001422:	f023 0320 	bic.w	r3, r3, #32
 8001426:	6593      	str	r3, [r2, #88]	@ 0x58

	// Bit 7: TIM6EN
	RCC->APB1ENR1 &= ~(RCC_APB1ENR1_TIM6EN);
 8001428:	4b41      	ldr	r3, [pc, #260]	@ (8001530 <disableUselessShit+0x25c>)
 800142a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800142c:	4a40      	ldr	r2, [pc, #256]	@ (8001530 <disableUselessShit+0x25c>)
 800142e:	f023 0310 	bic.w	r3, r3, #16
 8001432:	6593      	str	r3, [r2, #88]	@ 0x58

	// Bit 6: TIM5EN
	RCC->APB1ENR1 &= ~(RCC_APB1ENR1_TIM5EN);
 8001434:	4b3e      	ldr	r3, [pc, #248]	@ (8001530 <disableUselessShit+0x25c>)
 8001436:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001438:	4a3d      	ldr	r2, [pc, #244]	@ (8001530 <disableUselessShit+0x25c>)
 800143a:	f023 0308 	bic.w	r3, r3, #8
 800143e:	6593      	str	r3, [r2, #88]	@ 0x58

	// Bit 5: TIM4EN
	RCC->APB1ENR1 &= ~(RCC_APB1ENR1_TIM4EN);
 8001440:	4b3b      	ldr	r3, [pc, #236]	@ (8001530 <disableUselessShit+0x25c>)
 8001442:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001444:	4a3a      	ldr	r2, [pc, #232]	@ (8001530 <disableUselessShit+0x25c>)
 8001446:	f023 0304 	bic.w	r3, r3, #4
 800144a:	6593      	str	r3, [r2, #88]	@ 0x58

	// Bit 4: TIM3EN
	RCC->APB1ENR1 &= ~(RCC_APB1ENR1_TIM3EN);
 800144c:	4b38      	ldr	r3, [pc, #224]	@ (8001530 <disableUselessShit+0x25c>)
 800144e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001450:	4a37      	ldr	r2, [pc, #220]	@ (8001530 <disableUselessShit+0x25c>)
 8001452:	f023 0302 	bic.w	r3, r3, #2
 8001456:	6593      	str	r3, [r2, #88]	@ 0x58

	// Bit 3: TIM2EN
	RCC->APB1ENR1 &= ~(RCC_APB1ENR1_TIM2EN);
 8001458:	4b35      	ldr	r3, [pc, #212]	@ (8001530 <disableUselessShit+0x25c>)
 800145a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800145c:	4a34      	ldr	r2, [pc, #208]	@ (8001530 <disableUselessShit+0x25c>)
 800145e:	f023 0301 	bic.w	r3, r3, #1
 8001462:	6593      	str	r3, [r2, #88]	@ 0x58

	//EVERYTHING WORKKS


	// Disable LPTIM2
	RCC->APB1ENR2 &= ~(RCC_APB1ENR2_LPTIM2EN);
 8001464:	4b32      	ldr	r3, [pc, #200]	@ (8001530 <disableUselessShit+0x25c>)
 8001466:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001468:	4a31      	ldr	r2, [pc, #196]	@ (8001530 <disableUselessShit+0x25c>)
 800146a:	f023 0320 	bic.w	r3, r3, #32
 800146e:	65d3      	str	r3, [r2, #92]	@ 0x5c

	// Disable Single Wire Protocol (SWPMI1)
	RCC->APB1ENR2 &= ~(RCC_APB1ENR2_SWPMI1EN);
 8001470:	4b2f      	ldr	r3, [pc, #188]	@ (8001530 <disableUselessShit+0x25c>)
 8001472:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001474:	4a2e      	ldr	r2, [pc, #184]	@ (8001530 <disableUselessShit+0x25c>)
 8001476:	f023 0304 	bic.w	r3, r3, #4
 800147a:	65d3      	str	r3, [r2, #92]	@ 0x5c

	// Disable LPUART1
	RCC->APB1ENR2 &= ~(RCC_APB1ENR2_LPUART1EN);
 800147c:	4b2c      	ldr	r3, [pc, #176]	@ (8001530 <disableUselessShit+0x25c>)
 800147e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001480:	4a2b      	ldr	r2, [pc, #172]	@ (8001530 <disableUselessShit+0x25c>)
 8001482:	f023 0301 	bic.w	r3, r3, #1
 8001486:	65d3      	str	r3, [r2, #92]	@ 0x5c

	//Everything works

	// Disable DFSDM1
	RCC->APB2ENR &= ~(RCC_APB2ENR_DFSDM1EN);
 8001488:	4b29      	ldr	r3, [pc, #164]	@ (8001530 <disableUselessShit+0x25c>)
 800148a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800148c:	4a28      	ldr	r2, [pc, #160]	@ (8001530 <disableUselessShit+0x25c>)
 800148e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001492:	6613      	str	r3, [r2, #96]	@ 0x60

	// Disable SAI2
	RCC->APB2ENR &= ~(RCC_APB2ENR_SAI2EN);
 8001494:	4b26      	ldr	r3, [pc, #152]	@ (8001530 <disableUselessShit+0x25c>)
 8001496:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001498:	4a25      	ldr	r2, [pc, #148]	@ (8001530 <disableUselessShit+0x25c>)
 800149a:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800149e:	6613      	str	r3, [r2, #96]	@ 0x60

	// Disable SAI1
	RCC->APB2ENR &= ~(RCC_APB2ENR_SAI1EN);
 80014a0:	4b23      	ldr	r3, [pc, #140]	@ (8001530 <disableUselessShit+0x25c>)
 80014a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014a4:	4a22      	ldr	r2, [pc, #136]	@ (8001530 <disableUselessShit+0x25c>)
 80014a6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80014aa:	6613      	str	r3, [r2, #96]	@ 0x60

	// Disable Timers
	RCC->APB2ENR &= ~(RCC_APB2ENR_TIM17EN);
 80014ac:	4b20      	ldr	r3, [pc, #128]	@ (8001530 <disableUselessShit+0x25c>)
 80014ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014b0:	4a1f      	ldr	r2, [pc, #124]	@ (8001530 <disableUselessShit+0x25c>)
 80014b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014b6:	6613      	str	r3, [r2, #96]	@ 0x60
	RCC->APB2ENR &= ~(RCC_APB2ENR_TIM16EN);
 80014b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001530 <disableUselessShit+0x25c>)
 80014ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014bc:	4a1c      	ldr	r2, [pc, #112]	@ (8001530 <disableUselessShit+0x25c>)
 80014be:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80014c2:	6613      	str	r3, [r2, #96]	@ 0x60
	RCC->APB2ENR &= ~(RCC_APB2ENR_TIM15EN);
 80014c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001530 <disableUselessShit+0x25c>)
 80014c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014c8:	4a19      	ldr	r2, [pc, #100]	@ (8001530 <disableUselessShit+0x25c>)
 80014ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014ce:	6613      	str	r3, [r2, #96]	@ 0x60
	RCC->APB2ENR &= ~(RCC_APB2ENR_TIM8EN);
 80014d0:	4b17      	ldr	r3, [pc, #92]	@ (8001530 <disableUselessShit+0x25c>)
 80014d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014d4:	4a16      	ldr	r2, [pc, #88]	@ (8001530 <disableUselessShit+0x25c>)
 80014d6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80014da:	6613      	str	r3, [r2, #96]	@ 0x60
	RCC->APB2ENR &= ~(RCC_APB2ENR_TIM1EN);
 80014dc:	4b14      	ldr	r3, [pc, #80]	@ (8001530 <disableUselessShit+0x25c>)
 80014de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014e0:	4a13      	ldr	r2, [pc, #76]	@ (8001530 <disableUselessShit+0x25c>)
 80014e2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80014e6:	6613      	str	r3, [r2, #96]	@ 0x60

	// Disable USART1
	RCC->APB2ENR &= ~(RCC_APB2ENR_USART1EN);
 80014e8:	4b11      	ldr	r3, [pc, #68]	@ (8001530 <disableUselessShit+0x25c>)
 80014ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014ec:	4a10      	ldr	r2, [pc, #64]	@ (8001530 <disableUselessShit+0x25c>)
 80014ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80014f2:	6613      	str	r3, [r2, #96]	@ 0x60

	// Disable SPI1
	RCC->APB2ENR &= ~(RCC_APB2ENR_SPI1EN);
 80014f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001530 <disableUselessShit+0x25c>)
 80014f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001530 <disableUselessShit+0x25c>)
 80014fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80014fe:	6613      	str	r3, [r2, #96]	@ 0x60

	// Disable SD MMC
	RCC->APB2ENR &= ~(RCC_APB2ENR_SDMMC1EN);
 8001500:	4b0b      	ldr	r3, [pc, #44]	@ (8001530 <disableUselessShit+0x25c>)
 8001502:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001504:	4a0a      	ldr	r2, [pc, #40]	@ (8001530 <disableUselessShit+0x25c>)
 8001506:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800150a:	6613      	str	r3, [r2, #96]	@ 0x60

	// Disable Firewall
	RCC->APB2ENR &= ~(RCC_APB2ENR_FWEN);
 800150c:	4b08      	ldr	r3, [pc, #32]	@ (8001530 <disableUselessShit+0x25c>)
 800150e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001510:	4a07      	ldr	r2, [pc, #28]	@ (8001530 <disableUselessShit+0x25c>)
 8001512:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001516:	6613      	str	r3, [r2, #96]	@ 0x60

	// Disable SYSCFG
	RCC->APB2ENR &= ~(RCC_APB2ENR_SYSCFGEN);
 8001518:	4b05      	ldr	r3, [pc, #20]	@ (8001530 <disableUselessShit+0x25c>)
 800151a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800151c:	4a04      	ldr	r2, [pc, #16]	@ (8001530 <disableUselessShit+0x25c>)
 800151e:	f023 0301 	bic.w	r3, r3, #1
 8001522:	6613      	str	r3, [r2, #96]	@ 0x60
//	RCC->APB2SMENR &= ~(RCC_APB2SMENR_SYSCFGSMEN);
//



}
 8001524:	bf00      	nop
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	40021000 	.word	0x40021000

08001534 <SystemClock_FullSpeed_Config>:
    RCC->APB1ENR1 &= ~(1 << 26);

}

void SystemClock_FullSpeed_Config(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b096      	sub	sp, #88	@ 0x58
 8001538:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800153a:	f107 0314 	add.w	r3, r7, #20
 800153e:	2244      	movs	r2, #68	@ 0x44
 8001540:	2100      	movs	r1, #0
 8001542:	4618      	mov	r0, r3
 8001544:	f002 fe04 	bl	8004150 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001548:	463b      	mov	r3, r7
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	605a      	str	r2, [r3, #4]
 8001550:	609a      	str	r2, [r3, #8]
 8001552:	60da      	str	r2, [r3, #12]
 8001554:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
    */
    if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001556:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800155a:	f000 ff27 	bl	80023ac <HAL_PWREx_ControlVoltageScaling>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <SystemClock_FullSpeed_Config+0x34>
    {
        Error_Handler();
 8001564:	f000 f902 	bl	800176c <Error_Handler>
    }

    /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001568:	2310      	movs	r3, #16
 800156a:	617b      	str	r3, [r7, #20]
    RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800156c:	2301      	movs	r3, #1
 800156e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.MSICalibrationValue = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;  // 8 MHz
 8001574:	2370      	movs	r3, #112	@ 0x70
 8001576:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001578:	2300      	movs	r3, #0
 800157a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800157c:	f107 0314 	add.w	r3, r7, #20
 8001580:	4618      	mov	r0, r3
 8001582:	f000 ff95 	bl	80024b0 <HAL_RCC_OscConfig>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <SystemClock_FullSpeed_Config+0x5c>
    {
        Error_Handler();
 800158c:	f000 f8ee 	bl	800176c <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001590:	230f      	movs	r3, #15
 8001592:	603b      	str	r3, [r7, #0]
    |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001594:	2300      	movs	r3, #0
 8001596:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001598:	2300      	movs	r3, #0
 800159a:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800159c:	2300      	movs	r3, #0
 800159e:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015a0:	2300      	movs	r3, #0
 80015a2:	613b      	str	r3, [r7, #16]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015a4:	463b      	mov	r3, r7
 80015a6:	2100      	movs	r1, #0
 80015a8:	4618      	mov	r0, r3
 80015aa:	f001 fb5d 	bl	8002c68 <HAL_RCC_ClockConfig>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <SystemClock_FullSpeed_Config+0x84>
    {
        Error_Handler();
 80015b4:	f000 f8da 	bl	800176c <Error_Handler>
    }
}
 80015b8:	bf00      	nop
 80015ba:	3758      	adds	r7, #88	@ 0x58
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80015c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001634 <MX_SPI3_Init+0x74>)
 80015c6:	4a1c      	ldr	r2, [pc, #112]	@ (8001638 <MX_SPI3_Init+0x78>)
 80015c8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80015ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001634 <MX_SPI3_Init+0x74>)
 80015cc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80015d0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80015d2:	4b18      	ldr	r3, [pc, #96]	@ (8001634 <MX_SPI3_Init+0x74>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80015d8:	4b16      	ldr	r3, [pc, #88]	@ (8001634 <MX_SPI3_Init+0x74>)
 80015da:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80015de:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015e0:	4b14      	ldr	r3, [pc, #80]	@ (8001634 <MX_SPI3_Init+0x74>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015e6:	4b13      	ldr	r3, [pc, #76]	@ (8001634 <MX_SPI3_Init+0x74>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80015ec:	4b11      	ldr	r3, [pc, #68]	@ (8001634 <MX_SPI3_Init+0x74>)
 80015ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015f2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001634 <MX_SPI3_Init+0x74>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001634 <MX_SPI3_Init+0x74>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001600:	4b0c      	ldr	r3, [pc, #48]	@ (8001634 <MX_SPI3_Init+0x74>)
 8001602:	2200      	movs	r2, #0
 8001604:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001606:	4b0b      	ldr	r3, [pc, #44]	@ (8001634 <MX_SPI3_Init+0x74>)
 8001608:	2200      	movs	r2, #0
 800160a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 800160c:	4b09      	ldr	r3, [pc, #36]	@ (8001634 <MX_SPI3_Init+0x74>)
 800160e:	2207      	movs	r2, #7
 8001610:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001612:	4b08      	ldr	r3, [pc, #32]	@ (8001634 <MX_SPI3_Init+0x74>)
 8001614:	2200      	movs	r2, #0
 8001616:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001618:	4b06      	ldr	r3, [pc, #24]	@ (8001634 <MX_SPI3_Init+0x74>)
 800161a:	2208      	movs	r2, #8
 800161c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800161e:	4805      	ldr	r0, [pc, #20]	@ (8001634 <MX_SPI3_Init+0x74>)
 8001620:	f001 fd0e 	bl	8003040 <HAL_SPI_Init>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800162a:	f000 f89f 	bl	800176c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	20000300 	.word	0x20000300
 8001638:	40003c00 	.word	0x40003c00

0800163c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08a      	sub	sp, #40	@ 0x28
 8001640:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001642:	f107 0314 	add.w	r3, r7, #20
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	605a      	str	r2, [r3, #4]
 800164c:	609a      	str	r2, [r3, #8]
 800164e:	60da      	str	r2, [r3, #12]
 8001650:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001652:	4b43      	ldr	r3, [pc, #268]	@ (8001760 <MX_GPIO_Init+0x124>)
 8001654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001656:	4a42      	ldr	r2, [pc, #264]	@ (8001760 <MX_GPIO_Init+0x124>)
 8001658:	f043 0310 	orr.w	r3, r3, #16
 800165c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800165e:	4b40      	ldr	r3, [pc, #256]	@ (8001760 <MX_GPIO_Init+0x124>)
 8001660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001662:	f003 0310 	and.w	r3, r3, #16
 8001666:	613b      	str	r3, [r7, #16]
 8001668:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800166a:	4b3d      	ldr	r3, [pc, #244]	@ (8001760 <MX_GPIO_Init+0x124>)
 800166c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800166e:	4a3c      	ldr	r2, [pc, #240]	@ (8001760 <MX_GPIO_Init+0x124>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001676:	4b3a      	ldr	r3, [pc, #232]	@ (8001760 <MX_GPIO_Init+0x124>)
 8001678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001682:	4b37      	ldr	r3, [pc, #220]	@ (8001760 <MX_GPIO_Init+0x124>)
 8001684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001686:	4a36      	ldr	r2, [pc, #216]	@ (8001760 <MX_GPIO_Init+0x124>)
 8001688:	f043 0302 	orr.w	r3, r3, #2
 800168c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800168e:	4b34      	ldr	r3, [pc, #208]	@ (8001760 <MX_GPIO_Init+0x124>)
 8001690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	60bb      	str	r3, [r7, #8]
 8001698:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800169a:	4b31      	ldr	r3, [pc, #196]	@ (8001760 <MX_GPIO_Init+0x124>)
 800169c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800169e:	4a30      	ldr	r2, [pc, #192]	@ (8001760 <MX_GPIO_Init+0x124>)
 80016a0:	f043 0308 	orr.w	r3, r3, #8
 80016a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016a6:	4b2e      	ldr	r3, [pc, #184]	@ (8001760 <MX_GPIO_Init+0x124>)
 80016a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016aa:	f003 0308 	and.w	r3, r3, #8
 80016ae:	607b      	str	r3, [r7, #4]
 80016b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016b2:	4b2b      	ldr	r3, [pc, #172]	@ (8001760 <MX_GPIO_Init+0x124>)
 80016b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016b6:	4a2a      	ldr	r2, [pc, #168]	@ (8001760 <MX_GPIO_Init+0x124>)
 80016b8:	f043 0304 	orr.w	r3, r3, #4
 80016bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016be:	4b28      	ldr	r3, [pc, #160]	@ (8001760 <MX_GPIO_Init+0x124>)
 80016c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016c2:	f003 0304 	and.w	r3, r3, #4
 80016c6:	603b      	str	r3, [r7, #0]
 80016c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_LED1_GPIO_Port, GPIO_LED1_Pin, GPIO_PIN_RESET);
 80016ca:	2200      	movs	r2, #0
 80016cc:	2120      	movs	r1, #32
 80016ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016d2:	f000 fe21 	bl	8002318 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port, BLE_CS_Pin, GPIO_PIN_SET);
 80016d6:	2201      	movs	r2, #1
 80016d8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80016dc:	4821      	ldr	r0, [pc, #132]	@ (8001764 <MX_GPIO_Init+0x128>)
 80016de:	f000 fe1b 	bl	8002318 <HAL_GPIO_WritePin>


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port, BLE_RESET_Pin, GPIO_PIN_SET);
 80016e2:	2201      	movs	r2, #1
 80016e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016ec:	f000 fe14 	bl	8002318 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLE_INT_Pin */
  GPIO_InitStruct.Pin = BLE_INT_Pin;
 80016f0:	2340      	movs	r3, #64	@ 0x40
 80016f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016f4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80016f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLE_INT_GPIO_Port, &GPIO_InitStruct);
 80016fe:	f107 0314 	add.w	r3, r7, #20
 8001702:	4619      	mov	r1, r3
 8001704:	4818      	ldr	r0, [pc, #96]	@ (8001768 <MX_GPIO_Init+0x12c>)
 8001706:	f000 fc45 	bl	8001f94 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_LED1_Pin BLE_RESET_Pin */
  GPIO_InitStruct.Pin = GPIO_LED1_Pin|BLE_RESET_Pin;
 800170a:	f44f 7390 	mov.w	r3, #288	@ 0x120
 800170e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001710:	2301      	movs	r3, #1
 8001712:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001714:	2300      	movs	r3, #0
 8001716:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001718:	2300      	movs	r3, #0
 800171a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	4619      	mov	r1, r3
 8001722:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001726:	f000 fc35 	bl	8001f94 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_CS_Pin */
  GPIO_InitStruct.Pin = BLE_CS_Pin;
 800172a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800172e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001730:	2301      	movs	r3, #1
 8001732:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001738:	2303      	movs	r3, #3
 800173a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLE_CS_GPIO_Port, &GPIO_InitStruct);
 800173c:	f107 0314 	add.w	r3, r7, #20
 8001740:	4619      	mov	r1, r3
 8001742:	4808      	ldr	r0, [pc, #32]	@ (8001764 <MX_GPIO_Init+0x128>)
 8001744:	f000 fc26 	bl	8001f94 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001748:	2200      	movs	r2, #0
 800174a:	2100      	movs	r1, #0
 800174c:	2017      	movs	r0, #23
 800174e:	f000 fbea 	bl	8001f26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001752:	2017      	movs	r0, #23
 8001754:	f000 fc03 	bl	8001f5e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001758:	bf00      	nop
 800175a:	3728      	adds	r7, #40	@ 0x28
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40021000 	.word	0x40021000
 8001764:	48000c00 	.word	0x48000c00
 8001768:	48001000 	.word	0x48001000

0800176c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001770:	b672      	cpsid	i
}
 8001772:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001774:	bf00      	nop
 8001776:	e7fd      	b.n	8001774 <Error_Handler+0x8>

08001778 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800177e:	4b0f      	ldr	r3, [pc, #60]	@ (80017bc <HAL_MspInit+0x44>)
 8001780:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001782:	4a0e      	ldr	r2, [pc, #56]	@ (80017bc <HAL_MspInit+0x44>)
 8001784:	f043 0301 	orr.w	r3, r3, #1
 8001788:	6613      	str	r3, [r2, #96]	@ 0x60
 800178a:	4b0c      	ldr	r3, [pc, #48]	@ (80017bc <HAL_MspInit+0x44>)
 800178c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	607b      	str	r3, [r7, #4]
 8001794:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001796:	4b09      	ldr	r3, [pc, #36]	@ (80017bc <HAL_MspInit+0x44>)
 8001798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800179a:	4a08      	ldr	r2, [pc, #32]	@ (80017bc <HAL_MspInit+0x44>)
 800179c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80017a2:	4b06      	ldr	r3, [pc, #24]	@ (80017bc <HAL_MspInit+0x44>)
 80017a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017aa:	603b      	str	r3, [r7, #0]
 80017ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ae:	bf00      	nop
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	40021000 	.word	0x40021000

080017c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b08a      	sub	sp, #40	@ 0x28
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c8:	f107 0314 	add.w	r3, r7, #20
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a17      	ldr	r2, [pc, #92]	@ (800183c <HAL_SPI_MspInit+0x7c>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d128      	bne.n	8001834 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80017e2:	4b17      	ldr	r3, [pc, #92]	@ (8001840 <HAL_SPI_MspInit+0x80>)
 80017e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017e6:	4a16      	ldr	r2, [pc, #88]	@ (8001840 <HAL_SPI_MspInit+0x80>)
 80017e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80017ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80017ee:	4b14      	ldr	r3, [pc, #80]	@ (8001840 <HAL_SPI_MspInit+0x80>)
 80017f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80017f6:	613b      	str	r3, [r7, #16]
 80017f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017fa:	4b11      	ldr	r3, [pc, #68]	@ (8001840 <HAL_SPI_MspInit+0x80>)
 80017fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017fe:	4a10      	ldr	r2, [pc, #64]	@ (8001840 <HAL_SPI_MspInit+0x80>)
 8001800:	f043 0304 	orr.w	r3, r3, #4
 8001804:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001806:	4b0e      	ldr	r3, [pc, #56]	@ (8001840 <HAL_SPI_MspInit+0x80>)
 8001808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800180a:	f003 0304 	and.w	r3, r3, #4
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001812:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001818:	2302      	movs	r3, #2
 800181a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001820:	2303      	movs	r3, #3
 8001822:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001824:	2306      	movs	r3, #6
 8001826:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001828:	f107 0314 	add.w	r3, r7, #20
 800182c:	4619      	mov	r1, r3
 800182e:	4805      	ldr	r0, [pc, #20]	@ (8001844 <HAL_SPI_MspInit+0x84>)
 8001830:	f000 fbb0 	bl	8001f94 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001834:	bf00      	nop
 8001836:	3728      	adds	r7, #40	@ 0x28
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	40003c00 	.word	0x40003c00
 8001840:	40021000 	.word	0x40021000
 8001844:	48000800 	.word	0x48000800

08001848 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800184c:	bf00      	nop
 800184e:	e7fd      	b.n	800184c <NMI_Handler+0x4>

08001850 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001854:	bf00      	nop
 8001856:	e7fd      	b.n	8001854 <HardFault_Handler+0x4>

08001858 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800185c:	bf00      	nop
 800185e:	e7fd      	b.n	800185c <MemManage_Handler+0x4>

08001860 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001864:	bf00      	nop
 8001866:	e7fd      	b.n	8001864 <BusFault_Handler+0x4>

08001868 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800186c:	bf00      	nop
 800186e:	e7fd      	b.n	800186c <UsageFault_Handler+0x4>

08001870 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800189e:	f000 fa03 	bl	8001ca8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
	...

080018a8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  dataAvailable=1;
 80018ac:	4b03      	ldr	r3, [pc, #12]	@ (80018bc <EXTI9_5_IRQHandler+0x14>)
 80018ae:	2201      	movs	r2, #1
 80018b0:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLE_INT_Pin);
 80018b2:	2040      	movs	r0, #64	@ 0x40
 80018b4:	f000 fd48 	bl	8002348 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80018b8:	bf00      	nop
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	200002fc 	.word	0x200002fc

080018c0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]
 80018d0:	e00a      	b.n	80018e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018d2:	f3af 8000 	nop.w
 80018d6:	4601      	mov	r1, r0
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	1c5a      	adds	r2, r3, #1
 80018dc:	60ba      	str	r2, [r7, #8]
 80018de:	b2ca      	uxtb	r2, r1
 80018e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	3301      	adds	r3, #1
 80018e6:	617b      	str	r3, [r7, #20]
 80018e8:	697a      	ldr	r2, [r7, #20]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	dbf0      	blt.n	80018d2 <_read+0x12>
	}

return len;
 80018f0:	687b      	ldr	r3, [r7, #4]
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3718      	adds	r7, #24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
	...

080018fc <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001904:	4b11      	ldr	r3, [pc, #68]	@ (800194c <_sbrk+0x50>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d102      	bne.n	8001912 <_sbrk+0x16>
		heap_end = &end;
 800190c:	4b0f      	ldr	r3, [pc, #60]	@ (800194c <_sbrk+0x50>)
 800190e:	4a10      	ldr	r2, [pc, #64]	@ (8001950 <_sbrk+0x54>)
 8001910:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001912:	4b0e      	ldr	r3, [pc, #56]	@ (800194c <_sbrk+0x50>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001918:	4b0c      	ldr	r3, [pc, #48]	@ (800194c <_sbrk+0x50>)
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	4413      	add	r3, r2
 8001920:	466a      	mov	r2, sp
 8001922:	4293      	cmp	r3, r2
 8001924:	d907      	bls.n	8001936 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001926:	f002 fc71 	bl	800420c <__errno>
 800192a:	4603      	mov	r3, r0
 800192c:	220c      	movs	r2, #12
 800192e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001930:	f04f 33ff 	mov.w	r3, #4294967295
 8001934:	e006      	b.n	8001944 <_sbrk+0x48>
	}

	heap_end += incr;
 8001936:	4b05      	ldr	r3, [pc, #20]	@ (800194c <_sbrk+0x50>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4413      	add	r3, r2
 800193e:	4a03      	ldr	r2, [pc, #12]	@ (800194c <_sbrk+0x50>)
 8001940:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001942:	68fb      	ldr	r3, [r7, #12]
}
 8001944:	4618      	mov	r0, r3
 8001946:	3710      	adds	r7, #16
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	20000370 	.word	0x20000370
 8001950:	200004c8 	.word	0x200004c8

08001954 <_close>:

int _close(int file)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
	return -1;
 800195c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001960:	4618      	mov	r0, r3
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800197c:	605a      	str	r2, [r3, #4]
	return 0;
 800197e:	2300      	movs	r3, #0
}
 8001980:	4618      	mov	r0, r3
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <_isatty>:

int _isatty(int file)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
	return 1;
 8001994:	2301      	movs	r3, #1
}
 8001996:	4618      	mov	r0, r3
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019a2:	b480      	push	{r7}
 80019a4:	b085      	sub	sp, #20
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	60f8      	str	r0, [r7, #12]
 80019aa:	60b9      	str	r1, [r7, #8]
 80019ac:	607a      	str	r2, [r7, #4]
	return 0;
 80019ae:	2300      	movs	r3, #0
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3714      	adds	r7, #20
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019c0:	4b17      	ldr	r3, [pc, #92]	@ (8001a20 <SystemInit+0x64>)
 80019c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019c6:	4a16      	ldr	r2, [pc, #88]	@ (8001a20 <SystemInit+0x64>)
 80019c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80019d0:	4b14      	ldr	r3, [pc, #80]	@ (8001a24 <SystemInit+0x68>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a13      	ldr	r2, [pc, #76]	@ (8001a24 <SystemInit+0x68>)
 80019d6:	f043 0301 	orr.w	r3, r3, #1
 80019da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80019dc:	4b11      	ldr	r3, [pc, #68]	@ (8001a24 <SystemInit+0x68>)
 80019de:	2200      	movs	r2, #0
 80019e0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80019e2:	4b10      	ldr	r3, [pc, #64]	@ (8001a24 <SystemInit+0x68>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a0f      	ldr	r2, [pc, #60]	@ (8001a24 <SystemInit+0x68>)
 80019e8:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 80019ec:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 80019f0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80019f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001a24 <SystemInit+0x68>)
 80019f4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80019f8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80019fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001a24 <SystemInit+0x68>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a09      	ldr	r2, [pc, #36]	@ (8001a24 <SystemInit+0x68>)
 8001a00:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a04:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001a06:	4b07      	ldr	r3, [pc, #28]	@ (8001a24 <SystemInit+0x68>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a0c:	4b04      	ldr	r3, [pc, #16]	@ (8001a20 <SystemInit+0x64>)
 8001a0e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001a12:	609a      	str	r2, [r3, #8]
#endif
}
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	e000ed00 	.word	0xe000ed00
 8001a24:	40021000 	.word	0x40021000

08001a28 <__NVIC_EnableIRQ>:
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	db0b      	blt.n	8001a52 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
 8001a3c:	f003 021f 	and.w	r2, r3, #31
 8001a40:	4907      	ldr	r1, [pc, #28]	@ (8001a60 <__NVIC_EnableIRQ+0x38>)
 8001a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a46:	095b      	lsrs	r3, r3, #5
 8001a48:	2001      	movs	r0, #1
 8001a4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	e000e100 	.word	0xe000e100

08001a64 <__NVIC_SetPriority>:
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	6039      	str	r1, [r7, #0]
 8001a6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	db0a      	blt.n	8001a8e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	b2da      	uxtb	r2, r3
 8001a7c:	490c      	ldr	r1, [pc, #48]	@ (8001ab0 <__NVIC_SetPriority+0x4c>)
 8001a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a82:	0112      	lsls	r2, r2, #4
 8001a84:	b2d2      	uxtb	r2, r2
 8001a86:	440b      	add	r3, r1
 8001a88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001a8c:	e00a      	b.n	8001aa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	b2da      	uxtb	r2, r3
 8001a92:	4908      	ldr	r1, [pc, #32]	@ (8001ab4 <__NVIC_SetPriority+0x50>)
 8001a94:	79fb      	ldrb	r3, [r7, #7]
 8001a96:	f003 030f 	and.w	r3, r3, #15
 8001a9a:	3b04      	subs	r3, #4
 8001a9c:	0112      	lsls	r2, r2, #4
 8001a9e:	b2d2      	uxtb	r2, r2
 8001aa0:	440b      	add	r3, r1
 8001aa2:	761a      	strb	r2, [r3, #24]
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	e000e100 	.word	0xe000e100
 8001ab4:	e000ed00 	.word	0xe000ed00

08001ab8 <lptim_init>:
 *      Author: schulman
 */

#include "timer.h"

void lptim_init(void) {
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0

	// Enable LSI Ready Interrupt
	RCC->CIER |= RCC_CIER_LSIRDYIE;
 8001abc:	4b32      	ldr	r3, [pc, #200]	@ (8001b88 <lptim_init+0xd0>)
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	4a31      	ldr	r2, [pc, #196]	@ (8001b88 <lptim_init+0xd0>)
 8001ac2:	f043 0301 	orr.w	r3, r3, #1
 8001ac6:	6193      	str	r3, [r2, #24]

    // Step 1: enable LSI
    RCC->CSR |= RCC_CSR_LSION;
 8001ac8:	4b2f      	ldr	r3, [pc, #188]	@ (8001b88 <lptim_init+0xd0>)
 8001aca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ace:	4a2e      	ldr	r2, [pc, #184]	@ (8001b88 <lptim_init+0xd0>)
 8001ad0:	f043 0301 	orr.w	r3, r3, #1
 8001ad4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    while (!(RCC->CSR & RCC_CSR_LSIRDY));
 8001ad8:	bf00      	nop
 8001ada:	4b2b      	ldr	r3, [pc, #172]	@ (8001b88 <lptim_init+0xd0>)
 8001adc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ae0:	f003 0302 	and.w	r3, r3, #2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d0f8      	beq.n	8001ada <lptim_init+0x22>

    // Step 2: enable LPTIM1 clock
    RCC->APB1ENR1 |= RCC_APB1ENR1_LPTIM1EN;
 8001ae8:	4b27      	ldr	r3, [pc, #156]	@ (8001b88 <lptim_init+0xd0>)
 8001aea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aec:	4a26      	ldr	r2, [pc, #152]	@ (8001b88 <lptim_init+0xd0>)
 8001aee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001af2:	6593      	str	r3, [r2, #88]	@ 0x58

    // Step 3: Configure LPTIM1 to use LSI clock
    RCC->CCIPR &= ~RCC_CCIPR_LPTIM1SEL; // Clear existing settings
 8001af4:	4b24      	ldr	r3, [pc, #144]	@ (8001b88 <lptim_init+0xd0>)
 8001af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001afa:	4a23      	ldr	r2, [pc, #140]	@ (8001b88 <lptim_init+0xd0>)
 8001afc:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8001b00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    RCC->CCIPR |= RCC_CCIPR_LPTIM1SEL_0; // Select LSI (01 in the bitfield)
 8001b04:	4b20      	ldr	r3, [pc, #128]	@ (8001b88 <lptim_init+0xd0>)
 8001b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b0a:	4a1f      	ldr	r2, [pc, #124]	@ (8001b88 <lptim_init+0xd0>)
 8001b0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

    // Step 4: Enable LPTIM1 to continue running in debug mode
    //DBGMCU->APB1FZR1 &= ~DBGMCU_APB1FZR1_DBG_LPTIM1_STOP;

    // 5. Disable the LPTIM before configuration
    LPTIM1->CR &= ~LPTIM_CR_ENABLE; // Clear ENABLE bit
 8001b14:	4b1d      	ldr	r3, [pc, #116]	@ (8001b8c <lptim_init+0xd4>)
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	4a1c      	ldr	r2, [pc, #112]	@ (8001b8c <lptim_init+0xd4>)
 8001b1a:	f023 0301 	bic.w	r3, r3, #1
 8001b1e:	6113      	str	r3, [r2, #16]

    // Wait for the timer to be actually disabled
    while(LPTIM1->CR & LPTIM_CR_ENABLE) {}
 8001b20:	bf00      	nop
 8001b22:	4b1a      	ldr	r3, [pc, #104]	@ (8001b8c <lptim_init+0xd4>)
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1f9      	bne.n	8001b22 <lptim_init+0x6a>

    // 6. Clear any pending interrupts
    // Clear all LPTIM1 interrupt flags using specific macros
    LPTIM1->ICR = LPTIM_ICR_ARRMCF |    // Clear Auto-Reload Match flag
 8001b2e:	4b17      	ldr	r3, [pc, #92]	@ (8001b8c <lptim_init+0xd4>)
 8001b30:	225f      	movs	r2, #95	@ 0x5f
 8001b32:	605a      	str	r2, [r3, #4]
                  LPTIM_ICR_CMPMCF |      // Clear Compare Match flag
                  LPTIM_ICR_ARRMCF |  // Clear Interrupt Enable flag
                  LPTIM_ICR_DOWNCF;      // Clear Down Count flag

    // 7. Configure LPTIM Registers
    LPTIM1->CFGR = 0; // Clear configuration register
 8001b34:	4b15      	ldr	r3, [pc, #84]	@ (8001b8c <lptim_init+0xd4>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	60da      	str	r2, [r3, #12]

    // 8. Configure Clock Source and Counter Mode
    // CKSEL = 0 (internal clock)
    // COUNTMODE = 0 (update counter on each internal clock pulse)
    // Prescaler = 32 (division ratio of 32, corresponds to binary 101)
    LPTIM1->CFGR = (0b101 << LPTIM_CFGR_PRESC_Pos) | // Prescaler
 8001b3a:	4b14      	ldr	r3, [pc, #80]	@ (8001b8c <lptim_init+0xd4>)
 8001b3c:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8001b40:	60da      	str	r2, [r3, #12]

    // 9. Set Operating Mode (Continuous Mode)
    // PRELOAD = 0 (immediate update)
    // LPTIM1->CFGR &= ~LPTIM_CFGR_PRELOAD;

    LPTIM1->CNT = 0;
 8001b42:	4b12      	ldr	r3, [pc, #72]	@ (8001b8c <lptim_init+0xd4>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	61da      	str	r2, [r3, #28]

    // 10. Configure Interrupt Registers
    // Enable relevant interrupts
    LPTIM1->IER = LPTIM_IER_ARRMIE; // Auto-reload match interrupt
 8001b48:	4b10      	ldr	r3, [pc, #64]	@ (8001b8c <lptim_init+0xd4>)
 8001b4a:	2202      	movs	r2, #2
 8001b4c:	609a      	str	r2, [r3, #8]

    // 13. Clear ARROK flag
    // LPTIM1->ICR |= LPTIM_ICR_ARROKCF;

    // 16. Configure NVIC for LPTIM1 Interrupt
    NVIC_SetPriority(LPTIM1_IRQn, 0);
 8001b4e:	2100      	movs	r1, #0
 8001b50:	2041      	movs	r0, #65	@ 0x41
 8001b52:	f7ff ff87 	bl	8001a64 <__NVIC_SetPriority>
    NVIC_EnableIRQ(LPTIM1_IRQn);
 8001b56:	2041      	movs	r0, #65	@ 0x41
 8001b58:	f7ff ff66 	bl	8001a28 <__NVIC_EnableIRQ>

    // 14. Enable Timer
    // Set ENABLE bit in CR register
    LPTIM1->CR |= LPTIM_CR_ENABLE;
 8001b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b8c <lptim_init+0xd4>)
 8001b5e:	691b      	ldr	r3, [r3, #16]
 8001b60:	4a0a      	ldr	r2, [pc, #40]	@ (8001b8c <lptim_init+0xd4>)
 8001b62:	f043 0301 	orr.w	r3, r3, #1
 8001b66:	6113      	str	r3, [r2, #16]

    // Wait for the timer to be actually enabled
    while(!(LPTIM1->CR & LPTIM_CR_ENABLE)) {}
 8001b68:	bf00      	nop
 8001b6a:	4b08      	ldr	r3, [pc, #32]	@ (8001b8c <lptim_init+0xd4>)
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d0f9      	beq.n	8001b6a <lptim_init+0xb2>

    // 15. Start Continuous Counting
    // Set CNTSTRT bit to start counter
    LPTIM1->CR |= LPTIM_CR_CNTSTRT;
 8001b76:	4b05      	ldr	r3, [pc, #20]	@ (8001b8c <lptim_init+0xd4>)
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	4a04      	ldr	r2, [pc, #16]	@ (8001b8c <lptim_init+0xd4>)
 8001b7c:	f043 0304 	orr.w	r3, r3, #4
 8001b80:	6113      	str	r3, [r2, #16]

}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	40007c00 	.word	0x40007c00

08001b90 <set_low_timer_ms>:

void set_low_timer_ms() {
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
	LPTIM1->ARR = 1000; // 1 ms period (adjust as needed)
 8001b94:	4b04      	ldr	r3, [pc, #16]	@ (8001ba8 <set_low_timer_ms+0x18>)
 8001b96:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001b9a:	619a      	str	r2, [r3, #24]
}
 8001b9c:	bf00      	nop
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	40007c00 	.word	0x40007c00

08001bac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001bac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001be4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bb0:	f7ff ff04 	bl	80019bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bb4:	480c      	ldr	r0, [pc, #48]	@ (8001be8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bb6:	490d      	ldr	r1, [pc, #52]	@ (8001bec <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bb8:	4a0d      	ldr	r2, [pc, #52]	@ (8001bf0 <LoopForever+0xe>)
  movs r3, #0
 8001bba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bbc:	e002      	b.n	8001bc4 <LoopCopyDataInit>

08001bbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bc2:	3304      	adds	r3, #4

08001bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bc8:	d3f9      	bcc.n	8001bbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bca:	4a0a      	ldr	r2, [pc, #40]	@ (8001bf4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bcc:	4c0a      	ldr	r4, [pc, #40]	@ (8001bf8 <LoopForever+0x16>)
  movs r3, #0
 8001bce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bd0:	e001      	b.n	8001bd6 <LoopFillZerobss>

08001bd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bd4:	3204      	adds	r2, #4

08001bd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bd8:	d3fb      	bcc.n	8001bd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bda:	f002 fb1d 	bl	8004218 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bde:	f7ff f9ef 	bl	8000fc0 <main>

08001be2 <LoopForever>:

LoopForever:
    b LoopForever
 8001be2:	e7fe      	b.n	8001be2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001be4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001be8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bec:	200001c4 	.word	0x200001c4
  ldr r2, =_sidata
 8001bf0:	08004d4c 	.word	0x08004d4c
  ldr r2, =_sbss
 8001bf4:	200001c4 	.word	0x200001c4
  ldr r4, =_ebss
 8001bf8:	200004c4 	.word	0x200004c4

08001bfc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bfc:	e7fe      	b.n	8001bfc <ADC1_2_IRQHandler>

08001bfe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b082      	sub	sp, #8
 8001c02:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c04:	2300      	movs	r3, #0
 8001c06:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c08:	2003      	movs	r0, #3
 8001c0a:	f000 f981 	bl	8001f10 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c0e:	2000      	movs	r0, #0
 8001c10:	f000 f80e 	bl	8001c30 <HAL_InitTick>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d002      	beq.n	8001c20 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	71fb      	strb	r3, [r7, #7]
 8001c1e:	e001      	b.n	8001c24 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c20:	f7ff fdaa 	bl	8001778 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c24:	79fb      	ldrb	r3, [r7, #7]
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
	...

08001c30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c3c:	4b17      	ldr	r3, [pc, #92]	@ (8001c9c <HAL_InitTick+0x6c>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d023      	beq.n	8001c8c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c44:	4b16      	ldr	r3, [pc, #88]	@ (8001ca0 <HAL_InitTick+0x70>)
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	4b14      	ldr	r3, [pc, #80]	@ (8001c9c <HAL_InitTick+0x6c>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f000 f98d 	bl	8001f7a <HAL_SYSTICK_Config>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d10f      	bne.n	8001c86 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2b0f      	cmp	r3, #15
 8001c6a:	d809      	bhi.n	8001c80 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	6879      	ldr	r1, [r7, #4]
 8001c70:	f04f 30ff 	mov.w	r0, #4294967295
 8001c74:	f000 f957 	bl	8001f26 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c78:	4a0a      	ldr	r2, [pc, #40]	@ (8001ca4 <HAL_InitTick+0x74>)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6013      	str	r3, [r2, #0]
 8001c7e:	e007      	b.n	8001c90 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	73fb      	strb	r3, [r7, #15]
 8001c84:	e004      	b.n	8001c90 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	73fb      	strb	r3, [r7, #15]
 8001c8a:	e001      	b.n	8001c90 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	20000164 	.word	0x20000164
 8001ca0:	2000015c 	.word	0x2000015c
 8001ca4:	20000160 	.word	0x20000160

08001ca8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cac:	4b06      	ldr	r3, [pc, #24]	@ (8001cc8 <HAL_IncTick+0x20>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	4b06      	ldr	r3, [pc, #24]	@ (8001ccc <HAL_IncTick+0x24>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	4a04      	ldr	r2, [pc, #16]	@ (8001ccc <HAL_IncTick+0x24>)
 8001cba:	6013      	str	r3, [r2, #0]
}
 8001cbc:	bf00      	nop
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	20000164 	.word	0x20000164
 8001ccc:	20000374 	.word	0x20000374

08001cd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  return uwTick;
 8001cd4:	4b03      	ldr	r3, [pc, #12]	@ (8001ce4 <HAL_GetTick+0x14>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	20000374 	.word	0x20000374

08001ce8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cf0:	f7ff ffee 	bl	8001cd0 <HAL_GetTick>
 8001cf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d00:	d005      	beq.n	8001d0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001d02:	4b0a      	ldr	r3, [pc, #40]	@ (8001d2c <HAL_Delay+0x44>)
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	461a      	mov	r2, r3
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d0e:	bf00      	nop
 8001d10:	f7ff ffde 	bl	8001cd0 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d8f7      	bhi.n	8001d10 <HAL_Delay+0x28>
  {
  }
}
 8001d20:	bf00      	nop
 8001d22:	bf00      	nop
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	20000164 	.word	0x20000164

08001d30 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001d34:	4b05      	ldr	r3, [pc, #20]	@ (8001d4c <HAL_SuspendTick+0x1c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a04      	ldr	r2, [pc, #16]	@ (8001d4c <HAL_SuspendTick+0x1c>)
 8001d3a:	f023 0302 	bic.w	r3, r3, #2
 8001d3e:	6013      	str	r3, [r2, #0]
}
 8001d40:	bf00      	nop
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	e000e010 	.word	0xe000e010

08001d50 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8001d54:	4b05      	ldr	r3, [pc, #20]	@ (8001d6c <HAL_ResumeTick+0x1c>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a04      	ldr	r2, [pc, #16]	@ (8001d6c <HAL_ResumeTick+0x1c>)
 8001d5a:	f043 0302 	orr.w	r3, r3, #2
 8001d5e:	6013      	str	r3, [r2, #0]
}
 8001d60:	bf00      	nop
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	e000e010 	.word	0xe000e010

08001d70 <__NVIC_SetPriorityGrouping>:
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f003 0307 	and.w	r3, r3, #7
 8001d7e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d80:	4b0c      	ldr	r3, [pc, #48]	@ (8001db4 <__NVIC_SetPriorityGrouping+0x44>)
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d86:	68ba      	ldr	r2, [r7, #8]
 8001d88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001da0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001da2:	4a04      	ldr	r2, [pc, #16]	@ (8001db4 <__NVIC_SetPriorityGrouping+0x44>)
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	60d3      	str	r3, [r2, #12]
}
 8001da8:	bf00      	nop
 8001daa:	3714      	adds	r7, #20
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr
 8001db4:	e000ed00 	.word	0xe000ed00

08001db8 <__NVIC_GetPriorityGrouping>:
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dbc:	4b04      	ldr	r3, [pc, #16]	@ (8001dd0 <__NVIC_GetPriorityGrouping+0x18>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	0a1b      	lsrs	r3, r3, #8
 8001dc2:	f003 0307 	and.w	r3, r3, #7
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	e000ed00 	.word	0xe000ed00

08001dd4 <__NVIC_EnableIRQ>:
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	4603      	mov	r3, r0
 8001ddc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	db0b      	blt.n	8001dfe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001de6:	79fb      	ldrb	r3, [r7, #7]
 8001de8:	f003 021f 	and.w	r2, r3, #31
 8001dec:	4907      	ldr	r1, [pc, #28]	@ (8001e0c <__NVIC_EnableIRQ+0x38>)
 8001dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df2:	095b      	lsrs	r3, r3, #5
 8001df4:	2001      	movs	r0, #1
 8001df6:	fa00 f202 	lsl.w	r2, r0, r2
 8001dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001dfe:	bf00      	nop
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	e000e100 	.word	0xe000e100

08001e10 <__NVIC_SetPriority>:
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	6039      	str	r1, [r7, #0]
 8001e1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	db0a      	blt.n	8001e3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	b2da      	uxtb	r2, r3
 8001e28:	490c      	ldr	r1, [pc, #48]	@ (8001e5c <__NVIC_SetPriority+0x4c>)
 8001e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2e:	0112      	lsls	r2, r2, #4
 8001e30:	b2d2      	uxtb	r2, r2
 8001e32:	440b      	add	r3, r1
 8001e34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001e38:	e00a      	b.n	8001e50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	b2da      	uxtb	r2, r3
 8001e3e:	4908      	ldr	r1, [pc, #32]	@ (8001e60 <__NVIC_SetPriority+0x50>)
 8001e40:	79fb      	ldrb	r3, [r7, #7]
 8001e42:	f003 030f 	and.w	r3, r3, #15
 8001e46:	3b04      	subs	r3, #4
 8001e48:	0112      	lsls	r2, r2, #4
 8001e4a:	b2d2      	uxtb	r2, r2
 8001e4c:	440b      	add	r3, r1
 8001e4e:	761a      	strb	r2, [r3, #24]
}
 8001e50:	bf00      	nop
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr
 8001e5c:	e000e100 	.word	0xe000e100
 8001e60:	e000ed00 	.word	0xe000ed00

08001e64 <NVIC_EncodePriority>:
{
 8001e64:	b480      	push	{r7}
 8001e66:	b089      	sub	sp, #36	@ 0x24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f003 0307 	and.w	r3, r3, #7
 8001e76:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	f1c3 0307 	rsb	r3, r3, #7
 8001e7e:	2b04      	cmp	r3, #4
 8001e80:	bf28      	it	cs
 8001e82:	2304      	movcs	r3, #4
 8001e84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	3304      	adds	r3, #4
 8001e8a:	2b06      	cmp	r3, #6
 8001e8c:	d902      	bls.n	8001e94 <NVIC_EncodePriority+0x30>
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	3b03      	subs	r3, #3
 8001e92:	e000      	b.n	8001e96 <NVIC_EncodePriority+0x32>
 8001e94:	2300      	movs	r3, #0
 8001e96:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e98:	f04f 32ff 	mov.w	r2, #4294967295
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	43da      	mvns	r2, r3
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	401a      	ands	r2, r3
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001eac:	f04f 31ff 	mov.w	r1, #4294967295
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb6:	43d9      	mvns	r1, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ebc:	4313      	orrs	r3, r2
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3724      	adds	r7, #36	@ 0x24
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
	...

08001ecc <SysTick_Config>:
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001edc:	d301      	bcc.n	8001ee2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e00f      	b.n	8001f02 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ee2:	4a0a      	ldr	r2, [pc, #40]	@ (8001f0c <SysTick_Config+0x40>)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eea:	210f      	movs	r1, #15
 8001eec:	f04f 30ff 	mov.w	r0, #4294967295
 8001ef0:	f7ff ff8e 	bl	8001e10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ef4:	4b05      	ldr	r3, [pc, #20]	@ (8001f0c <SysTick_Config+0x40>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001efa:	4b04      	ldr	r3, [pc, #16]	@ (8001f0c <SysTick_Config+0x40>)
 8001efc:	2207      	movs	r2, #7
 8001efe:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	e000e010 	.word	0xe000e010

08001f10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f7ff ff29 	bl	8001d70 <__NVIC_SetPriorityGrouping>
}
 8001f1e:	bf00      	nop
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b086      	sub	sp, #24
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	60b9      	str	r1, [r7, #8]
 8001f30:	607a      	str	r2, [r7, #4]
 8001f32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f34:	2300      	movs	r3, #0
 8001f36:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f38:	f7ff ff3e 	bl	8001db8 <__NVIC_GetPriorityGrouping>
 8001f3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	68b9      	ldr	r1, [r7, #8]
 8001f42:	6978      	ldr	r0, [r7, #20]
 8001f44:	f7ff ff8e 	bl	8001e64 <NVIC_EncodePriority>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f4e:	4611      	mov	r1, r2
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff ff5d 	bl	8001e10 <__NVIC_SetPriority>
}
 8001f56:	bf00      	nop
 8001f58:	3718      	adds	r7, #24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b082      	sub	sp, #8
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	4603      	mov	r3, r0
 8001f66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff ff31 	bl	8001dd4 <__NVIC_EnableIRQ>
}
 8001f72:	bf00      	nop
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b082      	sub	sp, #8
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f7ff ffa2 	bl	8001ecc <SysTick_Config>
 8001f88:	4603      	mov	r3, r0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
	...

08001f94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b087      	sub	sp, #28
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fa2:	e17f      	b.n	80022a4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	2101      	movs	r1, #1
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	f000 8171 	beq.w	800229e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f003 0303 	and.w	r3, r3, #3
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d005      	beq.n	8001fd4 <HAL_GPIO_Init+0x40>
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f003 0303 	and.w	r3, r3, #3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d130      	bne.n	8002036 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	2203      	movs	r2, #3
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	68da      	ldr	r2, [r3, #12]
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	693a      	ldr	r2, [r7, #16]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	693a      	ldr	r2, [r7, #16]
 8002002:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800200a:	2201      	movs	r2, #1
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	43db      	mvns	r3, r3
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	4013      	ands	r3, r2
 8002018:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	091b      	lsrs	r3, r3, #4
 8002020:	f003 0201 	and.w	r2, r3, #1
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	693a      	ldr	r2, [r7, #16]
 800202c:	4313      	orrs	r3, r2
 800202e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f003 0303 	and.w	r3, r3, #3
 800203e:	2b03      	cmp	r3, #3
 8002040:	d118      	bne.n	8002074 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002046:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002048:	2201      	movs	r2, #1
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	43db      	mvns	r3, r3
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	4013      	ands	r3, r2
 8002056:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	08db      	lsrs	r3, r3, #3
 800205e:	f003 0201 	and.w	r2, r3, #1
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	693a      	ldr	r2, [r7, #16]
 800206a:	4313      	orrs	r3, r2
 800206c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f003 0303 	and.w	r3, r3, #3
 800207c:	2b03      	cmp	r3, #3
 800207e:	d017      	beq.n	80020b0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	2203      	movs	r2, #3
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	43db      	mvns	r3, r3
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	4013      	ands	r3, r2
 8002096:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f003 0303 	and.w	r3, r3, #3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d123      	bne.n	8002104 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	08da      	lsrs	r2, r3, #3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	3208      	adds	r2, #8
 80020c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	f003 0307 	and.w	r3, r3, #7
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	220f      	movs	r2, #15
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	43db      	mvns	r3, r3
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	4013      	ands	r3, r2
 80020de:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	691a      	ldr	r2, [r3, #16]
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	f003 0307 	and.w	r3, r3, #7
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	08da      	lsrs	r2, r3, #3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	3208      	adds	r2, #8
 80020fe:	6939      	ldr	r1, [r7, #16]
 8002100:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	2203      	movs	r2, #3
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	43db      	mvns	r3, r3
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	4013      	ands	r3, r2
 800211a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f003 0203 	and.w	r2, r3, #3
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	4313      	orrs	r3, r2
 8002130:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	693a      	ldr	r2, [r7, #16]
 8002136:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002140:	2b00      	cmp	r3, #0
 8002142:	f000 80ac 	beq.w	800229e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002146:	4b5f      	ldr	r3, [pc, #380]	@ (80022c4 <HAL_GPIO_Init+0x330>)
 8002148:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800214a:	4a5e      	ldr	r2, [pc, #376]	@ (80022c4 <HAL_GPIO_Init+0x330>)
 800214c:	f043 0301 	orr.w	r3, r3, #1
 8002150:	6613      	str	r3, [r2, #96]	@ 0x60
 8002152:	4b5c      	ldr	r3, [pc, #368]	@ (80022c4 <HAL_GPIO_Init+0x330>)
 8002154:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	60bb      	str	r3, [r7, #8]
 800215c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800215e:	4a5a      	ldr	r2, [pc, #360]	@ (80022c8 <HAL_GPIO_Init+0x334>)
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	089b      	lsrs	r3, r3, #2
 8002164:	3302      	adds	r3, #2
 8002166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800216a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	f003 0303 	and.w	r3, r3, #3
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	220f      	movs	r2, #15
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	43db      	mvns	r3, r3
 800217c:	693a      	ldr	r2, [r7, #16]
 800217e:	4013      	ands	r3, r2
 8002180:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002188:	d025      	beq.n	80021d6 <HAL_GPIO_Init+0x242>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a4f      	ldr	r2, [pc, #316]	@ (80022cc <HAL_GPIO_Init+0x338>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d01f      	beq.n	80021d2 <HAL_GPIO_Init+0x23e>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a4e      	ldr	r2, [pc, #312]	@ (80022d0 <HAL_GPIO_Init+0x33c>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d019      	beq.n	80021ce <HAL_GPIO_Init+0x23a>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a4d      	ldr	r2, [pc, #308]	@ (80022d4 <HAL_GPIO_Init+0x340>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d013      	beq.n	80021ca <HAL_GPIO_Init+0x236>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a4c      	ldr	r2, [pc, #304]	@ (80022d8 <HAL_GPIO_Init+0x344>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d00d      	beq.n	80021c6 <HAL_GPIO_Init+0x232>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a4b      	ldr	r2, [pc, #300]	@ (80022dc <HAL_GPIO_Init+0x348>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d007      	beq.n	80021c2 <HAL_GPIO_Init+0x22e>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a4a      	ldr	r2, [pc, #296]	@ (80022e0 <HAL_GPIO_Init+0x34c>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d101      	bne.n	80021be <HAL_GPIO_Init+0x22a>
 80021ba:	2306      	movs	r3, #6
 80021bc:	e00c      	b.n	80021d8 <HAL_GPIO_Init+0x244>
 80021be:	2307      	movs	r3, #7
 80021c0:	e00a      	b.n	80021d8 <HAL_GPIO_Init+0x244>
 80021c2:	2305      	movs	r3, #5
 80021c4:	e008      	b.n	80021d8 <HAL_GPIO_Init+0x244>
 80021c6:	2304      	movs	r3, #4
 80021c8:	e006      	b.n	80021d8 <HAL_GPIO_Init+0x244>
 80021ca:	2303      	movs	r3, #3
 80021cc:	e004      	b.n	80021d8 <HAL_GPIO_Init+0x244>
 80021ce:	2302      	movs	r3, #2
 80021d0:	e002      	b.n	80021d8 <HAL_GPIO_Init+0x244>
 80021d2:	2301      	movs	r3, #1
 80021d4:	e000      	b.n	80021d8 <HAL_GPIO_Init+0x244>
 80021d6:	2300      	movs	r3, #0
 80021d8:	697a      	ldr	r2, [r7, #20]
 80021da:	f002 0203 	and.w	r2, r2, #3
 80021de:	0092      	lsls	r2, r2, #2
 80021e0:	4093      	lsls	r3, r2
 80021e2:	693a      	ldr	r2, [r7, #16]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021e8:	4937      	ldr	r1, [pc, #220]	@ (80022c8 <HAL_GPIO_Init+0x334>)
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	089b      	lsrs	r3, r3, #2
 80021ee:	3302      	adds	r3, #2
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021f6:	4b3b      	ldr	r3, [pc, #236]	@ (80022e4 <HAL_GPIO_Init+0x350>)
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	43db      	mvns	r3, r3
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	4013      	ands	r3, r2
 8002204:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d003      	beq.n	800221a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	4313      	orrs	r3, r2
 8002218:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800221a:	4a32      	ldr	r2, [pc, #200]	@ (80022e4 <HAL_GPIO_Init+0x350>)
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002220:	4b30      	ldr	r3, [pc, #192]	@ (80022e4 <HAL_GPIO_Init+0x350>)
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	43db      	mvns	r3, r3
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	4013      	ands	r3, r2
 800222e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d003      	beq.n	8002244 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800223c:	693a      	ldr	r2, [r7, #16]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	4313      	orrs	r3, r2
 8002242:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002244:	4a27      	ldr	r2, [pc, #156]	@ (80022e4 <HAL_GPIO_Init+0x350>)
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800224a:	4b26      	ldr	r3, [pc, #152]	@ (80022e4 <HAL_GPIO_Init+0x350>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	43db      	mvns	r3, r3
 8002254:	693a      	ldr	r2, [r7, #16]
 8002256:	4013      	ands	r3, r2
 8002258:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d003      	beq.n	800226e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	4313      	orrs	r3, r2
 800226c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800226e:	4a1d      	ldr	r2, [pc, #116]	@ (80022e4 <HAL_GPIO_Init+0x350>)
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002274:	4b1b      	ldr	r3, [pc, #108]	@ (80022e4 <HAL_GPIO_Init+0x350>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	43db      	mvns	r3, r3
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	4013      	ands	r3, r2
 8002282:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d003      	beq.n	8002298 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	4313      	orrs	r3, r2
 8002296:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002298:	4a12      	ldr	r2, [pc, #72]	@ (80022e4 <HAL_GPIO_Init+0x350>)
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	3301      	adds	r3, #1
 80022a2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	fa22 f303 	lsr.w	r3, r2, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	f47f ae78 	bne.w	8001fa4 <HAL_GPIO_Init+0x10>
  }
}
 80022b4:	bf00      	nop
 80022b6:	bf00      	nop
 80022b8:	371c      	adds	r7, #28
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	40021000 	.word	0x40021000
 80022c8:	40010000 	.word	0x40010000
 80022cc:	48000400 	.word	0x48000400
 80022d0:	48000800 	.word	0x48000800
 80022d4:	48000c00 	.word	0x48000c00
 80022d8:	48001000 	.word	0x48001000
 80022dc:	48001400 	.word	0x48001400
 80022e0:	48001800 	.word	0x48001800
 80022e4:	40010400 	.word	0x40010400

080022e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	460b      	mov	r3, r1
 80022f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	691a      	ldr	r2, [r3, #16]
 80022f8:	887b      	ldrh	r3, [r7, #2]
 80022fa:	4013      	ands	r3, r2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d002      	beq.n	8002306 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002300:	2301      	movs	r3, #1
 8002302:	73fb      	strb	r3, [r7, #15]
 8002304:	e001      	b.n	800230a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002306:	2300      	movs	r3, #0
 8002308:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800230a:	7bfb      	ldrb	r3, [r7, #15]
}
 800230c:	4618      	mov	r0, r3
 800230e:	3714      	adds	r7, #20
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	460b      	mov	r3, r1
 8002322:	807b      	strh	r3, [r7, #2]
 8002324:	4613      	mov	r3, r2
 8002326:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002328:	787b      	ldrb	r3, [r7, #1]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d003      	beq.n	8002336 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800232e:	887a      	ldrh	r2, [r7, #2]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002334:	e002      	b.n	800233c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002336:	887a      	ldrh	r2, [r7, #2]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	4603      	mov	r3, r0
 8002350:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002352:	4b08      	ldr	r3, [pc, #32]	@ (8002374 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002354:	695a      	ldr	r2, [r3, #20]
 8002356:	88fb      	ldrh	r3, [r7, #6]
 8002358:	4013      	ands	r3, r2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d006      	beq.n	800236c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800235e:	4a05      	ldr	r2, [pc, #20]	@ (8002374 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002360:	88fb      	ldrh	r3, [r7, #6]
 8002362:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002364:	88fb      	ldrh	r3, [r7, #6]
 8002366:	4618      	mov	r0, r3
 8002368:	f000 f806 	bl	8002378 <HAL_GPIO_EXTI_Callback>
  }
}
 800236c:	bf00      	nop
 800236e:	3708      	adds	r7, #8
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40010400 	.word	0x40010400

08002378 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	4603      	mov	r3, r0
 8002380:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002382:	bf00      	nop
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
	...

08002390 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002394:	4b04      	ldr	r3, [pc, #16]	@ (80023a8 <HAL_PWREx_GetVoltageRange+0x18>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800239c:	4618      	mov	r0, r3
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	40007000 	.word	0x40007000

080023ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80023ba:	d130      	bne.n	800241e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80023bc:	4b23      	ldr	r3, [pc, #140]	@ (800244c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80023c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80023c8:	d038      	beq.n	800243c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80023ca:	4b20      	ldr	r3, [pc, #128]	@ (800244c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80023d2:	4a1e      	ldr	r2, [pc, #120]	@ (800244c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023d4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023d8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80023da:	4b1d      	ldr	r3, [pc, #116]	@ (8002450 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2232      	movs	r2, #50	@ 0x32
 80023e0:	fb02 f303 	mul.w	r3, r2, r3
 80023e4:	4a1b      	ldr	r2, [pc, #108]	@ (8002454 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80023e6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ea:	0c9b      	lsrs	r3, r3, #18
 80023ec:	3301      	adds	r3, #1
 80023ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023f0:	e002      	b.n	80023f8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	3b01      	subs	r3, #1
 80023f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023f8:	4b14      	ldr	r3, [pc, #80]	@ (800244c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023fa:	695b      	ldr	r3, [r3, #20]
 80023fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002400:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002404:	d102      	bne.n	800240c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d1f2      	bne.n	80023f2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800240c:	4b0f      	ldr	r3, [pc, #60]	@ (800244c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800240e:	695b      	ldr	r3, [r3, #20]
 8002410:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002414:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002418:	d110      	bne.n	800243c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e00f      	b.n	800243e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800241e:	4b0b      	ldr	r3, [pc, #44]	@ (800244c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002426:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800242a:	d007      	beq.n	800243c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800242c:	4b07      	ldr	r3, [pc, #28]	@ (800244c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002434:	4a05      	ldr	r2, [pc, #20]	@ (800244c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002436:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800243a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3714      	adds	r7, #20
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	40007000 	.word	0x40007000
 8002450:	2000015c 	.word	0x2000015c
 8002454:	431bde83 	.word	0x431bde83

08002458 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	71fb      	strb	r3, [r7, #7]
  /* Check the parameter */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP2);
 8002462:	4b11      	ldr	r3, [pc, #68]	@ (80024a8 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f023 0307 	bic.w	r3, r3, #7
 800246a:	4a0f      	ldr	r2, [pc, #60]	@ (80024a8 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 800246c:	f043 0302 	orr.w	r3, r3, #2
 8002470:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002472:	4b0e      	ldr	r3, [pc, #56]	@ (80024ac <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	4a0d      	ldr	r2, [pc, #52]	@ (80024ac <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8002478:	f043 0304 	orr.w	r3, r3, #4
 800247c:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800247e:	79fb      	ldrb	r3, [r7, #7]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d101      	bne.n	8002488 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002484:	bf30      	wfi
 8002486:	e002      	b.n	800248e <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002488:	bf40      	sev
    __WFE();
 800248a:	bf20      	wfe
    __WFE();
 800248c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800248e:	4b07      	ldr	r3, [pc, #28]	@ (80024ac <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	4a06      	ldr	r2, [pc, #24]	@ (80024ac <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8002494:	f023 0304 	bic.w	r3, r3, #4
 8002498:	6113      	str	r3, [r2, #16]
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	40007000 	.word	0x40007000
 80024ac:	e000ed00 	.word	0xe000ed00

080024b0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b088      	sub	sp, #32
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d101      	bne.n	80024c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e3ca      	b.n	8002c58 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024c2:	4b97      	ldr	r3, [pc, #604]	@ (8002720 <HAL_RCC_OscConfig+0x270>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f003 030c 	and.w	r3, r3, #12
 80024ca:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024cc:	4b94      	ldr	r3, [pc, #592]	@ (8002720 <HAL_RCC_OscConfig+0x270>)
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	f003 0303 	and.w	r3, r3, #3
 80024d4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0310 	and.w	r3, r3, #16
 80024de:	2b00      	cmp	r3, #0
 80024e0:	f000 80e4 	beq.w	80026ac <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d007      	beq.n	80024fa <HAL_RCC_OscConfig+0x4a>
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	2b0c      	cmp	r3, #12
 80024ee:	f040 808b 	bne.w	8002608 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	f040 8087 	bne.w	8002608 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024fa:	4b89      	ldr	r3, [pc, #548]	@ (8002720 <HAL_RCC_OscConfig+0x270>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d005      	beq.n	8002512 <HAL_RCC_OscConfig+0x62>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e3a2      	b.n	8002c58 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a1a      	ldr	r2, [r3, #32]
 8002516:	4b82      	ldr	r3, [pc, #520]	@ (8002720 <HAL_RCC_OscConfig+0x270>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0308 	and.w	r3, r3, #8
 800251e:	2b00      	cmp	r3, #0
 8002520:	d004      	beq.n	800252c <HAL_RCC_OscConfig+0x7c>
 8002522:	4b7f      	ldr	r3, [pc, #508]	@ (8002720 <HAL_RCC_OscConfig+0x270>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800252a:	e005      	b.n	8002538 <HAL_RCC_OscConfig+0x88>
 800252c:	4b7c      	ldr	r3, [pc, #496]	@ (8002720 <HAL_RCC_OscConfig+0x270>)
 800252e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002532:	091b      	lsrs	r3, r3, #4
 8002534:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002538:	4293      	cmp	r3, r2
 800253a:	d223      	bcs.n	8002584 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a1b      	ldr	r3, [r3, #32]
 8002540:	4618      	mov	r0, r3
 8002542:	f000 fd1d 	bl	8002f80 <RCC_SetFlashLatencyFromMSIRange>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e383      	b.n	8002c58 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002550:	4b73      	ldr	r3, [pc, #460]	@ (8002720 <HAL_RCC_OscConfig+0x270>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a72      	ldr	r2, [pc, #456]	@ (8002720 <HAL_RCC_OscConfig+0x270>)
 8002556:	f043 0308 	orr.w	r3, r3, #8
 800255a:	6013      	str	r3, [r2, #0]
 800255c:	4b70      	ldr	r3, [pc, #448]	@ (8002720 <HAL_RCC_OscConfig+0x270>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a1b      	ldr	r3, [r3, #32]
 8002568:	496d      	ldr	r1, [pc, #436]	@ (8002720 <HAL_RCC_OscConfig+0x270>)
 800256a:	4313      	orrs	r3, r2
 800256c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800256e:	4b6c      	ldr	r3, [pc, #432]	@ (8002720 <HAL_RCC_OscConfig+0x270>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	69db      	ldr	r3, [r3, #28]
 800257a:	021b      	lsls	r3, r3, #8
 800257c:	4968      	ldr	r1, [pc, #416]	@ (8002720 <HAL_RCC_OscConfig+0x270>)
 800257e:	4313      	orrs	r3, r2
 8002580:	604b      	str	r3, [r1, #4]
 8002582:	e025      	b.n	80025d0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002584:	4b66      	ldr	r3, [pc, #408]	@ (8002720 <HAL_RCC_OscConfig+0x270>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a65      	ldr	r2, [pc, #404]	@ (8002720 <HAL_RCC_OscConfig+0x270>)
 800258a:	f043 0308 	orr.w	r3, r3, #8
 800258e:	6013      	str	r3, [r2, #0]
 8002590:	4b63      	ldr	r3, [pc, #396]	@ (8002720 <HAL_RCC_OscConfig+0x270>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a1b      	ldr	r3, [r3, #32]
 800259c:	4960      	ldr	r1, [pc, #384]	@ (8002720 <HAL_RCC_OscConfig+0x270>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025a2:	4b5f      	ldr	r3, [pc, #380]	@ (8002720 <HAL_RCC_OscConfig+0x270>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	69db      	ldr	r3, [r3, #28]
 80025ae:	021b      	lsls	r3, r3, #8
 80025b0:	495b      	ldr	r1, [pc, #364]	@ (8002720 <HAL_RCC_OscConfig+0x270>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d109      	bne.n	80025d0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f000 fcdd 	bl	8002f80 <RCC_SetFlashLatencyFromMSIRange>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e343      	b.n	8002c58 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025d0:	f000 fc4a 	bl	8002e68 <HAL_RCC_GetSysClockFreq>
 80025d4:	4602      	mov	r2, r0
 80025d6:	4b52      	ldr	r3, [pc, #328]	@ (8002720 <HAL_RCC_OscConfig+0x270>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	091b      	lsrs	r3, r3, #4
 80025dc:	f003 030f 	and.w	r3, r3, #15
 80025e0:	4950      	ldr	r1, [pc, #320]	@ (8002724 <HAL_RCC_OscConfig+0x274>)
 80025e2:	5ccb      	ldrb	r3, [r1, r3]
 80025e4:	f003 031f 	and.w	r3, r3, #31
 80025e8:	fa22 f303 	lsr.w	r3, r2, r3
 80025ec:	4a4e      	ldr	r2, [pc, #312]	@ (8002728 <HAL_RCC_OscConfig+0x278>)
 80025ee:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80025f0:	4b4e      	ldr	r3, [pc, #312]	@ (800272c <HAL_RCC_OscConfig+0x27c>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7ff fb1b 	bl	8001c30 <HAL_InitTick>
 80025fa:	4603      	mov	r3, r0
 80025fc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80025fe:	7bfb      	ldrb	r3, [r7, #15]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d052      	beq.n	80026aa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002604:	7bfb      	ldrb	r3, [r7, #15]
 8002606:	e327      	b.n	8002c58 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d032      	beq.n	8002676 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002610:	4b43      	ldr	r3, [pc, #268]	@ (8002720 <HAL_RCC_OscConfig+0x270>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a42      	ldr	r2, [pc, #264]	@ (8002720 <HAL_RCC_OscConfig+0x270>)
 8002616:	f043 0301 	orr.w	r3, r3, #1
 800261a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800261c:	f7ff fb58 	bl	8001cd0 <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002624:	f7ff fb54 	bl	8001cd0 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e310      	b.n	8002c58 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002636:	4b3a      	ldr	r3, [pc, #232]	@ (8002720 <HAL_RCC_OscConfig+0x270>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d0f0      	beq.n	8002624 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002642:	4b37      	ldr	r3, [pc, #220]	@ (8002720 <HAL_RCC_OscConfig+0x270>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a36      	ldr	r2, [pc, #216]	@ (8002720 <HAL_RCC_OscConfig+0x270>)
 8002648:	f043 0308 	orr.w	r3, r3, #8
 800264c:	6013      	str	r3, [r2, #0]
 800264e:	4b34      	ldr	r3, [pc, #208]	@ (8002720 <HAL_RCC_OscConfig+0x270>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a1b      	ldr	r3, [r3, #32]
 800265a:	4931      	ldr	r1, [pc, #196]	@ (8002720 <HAL_RCC_OscConfig+0x270>)
 800265c:	4313      	orrs	r3, r2
 800265e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002660:	4b2f      	ldr	r3, [pc, #188]	@ (8002720 <HAL_RCC_OscConfig+0x270>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	69db      	ldr	r3, [r3, #28]
 800266c:	021b      	lsls	r3, r3, #8
 800266e:	492c      	ldr	r1, [pc, #176]	@ (8002720 <HAL_RCC_OscConfig+0x270>)
 8002670:	4313      	orrs	r3, r2
 8002672:	604b      	str	r3, [r1, #4]
 8002674:	e01a      	b.n	80026ac <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002676:	4b2a      	ldr	r3, [pc, #168]	@ (8002720 <HAL_RCC_OscConfig+0x270>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a29      	ldr	r2, [pc, #164]	@ (8002720 <HAL_RCC_OscConfig+0x270>)
 800267c:	f023 0301 	bic.w	r3, r3, #1
 8002680:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002682:	f7ff fb25 	bl	8001cd0 <HAL_GetTick>
 8002686:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002688:	e008      	b.n	800269c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800268a:	f7ff fb21 	bl	8001cd0 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e2dd      	b.n	8002c58 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800269c:	4b20      	ldr	r3, [pc, #128]	@ (8002720 <HAL_RCC_OscConfig+0x270>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1f0      	bne.n	800268a <HAL_RCC_OscConfig+0x1da>
 80026a8:	e000      	b.n	80026ac <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026aa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d074      	beq.n	80027a2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	2b08      	cmp	r3, #8
 80026bc:	d005      	beq.n	80026ca <HAL_RCC_OscConfig+0x21a>
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	2b0c      	cmp	r3, #12
 80026c2:	d10e      	bne.n	80026e2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	2b03      	cmp	r3, #3
 80026c8:	d10b      	bne.n	80026e2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ca:	4b15      	ldr	r3, [pc, #84]	@ (8002720 <HAL_RCC_OscConfig+0x270>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d064      	beq.n	80027a0 <HAL_RCC_OscConfig+0x2f0>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d160      	bne.n	80027a0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e2ba      	b.n	8002c58 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026ea:	d106      	bne.n	80026fa <HAL_RCC_OscConfig+0x24a>
 80026ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002720 <HAL_RCC_OscConfig+0x270>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a0b      	ldr	r2, [pc, #44]	@ (8002720 <HAL_RCC_OscConfig+0x270>)
 80026f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026f6:	6013      	str	r3, [r2, #0]
 80026f8:	e026      	b.n	8002748 <HAL_RCC_OscConfig+0x298>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002702:	d115      	bne.n	8002730 <HAL_RCC_OscConfig+0x280>
 8002704:	4b06      	ldr	r3, [pc, #24]	@ (8002720 <HAL_RCC_OscConfig+0x270>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a05      	ldr	r2, [pc, #20]	@ (8002720 <HAL_RCC_OscConfig+0x270>)
 800270a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800270e:	6013      	str	r3, [r2, #0]
 8002710:	4b03      	ldr	r3, [pc, #12]	@ (8002720 <HAL_RCC_OscConfig+0x270>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a02      	ldr	r2, [pc, #8]	@ (8002720 <HAL_RCC_OscConfig+0x270>)
 8002716:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800271a:	6013      	str	r3, [r2, #0]
 800271c:	e014      	b.n	8002748 <HAL_RCC_OscConfig+0x298>
 800271e:	bf00      	nop
 8002720:	40021000 	.word	0x40021000
 8002724:	08004cc8 	.word	0x08004cc8
 8002728:	2000015c 	.word	0x2000015c
 800272c:	20000160 	.word	0x20000160
 8002730:	4ba0      	ldr	r3, [pc, #640]	@ (80029b4 <HAL_RCC_OscConfig+0x504>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a9f      	ldr	r2, [pc, #636]	@ (80029b4 <HAL_RCC_OscConfig+0x504>)
 8002736:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800273a:	6013      	str	r3, [r2, #0]
 800273c:	4b9d      	ldr	r3, [pc, #628]	@ (80029b4 <HAL_RCC_OscConfig+0x504>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a9c      	ldr	r2, [pc, #624]	@ (80029b4 <HAL_RCC_OscConfig+0x504>)
 8002742:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002746:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d013      	beq.n	8002778 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002750:	f7ff fabe 	bl	8001cd0 <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002756:	e008      	b.n	800276a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002758:	f7ff faba 	bl	8001cd0 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b64      	cmp	r3, #100	@ 0x64
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e276      	b.n	8002c58 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800276a:	4b92      	ldr	r3, [pc, #584]	@ (80029b4 <HAL_RCC_OscConfig+0x504>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d0f0      	beq.n	8002758 <HAL_RCC_OscConfig+0x2a8>
 8002776:	e014      	b.n	80027a2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002778:	f7ff faaa 	bl	8001cd0 <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002780:	f7ff faa6 	bl	8001cd0 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b64      	cmp	r3, #100	@ 0x64
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e262      	b.n	8002c58 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002792:	4b88      	ldr	r3, [pc, #544]	@ (80029b4 <HAL_RCC_OscConfig+0x504>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1f0      	bne.n	8002780 <HAL_RCC_OscConfig+0x2d0>
 800279e:	e000      	b.n	80027a2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d060      	beq.n	8002870 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	2b04      	cmp	r3, #4
 80027b2:	d005      	beq.n	80027c0 <HAL_RCC_OscConfig+0x310>
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	2b0c      	cmp	r3, #12
 80027b8:	d119      	bne.n	80027ee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d116      	bne.n	80027ee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027c0:	4b7c      	ldr	r3, [pc, #496]	@ (80029b4 <HAL_RCC_OscConfig+0x504>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d005      	beq.n	80027d8 <HAL_RCC_OscConfig+0x328>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d101      	bne.n	80027d8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e23f      	b.n	8002c58 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027d8:	4b76      	ldr	r3, [pc, #472]	@ (80029b4 <HAL_RCC_OscConfig+0x504>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	691b      	ldr	r3, [r3, #16]
 80027e4:	061b      	lsls	r3, r3, #24
 80027e6:	4973      	ldr	r1, [pc, #460]	@ (80029b4 <HAL_RCC_OscConfig+0x504>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027ec:	e040      	b.n	8002870 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d023      	beq.n	800283e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027f6:	4b6f      	ldr	r3, [pc, #444]	@ (80029b4 <HAL_RCC_OscConfig+0x504>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a6e      	ldr	r2, [pc, #440]	@ (80029b4 <HAL_RCC_OscConfig+0x504>)
 80027fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002800:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002802:	f7ff fa65 	bl	8001cd0 <HAL_GetTick>
 8002806:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002808:	e008      	b.n	800281c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800280a:	f7ff fa61 	bl	8001cd0 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e21d      	b.n	8002c58 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800281c:	4b65      	ldr	r3, [pc, #404]	@ (80029b4 <HAL_RCC_OscConfig+0x504>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002824:	2b00      	cmp	r3, #0
 8002826:	d0f0      	beq.n	800280a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002828:	4b62      	ldr	r3, [pc, #392]	@ (80029b4 <HAL_RCC_OscConfig+0x504>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	061b      	lsls	r3, r3, #24
 8002836:	495f      	ldr	r1, [pc, #380]	@ (80029b4 <HAL_RCC_OscConfig+0x504>)
 8002838:	4313      	orrs	r3, r2
 800283a:	604b      	str	r3, [r1, #4]
 800283c:	e018      	b.n	8002870 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800283e:	4b5d      	ldr	r3, [pc, #372]	@ (80029b4 <HAL_RCC_OscConfig+0x504>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a5c      	ldr	r2, [pc, #368]	@ (80029b4 <HAL_RCC_OscConfig+0x504>)
 8002844:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002848:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800284a:	f7ff fa41 	bl	8001cd0 <HAL_GetTick>
 800284e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002850:	e008      	b.n	8002864 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002852:	f7ff fa3d 	bl	8001cd0 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d901      	bls.n	8002864 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e1f9      	b.n	8002c58 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002864:	4b53      	ldr	r3, [pc, #332]	@ (80029b4 <HAL_RCC_OscConfig+0x504>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800286c:	2b00      	cmp	r3, #0
 800286e:	d1f0      	bne.n	8002852 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0308 	and.w	r3, r3, #8
 8002878:	2b00      	cmp	r3, #0
 800287a:	d03c      	beq.n	80028f6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	695b      	ldr	r3, [r3, #20]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d01c      	beq.n	80028be <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002884:	4b4b      	ldr	r3, [pc, #300]	@ (80029b4 <HAL_RCC_OscConfig+0x504>)
 8002886:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800288a:	4a4a      	ldr	r2, [pc, #296]	@ (80029b4 <HAL_RCC_OscConfig+0x504>)
 800288c:	f043 0301 	orr.w	r3, r3, #1
 8002890:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002894:	f7ff fa1c 	bl	8001cd0 <HAL_GetTick>
 8002898:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800289a:	e008      	b.n	80028ae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800289c:	f7ff fa18 	bl	8001cd0 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e1d4      	b.n	8002c58 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028ae:	4b41      	ldr	r3, [pc, #260]	@ (80029b4 <HAL_RCC_OscConfig+0x504>)
 80028b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028b4:	f003 0302 	and.w	r3, r3, #2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d0ef      	beq.n	800289c <HAL_RCC_OscConfig+0x3ec>
 80028bc:	e01b      	b.n	80028f6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028be:	4b3d      	ldr	r3, [pc, #244]	@ (80029b4 <HAL_RCC_OscConfig+0x504>)
 80028c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028c4:	4a3b      	ldr	r2, [pc, #236]	@ (80029b4 <HAL_RCC_OscConfig+0x504>)
 80028c6:	f023 0301 	bic.w	r3, r3, #1
 80028ca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ce:	f7ff f9ff 	bl	8001cd0 <HAL_GetTick>
 80028d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028d4:	e008      	b.n	80028e8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028d6:	f7ff f9fb 	bl	8001cd0 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d901      	bls.n	80028e8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	e1b7      	b.n	8002c58 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028e8:	4b32      	ldr	r3, [pc, #200]	@ (80029b4 <HAL_RCC_OscConfig+0x504>)
 80028ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d1ef      	bne.n	80028d6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0304 	and.w	r3, r3, #4
 80028fe:	2b00      	cmp	r3, #0
 8002900:	f000 80a6 	beq.w	8002a50 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002904:	2300      	movs	r3, #0
 8002906:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002908:	4b2a      	ldr	r3, [pc, #168]	@ (80029b4 <HAL_RCC_OscConfig+0x504>)
 800290a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800290c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d10d      	bne.n	8002930 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002914:	4b27      	ldr	r3, [pc, #156]	@ (80029b4 <HAL_RCC_OscConfig+0x504>)
 8002916:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002918:	4a26      	ldr	r2, [pc, #152]	@ (80029b4 <HAL_RCC_OscConfig+0x504>)
 800291a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800291e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002920:	4b24      	ldr	r3, [pc, #144]	@ (80029b4 <HAL_RCC_OscConfig+0x504>)
 8002922:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002924:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002928:	60bb      	str	r3, [r7, #8]
 800292a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800292c:	2301      	movs	r3, #1
 800292e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002930:	4b21      	ldr	r3, [pc, #132]	@ (80029b8 <HAL_RCC_OscConfig+0x508>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002938:	2b00      	cmp	r3, #0
 800293a:	d118      	bne.n	800296e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800293c:	4b1e      	ldr	r3, [pc, #120]	@ (80029b8 <HAL_RCC_OscConfig+0x508>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a1d      	ldr	r2, [pc, #116]	@ (80029b8 <HAL_RCC_OscConfig+0x508>)
 8002942:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002946:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002948:	f7ff f9c2 	bl	8001cd0 <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002950:	f7ff f9be 	bl	8001cd0 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b02      	cmp	r3, #2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e17a      	b.n	8002c58 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002962:	4b15      	ldr	r3, [pc, #84]	@ (80029b8 <HAL_RCC_OscConfig+0x508>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800296a:	2b00      	cmp	r3, #0
 800296c:	d0f0      	beq.n	8002950 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d108      	bne.n	8002988 <HAL_RCC_OscConfig+0x4d8>
 8002976:	4b0f      	ldr	r3, [pc, #60]	@ (80029b4 <HAL_RCC_OscConfig+0x504>)
 8002978:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800297c:	4a0d      	ldr	r2, [pc, #52]	@ (80029b4 <HAL_RCC_OscConfig+0x504>)
 800297e:	f043 0301 	orr.w	r3, r3, #1
 8002982:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002986:	e029      	b.n	80029dc <HAL_RCC_OscConfig+0x52c>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	2b05      	cmp	r3, #5
 800298e:	d115      	bne.n	80029bc <HAL_RCC_OscConfig+0x50c>
 8002990:	4b08      	ldr	r3, [pc, #32]	@ (80029b4 <HAL_RCC_OscConfig+0x504>)
 8002992:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002996:	4a07      	ldr	r2, [pc, #28]	@ (80029b4 <HAL_RCC_OscConfig+0x504>)
 8002998:	f043 0304 	orr.w	r3, r3, #4
 800299c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80029a0:	4b04      	ldr	r3, [pc, #16]	@ (80029b4 <HAL_RCC_OscConfig+0x504>)
 80029a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029a6:	4a03      	ldr	r2, [pc, #12]	@ (80029b4 <HAL_RCC_OscConfig+0x504>)
 80029a8:	f043 0301 	orr.w	r3, r3, #1
 80029ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80029b0:	e014      	b.n	80029dc <HAL_RCC_OscConfig+0x52c>
 80029b2:	bf00      	nop
 80029b4:	40021000 	.word	0x40021000
 80029b8:	40007000 	.word	0x40007000
 80029bc:	4b9c      	ldr	r3, [pc, #624]	@ (8002c30 <HAL_RCC_OscConfig+0x780>)
 80029be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029c2:	4a9b      	ldr	r2, [pc, #620]	@ (8002c30 <HAL_RCC_OscConfig+0x780>)
 80029c4:	f023 0301 	bic.w	r3, r3, #1
 80029c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80029cc:	4b98      	ldr	r3, [pc, #608]	@ (8002c30 <HAL_RCC_OscConfig+0x780>)
 80029ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029d2:	4a97      	ldr	r2, [pc, #604]	@ (8002c30 <HAL_RCC_OscConfig+0x780>)
 80029d4:	f023 0304 	bic.w	r3, r3, #4
 80029d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d016      	beq.n	8002a12 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e4:	f7ff f974 	bl	8001cd0 <HAL_GetTick>
 80029e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029ea:	e00a      	b.n	8002a02 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ec:	f7ff f970 	bl	8001cd0 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e12a      	b.n	8002c58 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a02:	4b8b      	ldr	r3, [pc, #556]	@ (8002c30 <HAL_RCC_OscConfig+0x780>)
 8002a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d0ed      	beq.n	80029ec <HAL_RCC_OscConfig+0x53c>
 8002a10:	e015      	b.n	8002a3e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a12:	f7ff f95d 	bl	8001cd0 <HAL_GetTick>
 8002a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a18:	e00a      	b.n	8002a30 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a1a:	f7ff f959 	bl	8001cd0 <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d901      	bls.n	8002a30 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e113      	b.n	8002c58 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a30:	4b7f      	ldr	r3, [pc, #508]	@ (8002c30 <HAL_RCC_OscConfig+0x780>)
 8002a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1ed      	bne.n	8002a1a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a3e:	7ffb      	ldrb	r3, [r7, #31]
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d105      	bne.n	8002a50 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a44:	4b7a      	ldr	r3, [pc, #488]	@ (8002c30 <HAL_RCC_OscConfig+0x780>)
 8002a46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a48:	4a79      	ldr	r2, [pc, #484]	@ (8002c30 <HAL_RCC_OscConfig+0x780>)
 8002a4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a4e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	f000 80fe 	beq.w	8002c56 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	f040 80d0 	bne.w	8002c04 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002a64:	4b72      	ldr	r3, [pc, #456]	@ (8002c30 <HAL_RCC_OscConfig+0x780>)
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	f003 0203 	and.w	r2, r3, #3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d130      	bne.n	8002ada <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a82:	3b01      	subs	r3, #1
 8002a84:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d127      	bne.n	8002ada <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a94:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d11f      	bne.n	8002ada <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002aa4:	2a07      	cmp	r2, #7
 8002aa6:	bf14      	ite	ne
 8002aa8:	2201      	movne	r2, #1
 8002aaa:	2200      	moveq	r2, #0
 8002aac:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d113      	bne.n	8002ada <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002abc:	085b      	lsrs	r3, r3, #1
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d109      	bne.n	8002ada <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad0:	085b      	lsrs	r3, r3, #1
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d06e      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	2b0c      	cmp	r3, #12
 8002ade:	d069      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002ae0:	4b53      	ldr	r3, [pc, #332]	@ (8002c30 <HAL_RCC_OscConfig+0x780>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d105      	bne.n	8002af8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002aec:	4b50      	ldr	r3, [pc, #320]	@ (8002c30 <HAL_RCC_OscConfig+0x780>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e0ad      	b.n	8002c58 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002afc:	4b4c      	ldr	r3, [pc, #304]	@ (8002c30 <HAL_RCC_OscConfig+0x780>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a4b      	ldr	r2, [pc, #300]	@ (8002c30 <HAL_RCC_OscConfig+0x780>)
 8002b02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b06:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b08:	f7ff f8e2 	bl	8001cd0 <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b10:	f7ff f8de 	bl	8001cd0 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e09a      	b.n	8002c58 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b22:	4b43      	ldr	r3, [pc, #268]	@ (8002c30 <HAL_RCC_OscConfig+0x780>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1f0      	bne.n	8002b10 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b2e:	4b40      	ldr	r3, [pc, #256]	@ (8002c30 <HAL_RCC_OscConfig+0x780>)
 8002b30:	68da      	ldr	r2, [r3, #12]
 8002b32:	4b40      	ldr	r3, [pc, #256]	@ (8002c34 <HAL_RCC_OscConfig+0x784>)
 8002b34:	4013      	ands	r3, r2
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002b3e:	3a01      	subs	r2, #1
 8002b40:	0112      	lsls	r2, r2, #4
 8002b42:	4311      	orrs	r1, r2
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002b48:	0212      	lsls	r2, r2, #8
 8002b4a:	4311      	orrs	r1, r2
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002b50:	0852      	lsrs	r2, r2, #1
 8002b52:	3a01      	subs	r2, #1
 8002b54:	0552      	lsls	r2, r2, #21
 8002b56:	4311      	orrs	r1, r2
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002b5c:	0852      	lsrs	r2, r2, #1
 8002b5e:	3a01      	subs	r2, #1
 8002b60:	0652      	lsls	r2, r2, #25
 8002b62:	4311      	orrs	r1, r2
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002b68:	0912      	lsrs	r2, r2, #4
 8002b6a:	0452      	lsls	r2, r2, #17
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	4930      	ldr	r1, [pc, #192]	@ (8002c30 <HAL_RCC_OscConfig+0x780>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002b74:	4b2e      	ldr	r3, [pc, #184]	@ (8002c30 <HAL_RCC_OscConfig+0x780>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a2d      	ldr	r2, [pc, #180]	@ (8002c30 <HAL_RCC_OscConfig+0x780>)
 8002b7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b7e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b80:	4b2b      	ldr	r3, [pc, #172]	@ (8002c30 <HAL_RCC_OscConfig+0x780>)
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	4a2a      	ldr	r2, [pc, #168]	@ (8002c30 <HAL_RCC_OscConfig+0x780>)
 8002b86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b8a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b8c:	f7ff f8a0 	bl	8001cd0 <HAL_GetTick>
 8002b90:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b94:	f7ff f89c 	bl	8001cd0 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e058      	b.n	8002c58 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ba6:	4b22      	ldr	r3, [pc, #136]	@ (8002c30 <HAL_RCC_OscConfig+0x780>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d0f0      	beq.n	8002b94 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bb2:	e050      	b.n	8002c56 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e04f      	b.n	8002c58 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bb8:	4b1d      	ldr	r3, [pc, #116]	@ (8002c30 <HAL_RCC_OscConfig+0x780>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d148      	bne.n	8002c56 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002bc4:	4b1a      	ldr	r3, [pc, #104]	@ (8002c30 <HAL_RCC_OscConfig+0x780>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a19      	ldr	r2, [pc, #100]	@ (8002c30 <HAL_RCC_OscConfig+0x780>)
 8002bca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bd0:	4b17      	ldr	r3, [pc, #92]	@ (8002c30 <HAL_RCC_OscConfig+0x780>)
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	4a16      	ldr	r2, [pc, #88]	@ (8002c30 <HAL_RCC_OscConfig+0x780>)
 8002bd6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bda:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002bdc:	f7ff f878 	bl	8001cd0 <HAL_GetTick>
 8002be0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002be2:	e008      	b.n	8002bf6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002be4:	f7ff f874 	bl	8001cd0 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e030      	b.n	8002c58 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8002c30 <HAL_RCC_OscConfig+0x780>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d0f0      	beq.n	8002be4 <HAL_RCC_OscConfig+0x734>
 8002c02:	e028      	b.n	8002c56 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	2b0c      	cmp	r3, #12
 8002c08:	d023      	beq.n	8002c52 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c0a:	4b09      	ldr	r3, [pc, #36]	@ (8002c30 <HAL_RCC_OscConfig+0x780>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a08      	ldr	r2, [pc, #32]	@ (8002c30 <HAL_RCC_OscConfig+0x780>)
 8002c10:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c16:	f7ff f85b 	bl	8001cd0 <HAL_GetTick>
 8002c1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c1c:	e00c      	b.n	8002c38 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c1e:	f7ff f857 	bl	8001cd0 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d905      	bls.n	8002c38 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e013      	b.n	8002c58 <HAL_RCC_OscConfig+0x7a8>
 8002c30:	40021000 	.word	0x40021000
 8002c34:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c38:	4b09      	ldr	r3, [pc, #36]	@ (8002c60 <HAL_RCC_OscConfig+0x7b0>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1ec      	bne.n	8002c1e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002c44:	4b06      	ldr	r3, [pc, #24]	@ (8002c60 <HAL_RCC_OscConfig+0x7b0>)
 8002c46:	68da      	ldr	r2, [r3, #12]
 8002c48:	4905      	ldr	r1, [pc, #20]	@ (8002c60 <HAL_RCC_OscConfig+0x7b0>)
 8002c4a:	4b06      	ldr	r3, [pc, #24]	@ (8002c64 <HAL_RCC_OscConfig+0x7b4>)
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	60cb      	str	r3, [r1, #12]
 8002c50:	e001      	b.n	8002c56 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e000      	b.n	8002c58 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3720      	adds	r7, #32
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	40021000 	.word	0x40021000
 8002c64:	feeefffc 	.word	0xfeeefffc

08002c68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d101      	bne.n	8002c7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e0e7      	b.n	8002e4c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c7c:	4b75      	ldr	r3, [pc, #468]	@ (8002e54 <HAL_RCC_ClockConfig+0x1ec>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0307 	and.w	r3, r3, #7
 8002c84:	683a      	ldr	r2, [r7, #0]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d910      	bls.n	8002cac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c8a:	4b72      	ldr	r3, [pc, #456]	@ (8002e54 <HAL_RCC_ClockConfig+0x1ec>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f023 0207 	bic.w	r2, r3, #7
 8002c92:	4970      	ldr	r1, [pc, #448]	@ (8002e54 <HAL_RCC_ClockConfig+0x1ec>)
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c9a:	4b6e      	ldr	r3, [pc, #440]	@ (8002e54 <HAL_RCC_ClockConfig+0x1ec>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0307 	and.w	r3, r3, #7
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d001      	beq.n	8002cac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e0cf      	b.n	8002e4c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d010      	beq.n	8002cda <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	689a      	ldr	r2, [r3, #8]
 8002cbc:	4b66      	ldr	r3, [pc, #408]	@ (8002e58 <HAL_RCC_ClockConfig+0x1f0>)
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d908      	bls.n	8002cda <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cc8:	4b63      	ldr	r3, [pc, #396]	@ (8002e58 <HAL_RCC_ClockConfig+0x1f0>)
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	4960      	ldr	r1, [pc, #384]	@ (8002e58 <HAL_RCC_ClockConfig+0x1f0>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d04c      	beq.n	8002d80 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	2b03      	cmp	r3, #3
 8002cec:	d107      	bne.n	8002cfe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cee:	4b5a      	ldr	r3, [pc, #360]	@ (8002e58 <HAL_RCC_ClockConfig+0x1f0>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d121      	bne.n	8002d3e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e0a6      	b.n	8002e4c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d107      	bne.n	8002d16 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d06:	4b54      	ldr	r3, [pc, #336]	@ (8002e58 <HAL_RCC_ClockConfig+0x1f0>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d115      	bne.n	8002d3e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e09a      	b.n	8002e4c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d107      	bne.n	8002d2e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d1e:	4b4e      	ldr	r3, [pc, #312]	@ (8002e58 <HAL_RCC_ClockConfig+0x1f0>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d109      	bne.n	8002d3e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e08e      	b.n	8002e4c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d2e:	4b4a      	ldr	r3, [pc, #296]	@ (8002e58 <HAL_RCC_ClockConfig+0x1f0>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e086      	b.n	8002e4c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d3e:	4b46      	ldr	r3, [pc, #280]	@ (8002e58 <HAL_RCC_ClockConfig+0x1f0>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f023 0203 	bic.w	r2, r3, #3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	4943      	ldr	r1, [pc, #268]	@ (8002e58 <HAL_RCC_ClockConfig+0x1f0>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d50:	f7fe ffbe 	bl	8001cd0 <HAL_GetTick>
 8002d54:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d56:	e00a      	b.n	8002d6e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d58:	f7fe ffba 	bl	8001cd0 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e06e      	b.n	8002e4c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d6e:	4b3a      	ldr	r3, [pc, #232]	@ (8002e58 <HAL_RCC_ClockConfig+0x1f0>)
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f003 020c 	and.w	r2, r3, #12
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d1eb      	bne.n	8002d58 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0302 	and.w	r3, r3, #2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d010      	beq.n	8002dae <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689a      	ldr	r2, [r3, #8]
 8002d90:	4b31      	ldr	r3, [pc, #196]	@ (8002e58 <HAL_RCC_ClockConfig+0x1f0>)
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d208      	bcs.n	8002dae <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d9c:	4b2e      	ldr	r3, [pc, #184]	@ (8002e58 <HAL_RCC_ClockConfig+0x1f0>)
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	492b      	ldr	r1, [pc, #172]	@ (8002e58 <HAL_RCC_ClockConfig+0x1f0>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dae:	4b29      	ldr	r3, [pc, #164]	@ (8002e54 <HAL_RCC_ClockConfig+0x1ec>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0307 	and.w	r3, r3, #7
 8002db6:	683a      	ldr	r2, [r7, #0]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d210      	bcs.n	8002dde <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dbc:	4b25      	ldr	r3, [pc, #148]	@ (8002e54 <HAL_RCC_ClockConfig+0x1ec>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f023 0207 	bic.w	r2, r3, #7
 8002dc4:	4923      	ldr	r1, [pc, #140]	@ (8002e54 <HAL_RCC_ClockConfig+0x1ec>)
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dcc:	4b21      	ldr	r3, [pc, #132]	@ (8002e54 <HAL_RCC_ClockConfig+0x1ec>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0307 	and.w	r3, r3, #7
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d001      	beq.n	8002dde <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e036      	b.n	8002e4c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0304 	and.w	r3, r3, #4
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d008      	beq.n	8002dfc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dea:	4b1b      	ldr	r3, [pc, #108]	@ (8002e58 <HAL_RCC_ClockConfig+0x1f0>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	4918      	ldr	r1, [pc, #96]	@ (8002e58 <HAL_RCC_ClockConfig+0x1f0>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0308 	and.w	r3, r3, #8
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d009      	beq.n	8002e1c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e08:	4b13      	ldr	r3, [pc, #76]	@ (8002e58 <HAL_RCC_ClockConfig+0x1f0>)
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	00db      	lsls	r3, r3, #3
 8002e16:	4910      	ldr	r1, [pc, #64]	@ (8002e58 <HAL_RCC_ClockConfig+0x1f0>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e1c:	f000 f824 	bl	8002e68 <HAL_RCC_GetSysClockFreq>
 8002e20:	4602      	mov	r2, r0
 8002e22:	4b0d      	ldr	r3, [pc, #52]	@ (8002e58 <HAL_RCC_ClockConfig+0x1f0>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	091b      	lsrs	r3, r3, #4
 8002e28:	f003 030f 	and.w	r3, r3, #15
 8002e2c:	490b      	ldr	r1, [pc, #44]	@ (8002e5c <HAL_RCC_ClockConfig+0x1f4>)
 8002e2e:	5ccb      	ldrb	r3, [r1, r3]
 8002e30:	f003 031f 	and.w	r3, r3, #31
 8002e34:	fa22 f303 	lsr.w	r3, r2, r3
 8002e38:	4a09      	ldr	r2, [pc, #36]	@ (8002e60 <HAL_RCC_ClockConfig+0x1f8>)
 8002e3a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e3c:	4b09      	ldr	r3, [pc, #36]	@ (8002e64 <HAL_RCC_ClockConfig+0x1fc>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7fe fef5 	bl	8001c30 <HAL_InitTick>
 8002e46:	4603      	mov	r3, r0
 8002e48:	72fb      	strb	r3, [r7, #11]

  return status;
 8002e4a:	7afb      	ldrb	r3, [r7, #11]
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3710      	adds	r7, #16
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	40022000 	.word	0x40022000
 8002e58:	40021000 	.word	0x40021000
 8002e5c:	08004cc8 	.word	0x08004cc8
 8002e60:	2000015c 	.word	0x2000015c
 8002e64:	20000160 	.word	0x20000160

08002e68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b089      	sub	sp, #36	@ 0x24
 8002e6c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	61fb      	str	r3, [r7, #28]
 8002e72:	2300      	movs	r3, #0
 8002e74:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e76:	4b3e      	ldr	r3, [pc, #248]	@ (8002f70 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f003 030c 	and.w	r3, r3, #12
 8002e7e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e80:	4b3b      	ldr	r3, [pc, #236]	@ (8002f70 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	f003 0303 	and.w	r3, r3, #3
 8002e88:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d005      	beq.n	8002e9c <HAL_RCC_GetSysClockFreq+0x34>
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	2b0c      	cmp	r3, #12
 8002e94:	d121      	bne.n	8002eda <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d11e      	bne.n	8002eda <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e9c:	4b34      	ldr	r3, [pc, #208]	@ (8002f70 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0308 	and.w	r3, r3, #8
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d107      	bne.n	8002eb8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ea8:	4b31      	ldr	r3, [pc, #196]	@ (8002f70 <HAL_RCC_GetSysClockFreq+0x108>)
 8002eaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002eae:	0a1b      	lsrs	r3, r3, #8
 8002eb0:	f003 030f 	and.w	r3, r3, #15
 8002eb4:	61fb      	str	r3, [r7, #28]
 8002eb6:	e005      	b.n	8002ec4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002eb8:	4b2d      	ldr	r3, [pc, #180]	@ (8002f70 <HAL_RCC_GetSysClockFreq+0x108>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	091b      	lsrs	r3, r3, #4
 8002ebe:	f003 030f 	and.w	r3, r3, #15
 8002ec2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ec4:	4a2b      	ldr	r2, [pc, #172]	@ (8002f74 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ecc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d10d      	bne.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ed8:	e00a      	b.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	2b04      	cmp	r3, #4
 8002ede:	d102      	bne.n	8002ee6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ee0:	4b25      	ldr	r3, [pc, #148]	@ (8002f78 <HAL_RCC_GetSysClockFreq+0x110>)
 8002ee2:	61bb      	str	r3, [r7, #24]
 8002ee4:	e004      	b.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	2b08      	cmp	r3, #8
 8002eea:	d101      	bne.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002eec:	4b23      	ldr	r3, [pc, #140]	@ (8002f7c <HAL_RCC_GetSysClockFreq+0x114>)
 8002eee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	2b0c      	cmp	r3, #12
 8002ef4:	d134      	bne.n	8002f60 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ef6:	4b1e      	ldr	r3, [pc, #120]	@ (8002f70 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	f003 0303 	and.w	r3, r3, #3
 8002efe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d003      	beq.n	8002f0e <HAL_RCC_GetSysClockFreq+0xa6>
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	2b03      	cmp	r3, #3
 8002f0a:	d003      	beq.n	8002f14 <HAL_RCC_GetSysClockFreq+0xac>
 8002f0c:	e005      	b.n	8002f1a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002f0e:	4b1a      	ldr	r3, [pc, #104]	@ (8002f78 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f10:	617b      	str	r3, [r7, #20]
      break;
 8002f12:	e005      	b.n	8002f20 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002f14:	4b19      	ldr	r3, [pc, #100]	@ (8002f7c <HAL_RCC_GetSysClockFreq+0x114>)
 8002f16:	617b      	str	r3, [r7, #20]
      break;
 8002f18:	e002      	b.n	8002f20 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	617b      	str	r3, [r7, #20]
      break;
 8002f1e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f20:	4b13      	ldr	r3, [pc, #76]	@ (8002f70 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	091b      	lsrs	r3, r3, #4
 8002f26:	f003 0307 	and.w	r3, r3, #7
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f2e:	4b10      	ldr	r3, [pc, #64]	@ (8002f70 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	0a1b      	lsrs	r3, r3, #8
 8002f34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f38:	697a      	ldr	r2, [r7, #20]
 8002f3a:	fb03 f202 	mul.w	r2, r3, r2
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f44:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f46:	4b0a      	ldr	r3, [pc, #40]	@ (8002f70 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	0e5b      	lsrs	r3, r3, #25
 8002f4c:	f003 0303 	and.w	r3, r3, #3
 8002f50:	3301      	adds	r3, #1
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f5e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002f60:	69bb      	ldr	r3, [r7, #24]
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3724      	adds	r7, #36	@ 0x24
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	40021000 	.word	0x40021000
 8002f74:	08004cd8 	.word	0x08004cd8
 8002f78:	00f42400 	.word	0x00f42400
 8002f7c:	007a1200 	.word	0x007a1200

08002f80 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f88:	2300      	movs	r3, #0
 8002f8a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f8c:	4b2a      	ldr	r3, [pc, #168]	@ (8003038 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d003      	beq.n	8002fa0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f98:	f7ff f9fa 	bl	8002390 <HAL_PWREx_GetVoltageRange>
 8002f9c:	6178      	str	r0, [r7, #20]
 8002f9e:	e014      	b.n	8002fca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002fa0:	4b25      	ldr	r3, [pc, #148]	@ (8003038 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fa4:	4a24      	ldr	r2, [pc, #144]	@ (8003038 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fa6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002faa:	6593      	str	r3, [r2, #88]	@ 0x58
 8002fac:	4b22      	ldr	r3, [pc, #136]	@ (8003038 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fb4:	60fb      	str	r3, [r7, #12]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002fb8:	f7ff f9ea 	bl	8002390 <HAL_PWREx_GetVoltageRange>
 8002fbc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002fbe:	4b1e      	ldr	r3, [pc, #120]	@ (8003038 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fc2:	4a1d      	ldr	r2, [pc, #116]	@ (8003038 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fc4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fc8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fd0:	d10b      	bne.n	8002fea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b80      	cmp	r3, #128	@ 0x80
 8002fd6:	d919      	bls.n	800300c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2ba0      	cmp	r3, #160	@ 0xa0
 8002fdc:	d902      	bls.n	8002fe4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002fde:	2302      	movs	r3, #2
 8002fe0:	613b      	str	r3, [r7, #16]
 8002fe2:	e013      	b.n	800300c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	613b      	str	r3, [r7, #16]
 8002fe8:	e010      	b.n	800300c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2b80      	cmp	r3, #128	@ 0x80
 8002fee:	d902      	bls.n	8002ff6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	613b      	str	r3, [r7, #16]
 8002ff4:	e00a      	b.n	800300c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2b80      	cmp	r3, #128	@ 0x80
 8002ffa:	d102      	bne.n	8003002 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	613b      	str	r3, [r7, #16]
 8003000:	e004      	b.n	800300c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2b70      	cmp	r3, #112	@ 0x70
 8003006:	d101      	bne.n	800300c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003008:	2301      	movs	r3, #1
 800300a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800300c:	4b0b      	ldr	r3, [pc, #44]	@ (800303c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f023 0207 	bic.w	r2, r3, #7
 8003014:	4909      	ldr	r1, [pc, #36]	@ (800303c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	4313      	orrs	r3, r2
 800301a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800301c:	4b07      	ldr	r3, [pc, #28]	@ (800303c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0307 	and.w	r3, r3, #7
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	429a      	cmp	r2, r3
 8003028:	d001      	beq.n	800302e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e000      	b.n	8003030 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	3718      	adds	r7, #24
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	40021000 	.word	0x40021000
 800303c:	40022000 	.word	0x40022000

08003040 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e095      	b.n	800317e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003056:	2b00      	cmp	r3, #0
 8003058:	d108      	bne.n	800306c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003062:	d009      	beq.n	8003078 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	61da      	str	r2, [r3, #28]
 800306a:	e005      	b.n	8003078 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d106      	bne.n	8003098 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f7fe fb94 	bl	80017c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2202      	movs	r2, #2
 800309c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80030ae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80030b8:	d902      	bls.n	80030c0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80030ba:	2300      	movs	r3, #0
 80030bc:	60fb      	str	r3, [r7, #12]
 80030be:	e002      	b.n	80030c6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80030c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80030c4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80030ce:	d007      	beq.n	80030e0 <HAL_SPI_Init+0xa0>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80030d8:	d002      	beq.n	80030e0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80030f0:	431a      	orrs	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	431a      	orrs	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	695b      	ldr	r3, [r3, #20]
 8003100:	f003 0301 	and.w	r3, r3, #1
 8003104:	431a      	orrs	r2, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800310e:	431a      	orrs	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	69db      	ldr	r3, [r3, #28]
 8003114:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003118:	431a      	orrs	r2, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003122:	ea42 0103 	orr.w	r1, r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800312a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	430a      	orrs	r2, r1
 8003134:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	0c1b      	lsrs	r3, r3, #16
 800313c:	f003 0204 	and.w	r2, r3, #4
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003144:	f003 0310 	and.w	r3, r3, #16
 8003148:	431a      	orrs	r2, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800314e:	f003 0308 	and.w	r3, r3, #8
 8003152:	431a      	orrs	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800315c:	ea42 0103 	orr.w	r1, r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	430a      	orrs	r2, r1
 800316c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	b088      	sub	sp, #32
 800318a:	af00      	add	r7, sp, #0
 800318c:	60f8      	str	r0, [r7, #12]
 800318e:	60b9      	str	r1, [r7, #8]
 8003190:	603b      	str	r3, [r7, #0]
 8003192:	4613      	mov	r3, r2
 8003194:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003196:	2300      	movs	r3, #0
 8003198:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d101      	bne.n	80031a8 <HAL_SPI_Transmit+0x22>
 80031a4:	2302      	movs	r3, #2
 80031a6:	e15f      	b.n	8003468 <HAL_SPI_Transmit+0x2e2>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031b0:	f7fe fd8e 	bl	8001cd0 <HAL_GetTick>
 80031b4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80031b6:	88fb      	ldrh	r3, [r7, #6]
 80031b8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d002      	beq.n	80031cc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80031c6:	2302      	movs	r3, #2
 80031c8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80031ca:	e148      	b.n	800345e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d002      	beq.n	80031d8 <HAL_SPI_Transmit+0x52>
 80031d2:	88fb      	ldrh	r3, [r7, #6]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d102      	bne.n	80031de <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	77fb      	strb	r3, [r7, #31]
    goto error;
 80031dc:	e13f      	b.n	800345e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2203      	movs	r2, #3
 80031e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	68ba      	ldr	r2, [r7, #8]
 80031f0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	88fa      	ldrh	r2, [r7, #6]
 80031f6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	88fa      	ldrh	r2, [r7, #6]
 80031fc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003228:	d10f      	bne.n	800324a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003238:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003248:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003254:	2b40      	cmp	r3, #64	@ 0x40
 8003256:	d007      	beq.n	8003268 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003266:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003270:	d94f      	bls.n	8003312 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d002      	beq.n	8003280 <HAL_SPI_Transmit+0xfa>
 800327a:	8afb      	ldrh	r3, [r7, #22]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d142      	bne.n	8003306 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003284:	881a      	ldrh	r2, [r3, #0]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003290:	1c9a      	adds	r2, r3, #2
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800329a:	b29b      	uxth	r3, r3
 800329c:	3b01      	subs	r3, #1
 800329e:	b29a      	uxth	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80032a4:	e02f      	b.n	8003306 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f003 0302 	and.w	r3, r3, #2
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d112      	bne.n	80032da <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032b8:	881a      	ldrh	r2, [r3, #0]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032c4:	1c9a      	adds	r2, r3, #2
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	3b01      	subs	r3, #1
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80032d8:	e015      	b.n	8003306 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032da:	f7fe fcf9 	bl	8001cd0 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d803      	bhi.n	80032f2 <HAL_SPI_Transmit+0x16c>
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f0:	d102      	bne.n	80032f8 <HAL_SPI_Transmit+0x172>
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d106      	bne.n	8003306 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003304:	e0ab      	b.n	800345e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800330a:	b29b      	uxth	r3, r3
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1ca      	bne.n	80032a6 <HAL_SPI_Transmit+0x120>
 8003310:	e080      	b.n	8003414 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d002      	beq.n	8003320 <HAL_SPI_Transmit+0x19a>
 800331a:	8afb      	ldrh	r3, [r7, #22]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d174      	bne.n	800340a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003324:	b29b      	uxth	r3, r3
 8003326:	2b01      	cmp	r3, #1
 8003328:	d912      	bls.n	8003350 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800332e:	881a      	ldrh	r2, [r3, #0]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800333a:	1c9a      	adds	r2, r3, #2
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003344:	b29b      	uxth	r3, r3
 8003346:	3b02      	subs	r3, #2
 8003348:	b29a      	uxth	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800334e:	e05c      	b.n	800340a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	330c      	adds	r3, #12
 800335a:	7812      	ldrb	r2, [r2, #0]
 800335c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003362:	1c5a      	adds	r2, r3, #1
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800336c:	b29b      	uxth	r3, r3
 800336e:	3b01      	subs	r3, #1
 8003370:	b29a      	uxth	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003376:	e048      	b.n	800340a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	2b02      	cmp	r3, #2
 8003384:	d12b      	bne.n	80033de <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800338a:	b29b      	uxth	r3, r3
 800338c:	2b01      	cmp	r3, #1
 800338e:	d912      	bls.n	80033b6 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003394:	881a      	ldrh	r2, [r3, #0]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033a0:	1c9a      	adds	r2, r3, #2
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	3b02      	subs	r3, #2
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80033b4:	e029      	b.n	800340a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	330c      	adds	r3, #12
 80033c0:	7812      	ldrb	r2, [r2, #0]
 80033c2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033c8:	1c5a      	adds	r2, r3, #1
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	3b01      	subs	r3, #1
 80033d6:	b29a      	uxth	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80033dc:	e015      	b.n	800340a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033de:	f7fe fc77 	bl	8001cd0 <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	683a      	ldr	r2, [r7, #0]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d803      	bhi.n	80033f6 <HAL_SPI_Transmit+0x270>
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f4:	d102      	bne.n	80033fc <HAL_SPI_Transmit+0x276>
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d106      	bne.n	800340a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003408:	e029      	b.n	800345e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800340e:	b29b      	uxth	r3, r3
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1b1      	bne.n	8003378 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	6839      	ldr	r1, [r7, #0]
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f000 fb69 	bl	8003af0 <SPI_EndRxTxTransaction>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d002      	beq.n	800342a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2220      	movs	r2, #32
 8003428:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d10a      	bne.n	8003448 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003432:	2300      	movs	r3, #0
 8003434:	613b      	str	r3, [r7, #16]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	613b      	str	r3, [r7, #16]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	613b      	str	r3, [r7, #16]
 8003446:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800344c:	2b00      	cmp	r3, #0
 800344e:	d002      	beq.n	8003456 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	77fb      	strb	r3, [r7, #31]
 8003454:	e003      	b.n	800345e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003466:	7ffb      	ldrb	r3, [r7, #31]
}
 8003468:	4618      	mov	r0, r3
 800346a:	3720      	adds	r7, #32
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b08a      	sub	sp, #40	@ 0x28
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	607a      	str	r2, [r7, #4]
 800347c:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800347e:	2301      	movs	r3, #1
 8003480:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003482:	2300      	movs	r3, #0
 8003484:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800348e:	2b01      	cmp	r3, #1
 8003490:	d101      	bne.n	8003496 <HAL_SPI_TransmitReceive+0x26>
 8003492:	2302      	movs	r3, #2
 8003494:	e20a      	b.n	80038ac <HAL_SPI_TransmitReceive+0x43c>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2201      	movs	r2, #1
 800349a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800349e:	f7fe fc17 	bl	8001cd0 <HAL_GetTick>
 80034a2:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80034aa:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80034b2:	887b      	ldrh	r3, [r7, #2]
 80034b4:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80034b6:	887b      	ldrh	r3, [r7, #2]
 80034b8:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80034ba:	7efb      	ldrb	r3, [r7, #27]
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d00e      	beq.n	80034de <HAL_SPI_TransmitReceive+0x6e>
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80034c6:	d106      	bne.n	80034d6 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d102      	bne.n	80034d6 <HAL_SPI_TransmitReceive+0x66>
 80034d0:	7efb      	ldrb	r3, [r7, #27]
 80034d2:	2b04      	cmp	r3, #4
 80034d4:	d003      	beq.n	80034de <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80034d6:	2302      	movs	r3, #2
 80034d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80034dc:	e1e0      	b.n	80038a0 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d005      	beq.n	80034f0 <HAL_SPI_TransmitReceive+0x80>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d002      	beq.n	80034f0 <HAL_SPI_TransmitReceive+0x80>
 80034ea:	887b      	ldrh	r3, [r7, #2]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d103      	bne.n	80034f8 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80034f6:	e1d3      	b.n	80038a0 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	2b04      	cmp	r3, #4
 8003502:	d003      	beq.n	800350c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2205      	movs	r2, #5
 8003508:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2200      	movs	r2, #0
 8003510:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	887a      	ldrh	r2, [r7, #2]
 800351c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	887a      	ldrh	r2, [r7, #2]
 8003524:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	68ba      	ldr	r2, [r7, #8]
 800352c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	887a      	ldrh	r2, [r7, #2]
 8003532:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	887a      	ldrh	r2, [r7, #2]
 8003538:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2200      	movs	r2, #0
 8003544:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800354e:	d802      	bhi.n	8003556 <HAL_SPI_TransmitReceive+0xe6>
 8003550:	8a3b      	ldrh	r3, [r7, #16]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d908      	bls.n	8003568 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	685a      	ldr	r2, [r3, #4]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003564:	605a      	str	r2, [r3, #4]
 8003566:	e007      	b.n	8003578 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	685a      	ldr	r2, [r3, #4]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003576:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003582:	2b40      	cmp	r3, #64	@ 0x40
 8003584:	d007      	beq.n	8003596 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003594:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800359e:	f240 8081 	bls.w	80036a4 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d002      	beq.n	80035b0 <HAL_SPI_TransmitReceive+0x140>
 80035aa:	8a7b      	ldrh	r3, [r7, #18]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d16d      	bne.n	800368c <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035b4:	881a      	ldrh	r2, [r3, #0]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035c0:	1c9a      	adds	r2, r3, #2
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	3b01      	subs	r3, #1
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035d4:	e05a      	b.n	800368c <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d11b      	bne.n	800361c <HAL_SPI_TransmitReceive+0x1ac>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d016      	beq.n	800361c <HAL_SPI_TransmitReceive+0x1ac>
 80035ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d113      	bne.n	800361c <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035f8:	881a      	ldrh	r2, [r3, #0]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003604:	1c9a      	adds	r2, r3, #2
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800360e:	b29b      	uxth	r3, r3
 8003610:	3b01      	subs	r3, #1
 8003612:	b29a      	uxth	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003618:	2300      	movs	r3, #0
 800361a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	2b01      	cmp	r3, #1
 8003628:	d11c      	bne.n	8003664 <HAL_SPI_TransmitReceive+0x1f4>
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003630:	b29b      	uxth	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d016      	beq.n	8003664 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68da      	ldr	r2, [r3, #12]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003640:	b292      	uxth	r2, r2
 8003642:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003648:	1c9a      	adds	r2, r3, #2
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003654:	b29b      	uxth	r3, r3
 8003656:	3b01      	subs	r3, #1
 8003658:	b29a      	uxth	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003660:	2301      	movs	r3, #1
 8003662:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003664:	f7fe fb34 	bl	8001cd0 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003670:	429a      	cmp	r2, r3
 8003672:	d80b      	bhi.n	800368c <HAL_SPI_TransmitReceive+0x21c>
 8003674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800367a:	d007      	beq.n	800368c <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800368a:	e109      	b.n	80038a0 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003690:	b29b      	uxth	r3, r3
 8003692:	2b00      	cmp	r3, #0
 8003694:	d19f      	bne.n	80035d6 <HAL_SPI_TransmitReceive+0x166>
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800369c:	b29b      	uxth	r3, r3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d199      	bne.n	80035d6 <HAL_SPI_TransmitReceive+0x166>
 80036a2:	e0e3      	b.n	800386c <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d003      	beq.n	80036b4 <HAL_SPI_TransmitReceive+0x244>
 80036ac:	8a7b      	ldrh	r3, [r7, #18]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	f040 80cf 	bne.w	8003852 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d912      	bls.n	80036e4 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036c2:	881a      	ldrh	r2, [r3, #0]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036ce:	1c9a      	adds	r2, r3, #2
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036d8:	b29b      	uxth	r3, r3
 80036da:	3b02      	subs	r3, #2
 80036dc:	b29a      	uxth	r2, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80036e2:	e0b6      	b.n	8003852 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	330c      	adds	r3, #12
 80036ee:	7812      	ldrb	r2, [r2, #0]
 80036f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036f6:	1c5a      	adds	r2, r3, #1
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003700:	b29b      	uxth	r3, r3
 8003702:	3b01      	subs	r3, #1
 8003704:	b29a      	uxth	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800370a:	e0a2      	b.n	8003852 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b02      	cmp	r3, #2
 8003718:	d134      	bne.n	8003784 <HAL_SPI_TransmitReceive+0x314>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800371e:	b29b      	uxth	r3, r3
 8003720:	2b00      	cmp	r3, #0
 8003722:	d02f      	beq.n	8003784 <HAL_SPI_TransmitReceive+0x314>
 8003724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003726:	2b01      	cmp	r3, #1
 8003728:	d12c      	bne.n	8003784 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800372e:	b29b      	uxth	r3, r3
 8003730:	2b01      	cmp	r3, #1
 8003732:	d912      	bls.n	800375a <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003738:	881a      	ldrh	r2, [r3, #0]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003744:	1c9a      	adds	r2, r3, #2
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800374e:	b29b      	uxth	r3, r3
 8003750:	3b02      	subs	r3, #2
 8003752:	b29a      	uxth	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003758:	e012      	b.n	8003780 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	330c      	adds	r3, #12
 8003764:	7812      	ldrb	r2, [r2, #0]
 8003766:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800376c:	1c5a      	adds	r2, r3, #1
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003776:	b29b      	uxth	r3, r3
 8003778:	3b01      	subs	r3, #1
 800377a:	b29a      	uxth	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003780:	2300      	movs	r3, #0
 8003782:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	2b01      	cmp	r3, #1
 8003790:	d148      	bne.n	8003824 <HAL_SPI_TransmitReceive+0x3b4>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003798:	b29b      	uxth	r3, r3
 800379a:	2b00      	cmp	r3, #0
 800379c:	d042      	beq.n	8003824 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d923      	bls.n	80037f2 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68da      	ldr	r2, [r3, #12]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b4:	b292      	uxth	r2, r2
 80037b6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037bc:	1c9a      	adds	r2, r3, #2
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	3b02      	subs	r3, #2
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80037da:	b29b      	uxth	r3, r3
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d81f      	bhi.n	8003820 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	685a      	ldr	r2, [r3, #4]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80037ee:	605a      	str	r2, [r3, #4]
 80037f0:	e016      	b.n	8003820 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f103 020c 	add.w	r2, r3, #12
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fe:	7812      	ldrb	r2, [r2, #0]
 8003800:	b2d2      	uxtb	r2, r2
 8003802:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003808:	1c5a      	adds	r2, r3, #1
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003814:	b29b      	uxth	r3, r3
 8003816:	3b01      	subs	r3, #1
 8003818:	b29a      	uxth	r2, r3
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003820:	2301      	movs	r3, #1
 8003822:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003824:	f7fe fa54 	bl	8001cd0 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003830:	429a      	cmp	r2, r3
 8003832:	d803      	bhi.n	800383c <HAL_SPI_TransmitReceive+0x3cc>
 8003834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800383a:	d102      	bne.n	8003842 <HAL_SPI_TransmitReceive+0x3d2>
 800383c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800383e:	2b00      	cmp	r3, #0
 8003840:	d107      	bne.n	8003852 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003850:	e026      	b.n	80038a0 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003856:	b29b      	uxth	r3, r3
 8003858:	2b00      	cmp	r3, #0
 800385a:	f47f af57 	bne.w	800370c <HAL_SPI_TransmitReceive+0x29c>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003864:	b29b      	uxth	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	f47f af50 	bne.w	800370c <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800386c:	69fa      	ldr	r2, [r7, #28]
 800386e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003870:	68f8      	ldr	r0, [r7, #12]
 8003872:	f000 f93d 	bl	8003af0 <SPI_EndRxTxTransaction>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d005      	beq.n	8003888 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2220      	movs	r2, #32
 8003886:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800388c:	2b00      	cmp	r3, #0
 800388e:	d003      	beq.n	8003898 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003896:	e003      	b.n	80038a0 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80038a8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3728      	adds	r7, #40	@ 0x28
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b088      	sub	sp, #32
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	603b      	str	r3, [r7, #0]
 80038c0:	4613      	mov	r3, r2
 80038c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80038c4:	f7fe fa04 	bl	8001cd0 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038cc:	1a9b      	subs	r3, r3, r2
 80038ce:	683a      	ldr	r2, [r7, #0]
 80038d0:	4413      	add	r3, r2
 80038d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80038d4:	f7fe f9fc 	bl	8001cd0 <HAL_GetTick>
 80038d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80038da:	4b39      	ldr	r3, [pc, #228]	@ (80039c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	015b      	lsls	r3, r3, #5
 80038e0:	0d1b      	lsrs	r3, r3, #20
 80038e2:	69fa      	ldr	r2, [r7, #28]
 80038e4:	fb02 f303 	mul.w	r3, r2, r3
 80038e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038ea:	e054      	b.n	8003996 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f2:	d050      	beq.n	8003996 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80038f4:	f7fe f9ec 	bl	8001cd0 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	69fa      	ldr	r2, [r7, #28]
 8003900:	429a      	cmp	r2, r3
 8003902:	d902      	bls.n	800390a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d13d      	bne.n	8003986 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	685a      	ldr	r2, [r3, #4]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003918:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003922:	d111      	bne.n	8003948 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800392c:	d004      	beq.n	8003938 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003936:	d107      	bne.n	8003948 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003946:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800394c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003950:	d10f      	bne.n	8003972 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003960:	601a      	str	r2, [r3, #0]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003970:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2201      	movs	r2, #1
 8003976:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e017      	b.n	80039b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d101      	bne.n	8003990 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800398c:	2300      	movs	r3, #0
 800398e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	3b01      	subs	r3, #1
 8003994:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	689a      	ldr	r2, [r3, #8]
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	4013      	ands	r3, r2
 80039a0:	68ba      	ldr	r2, [r7, #8]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	bf0c      	ite	eq
 80039a6:	2301      	moveq	r3, #1
 80039a8:	2300      	movne	r3, #0
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	461a      	mov	r2, r3
 80039ae:	79fb      	ldrb	r3, [r7, #7]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d19b      	bne.n	80038ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3720      	adds	r7, #32
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	2000015c 	.word	0x2000015c

080039c4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b08a      	sub	sp, #40	@ 0x28
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	607a      	str	r2, [r7, #4]
 80039d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80039d2:	2300      	movs	r3, #0
 80039d4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80039d6:	f7fe f97b 	bl	8001cd0 <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039de:	1a9b      	subs	r3, r3, r2
 80039e0:	683a      	ldr	r2, [r7, #0]
 80039e2:	4413      	add	r3, r2
 80039e4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80039e6:	f7fe f973 	bl	8001cd0 <HAL_GetTick>
 80039ea:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	330c      	adds	r3, #12
 80039f2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80039f4:	4b3d      	ldr	r3, [pc, #244]	@ (8003aec <SPI_WaitFifoStateUntilTimeout+0x128>)
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	4613      	mov	r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	4413      	add	r3, r2
 80039fe:	00da      	lsls	r2, r3, #3
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	0d1b      	lsrs	r3, r3, #20
 8003a04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a06:	fb02 f303 	mul.w	r3, r2, r3
 8003a0a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003a0c:	e060      	b.n	8003ad0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003a14:	d107      	bne.n	8003a26 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d104      	bne.n	8003a26 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003a24:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a2c:	d050      	beq.n	8003ad0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a2e:	f7fe f94f 	bl	8001cd0 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	6a3b      	ldr	r3, [r7, #32]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d902      	bls.n	8003a44 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d13d      	bne.n	8003ac0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	685a      	ldr	r2, [r3, #4]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003a52:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a5c:	d111      	bne.n	8003a82 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a66:	d004      	beq.n	8003a72 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a70:	d107      	bne.n	8003a82 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a80:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a8a:	d10f      	bne.n	8003aac <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a9a:	601a      	str	r2, [r3, #0]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003aaa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	e010      	b.n	8003ae2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d101      	bne.n	8003aca <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	3b01      	subs	r3, #1
 8003ace:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	689a      	ldr	r2, [r3, #8]
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d196      	bne.n	8003a0e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3728      	adds	r7, #40	@ 0x28
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	2000015c 	.word	0x2000015c

08003af0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b086      	sub	sp, #24
 8003af4:	af02      	add	r7, sp, #8
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	9300      	str	r3, [sp, #0]
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003b08:	68f8      	ldr	r0, [r7, #12]
 8003b0a:	f7ff ff5b 	bl	80039c4 <SPI_WaitFifoStateUntilTimeout>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d007      	beq.n	8003b24 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b18:	f043 0220 	orr.w	r2, r3, #32
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e027      	b.n	8003b74 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	9300      	str	r3, [sp, #0]
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	2180      	movs	r1, #128	@ 0x80
 8003b2e:	68f8      	ldr	r0, [r7, #12]
 8003b30:	f7ff fec0 	bl	80038b4 <SPI_WaitFlagStateUntilTimeout>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d007      	beq.n	8003b4a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b3e:	f043 0220 	orr.w	r2, r3, #32
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e014      	b.n	8003b74 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	9300      	str	r3, [sp, #0]
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003b56:	68f8      	ldr	r0, [r7, #12]
 8003b58:	f7ff ff34 	bl	80039c4 <SPI_WaitFifoStateUntilTimeout>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d007      	beq.n	8003b72 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b66:	f043 0220 	orr.w	r2, r3, #32
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e000      	b.n	8003b74 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3710      	adds	r7, #16
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <malloc>:
 8003b7c:	4b02      	ldr	r3, [pc, #8]	@ (8003b88 <malloc+0xc>)
 8003b7e:	4601      	mov	r1, r0
 8003b80:	6818      	ldr	r0, [r3, #0]
 8003b82:	f000 b82d 	b.w	8003be0 <_malloc_r>
 8003b86:	bf00      	nop
 8003b88:	20000174 	.word	0x20000174

08003b8c <free>:
 8003b8c:	4b02      	ldr	r3, [pc, #8]	@ (8003b98 <free+0xc>)
 8003b8e:	4601      	mov	r1, r0
 8003b90:	6818      	ldr	r0, [r3, #0]
 8003b92:	f000 bb77 	b.w	8004284 <_free_r>
 8003b96:	bf00      	nop
 8003b98:	20000174 	.word	0x20000174

08003b9c <sbrk_aligned>:
 8003b9c:	b570      	push	{r4, r5, r6, lr}
 8003b9e:	4e0f      	ldr	r6, [pc, #60]	@ (8003bdc <sbrk_aligned+0x40>)
 8003ba0:	460c      	mov	r4, r1
 8003ba2:	6831      	ldr	r1, [r6, #0]
 8003ba4:	4605      	mov	r5, r0
 8003ba6:	b911      	cbnz	r1, 8003bae <sbrk_aligned+0x12>
 8003ba8:	f000 fb0e 	bl	80041c8 <_sbrk_r>
 8003bac:	6030      	str	r0, [r6, #0]
 8003bae:	4621      	mov	r1, r4
 8003bb0:	4628      	mov	r0, r5
 8003bb2:	f000 fb09 	bl	80041c8 <_sbrk_r>
 8003bb6:	1c43      	adds	r3, r0, #1
 8003bb8:	d103      	bne.n	8003bc2 <sbrk_aligned+0x26>
 8003bba:	f04f 34ff 	mov.w	r4, #4294967295
 8003bbe:	4620      	mov	r0, r4
 8003bc0:	bd70      	pop	{r4, r5, r6, pc}
 8003bc2:	1cc4      	adds	r4, r0, #3
 8003bc4:	f024 0403 	bic.w	r4, r4, #3
 8003bc8:	42a0      	cmp	r0, r4
 8003bca:	d0f8      	beq.n	8003bbe <sbrk_aligned+0x22>
 8003bcc:	1a21      	subs	r1, r4, r0
 8003bce:	4628      	mov	r0, r5
 8003bd0:	f000 fafa 	bl	80041c8 <_sbrk_r>
 8003bd4:	3001      	adds	r0, #1
 8003bd6:	d1f2      	bne.n	8003bbe <sbrk_aligned+0x22>
 8003bd8:	e7ef      	b.n	8003bba <sbrk_aligned+0x1e>
 8003bda:	bf00      	nop
 8003bdc:	20000378 	.word	0x20000378

08003be0 <_malloc_r>:
 8003be0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003be4:	1ccd      	adds	r5, r1, #3
 8003be6:	f025 0503 	bic.w	r5, r5, #3
 8003bea:	3508      	adds	r5, #8
 8003bec:	2d0c      	cmp	r5, #12
 8003bee:	bf38      	it	cc
 8003bf0:	250c      	movcc	r5, #12
 8003bf2:	2d00      	cmp	r5, #0
 8003bf4:	4606      	mov	r6, r0
 8003bf6:	db01      	blt.n	8003bfc <_malloc_r+0x1c>
 8003bf8:	42a9      	cmp	r1, r5
 8003bfa:	d904      	bls.n	8003c06 <_malloc_r+0x26>
 8003bfc:	230c      	movs	r3, #12
 8003bfe:	6033      	str	r3, [r6, #0]
 8003c00:	2000      	movs	r0, #0
 8003c02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003cdc <_malloc_r+0xfc>
 8003c0a:	f000 f869 	bl	8003ce0 <__malloc_lock>
 8003c0e:	f8d8 3000 	ldr.w	r3, [r8]
 8003c12:	461c      	mov	r4, r3
 8003c14:	bb44      	cbnz	r4, 8003c68 <_malloc_r+0x88>
 8003c16:	4629      	mov	r1, r5
 8003c18:	4630      	mov	r0, r6
 8003c1a:	f7ff ffbf 	bl	8003b9c <sbrk_aligned>
 8003c1e:	1c43      	adds	r3, r0, #1
 8003c20:	4604      	mov	r4, r0
 8003c22:	d158      	bne.n	8003cd6 <_malloc_r+0xf6>
 8003c24:	f8d8 4000 	ldr.w	r4, [r8]
 8003c28:	4627      	mov	r7, r4
 8003c2a:	2f00      	cmp	r7, #0
 8003c2c:	d143      	bne.n	8003cb6 <_malloc_r+0xd6>
 8003c2e:	2c00      	cmp	r4, #0
 8003c30:	d04b      	beq.n	8003cca <_malloc_r+0xea>
 8003c32:	6823      	ldr	r3, [r4, #0]
 8003c34:	4639      	mov	r1, r7
 8003c36:	4630      	mov	r0, r6
 8003c38:	eb04 0903 	add.w	r9, r4, r3
 8003c3c:	f000 fac4 	bl	80041c8 <_sbrk_r>
 8003c40:	4581      	cmp	r9, r0
 8003c42:	d142      	bne.n	8003cca <_malloc_r+0xea>
 8003c44:	6821      	ldr	r1, [r4, #0]
 8003c46:	1a6d      	subs	r5, r5, r1
 8003c48:	4629      	mov	r1, r5
 8003c4a:	4630      	mov	r0, r6
 8003c4c:	f7ff ffa6 	bl	8003b9c <sbrk_aligned>
 8003c50:	3001      	adds	r0, #1
 8003c52:	d03a      	beq.n	8003cca <_malloc_r+0xea>
 8003c54:	6823      	ldr	r3, [r4, #0]
 8003c56:	442b      	add	r3, r5
 8003c58:	6023      	str	r3, [r4, #0]
 8003c5a:	f8d8 3000 	ldr.w	r3, [r8]
 8003c5e:	685a      	ldr	r2, [r3, #4]
 8003c60:	bb62      	cbnz	r2, 8003cbc <_malloc_r+0xdc>
 8003c62:	f8c8 7000 	str.w	r7, [r8]
 8003c66:	e00f      	b.n	8003c88 <_malloc_r+0xa8>
 8003c68:	6822      	ldr	r2, [r4, #0]
 8003c6a:	1b52      	subs	r2, r2, r5
 8003c6c:	d420      	bmi.n	8003cb0 <_malloc_r+0xd0>
 8003c6e:	2a0b      	cmp	r2, #11
 8003c70:	d917      	bls.n	8003ca2 <_malloc_r+0xc2>
 8003c72:	1961      	adds	r1, r4, r5
 8003c74:	42a3      	cmp	r3, r4
 8003c76:	6025      	str	r5, [r4, #0]
 8003c78:	bf18      	it	ne
 8003c7a:	6059      	strne	r1, [r3, #4]
 8003c7c:	6863      	ldr	r3, [r4, #4]
 8003c7e:	bf08      	it	eq
 8003c80:	f8c8 1000 	streq.w	r1, [r8]
 8003c84:	5162      	str	r2, [r4, r5]
 8003c86:	604b      	str	r3, [r1, #4]
 8003c88:	4630      	mov	r0, r6
 8003c8a:	f000 f82f 	bl	8003cec <__malloc_unlock>
 8003c8e:	f104 000b 	add.w	r0, r4, #11
 8003c92:	1d23      	adds	r3, r4, #4
 8003c94:	f020 0007 	bic.w	r0, r0, #7
 8003c98:	1ac2      	subs	r2, r0, r3
 8003c9a:	bf1c      	itt	ne
 8003c9c:	1a1b      	subne	r3, r3, r0
 8003c9e:	50a3      	strne	r3, [r4, r2]
 8003ca0:	e7af      	b.n	8003c02 <_malloc_r+0x22>
 8003ca2:	6862      	ldr	r2, [r4, #4]
 8003ca4:	42a3      	cmp	r3, r4
 8003ca6:	bf0c      	ite	eq
 8003ca8:	f8c8 2000 	streq.w	r2, [r8]
 8003cac:	605a      	strne	r2, [r3, #4]
 8003cae:	e7eb      	b.n	8003c88 <_malloc_r+0xa8>
 8003cb0:	4623      	mov	r3, r4
 8003cb2:	6864      	ldr	r4, [r4, #4]
 8003cb4:	e7ae      	b.n	8003c14 <_malloc_r+0x34>
 8003cb6:	463c      	mov	r4, r7
 8003cb8:	687f      	ldr	r7, [r7, #4]
 8003cba:	e7b6      	b.n	8003c2a <_malloc_r+0x4a>
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	42a3      	cmp	r3, r4
 8003cc2:	d1fb      	bne.n	8003cbc <_malloc_r+0xdc>
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	6053      	str	r3, [r2, #4]
 8003cc8:	e7de      	b.n	8003c88 <_malloc_r+0xa8>
 8003cca:	230c      	movs	r3, #12
 8003ccc:	6033      	str	r3, [r6, #0]
 8003cce:	4630      	mov	r0, r6
 8003cd0:	f000 f80c 	bl	8003cec <__malloc_unlock>
 8003cd4:	e794      	b.n	8003c00 <_malloc_r+0x20>
 8003cd6:	6005      	str	r5, [r0, #0]
 8003cd8:	e7d6      	b.n	8003c88 <_malloc_r+0xa8>
 8003cda:	bf00      	nop
 8003cdc:	2000037c 	.word	0x2000037c

08003ce0 <__malloc_lock>:
 8003ce0:	4801      	ldr	r0, [pc, #4]	@ (8003ce8 <__malloc_lock+0x8>)
 8003ce2:	f000 babe 	b.w	8004262 <__retarget_lock_acquire_recursive>
 8003ce6:	bf00      	nop
 8003ce8:	200004c0 	.word	0x200004c0

08003cec <__malloc_unlock>:
 8003cec:	4801      	ldr	r0, [pc, #4]	@ (8003cf4 <__malloc_unlock+0x8>)
 8003cee:	f000 bab9 	b.w	8004264 <__retarget_lock_release_recursive>
 8003cf2:	bf00      	nop
 8003cf4:	200004c0 	.word	0x200004c0

08003cf8 <std>:
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	b510      	push	{r4, lr}
 8003cfc:	4604      	mov	r4, r0
 8003cfe:	e9c0 3300 	strd	r3, r3, [r0]
 8003d02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003d06:	6083      	str	r3, [r0, #8]
 8003d08:	8181      	strh	r1, [r0, #12]
 8003d0a:	6643      	str	r3, [r0, #100]	@ 0x64
 8003d0c:	81c2      	strh	r2, [r0, #14]
 8003d0e:	6183      	str	r3, [r0, #24]
 8003d10:	4619      	mov	r1, r3
 8003d12:	2208      	movs	r2, #8
 8003d14:	305c      	adds	r0, #92	@ 0x5c
 8003d16:	f000 fa1b 	bl	8004150 <memset>
 8003d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8003d50 <std+0x58>)
 8003d1c:	6263      	str	r3, [r4, #36]	@ 0x24
 8003d1e:	4b0d      	ldr	r3, [pc, #52]	@ (8003d54 <std+0x5c>)
 8003d20:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003d22:	4b0d      	ldr	r3, [pc, #52]	@ (8003d58 <std+0x60>)
 8003d24:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003d26:	4b0d      	ldr	r3, [pc, #52]	@ (8003d5c <std+0x64>)
 8003d28:	6323      	str	r3, [r4, #48]	@ 0x30
 8003d2a:	4b0d      	ldr	r3, [pc, #52]	@ (8003d60 <std+0x68>)
 8003d2c:	6224      	str	r4, [r4, #32]
 8003d2e:	429c      	cmp	r4, r3
 8003d30:	d006      	beq.n	8003d40 <std+0x48>
 8003d32:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003d36:	4294      	cmp	r4, r2
 8003d38:	d002      	beq.n	8003d40 <std+0x48>
 8003d3a:	33d0      	adds	r3, #208	@ 0xd0
 8003d3c:	429c      	cmp	r4, r3
 8003d3e:	d105      	bne.n	8003d4c <std+0x54>
 8003d40:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003d44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d48:	f000 ba8a 	b.w	8004260 <__retarget_lock_init_recursive>
 8003d4c:	bd10      	pop	{r4, pc}
 8003d4e:	bf00      	nop
 8003d50:	08003fa1 	.word	0x08003fa1
 8003d54:	08003fc3 	.word	0x08003fc3
 8003d58:	08003ffb 	.word	0x08003ffb
 8003d5c:	0800401f 	.word	0x0800401f
 8003d60:	20000380 	.word	0x20000380

08003d64 <stdio_exit_handler>:
 8003d64:	4a02      	ldr	r2, [pc, #8]	@ (8003d70 <stdio_exit_handler+0xc>)
 8003d66:	4903      	ldr	r1, [pc, #12]	@ (8003d74 <stdio_exit_handler+0x10>)
 8003d68:	4803      	ldr	r0, [pc, #12]	@ (8003d78 <stdio_exit_handler+0x14>)
 8003d6a:	f000 b869 	b.w	8003e40 <_fwalk_sglue>
 8003d6e:	bf00      	nop
 8003d70:	20000168 	.word	0x20000168
 8003d74:	080049ed 	.word	0x080049ed
 8003d78:	20000178 	.word	0x20000178

08003d7c <cleanup_stdio>:
 8003d7c:	6841      	ldr	r1, [r0, #4]
 8003d7e:	4b0c      	ldr	r3, [pc, #48]	@ (8003db0 <cleanup_stdio+0x34>)
 8003d80:	4299      	cmp	r1, r3
 8003d82:	b510      	push	{r4, lr}
 8003d84:	4604      	mov	r4, r0
 8003d86:	d001      	beq.n	8003d8c <cleanup_stdio+0x10>
 8003d88:	f000 fe30 	bl	80049ec <_fflush_r>
 8003d8c:	68a1      	ldr	r1, [r4, #8]
 8003d8e:	4b09      	ldr	r3, [pc, #36]	@ (8003db4 <cleanup_stdio+0x38>)
 8003d90:	4299      	cmp	r1, r3
 8003d92:	d002      	beq.n	8003d9a <cleanup_stdio+0x1e>
 8003d94:	4620      	mov	r0, r4
 8003d96:	f000 fe29 	bl	80049ec <_fflush_r>
 8003d9a:	68e1      	ldr	r1, [r4, #12]
 8003d9c:	4b06      	ldr	r3, [pc, #24]	@ (8003db8 <cleanup_stdio+0x3c>)
 8003d9e:	4299      	cmp	r1, r3
 8003da0:	d004      	beq.n	8003dac <cleanup_stdio+0x30>
 8003da2:	4620      	mov	r0, r4
 8003da4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003da8:	f000 be20 	b.w	80049ec <_fflush_r>
 8003dac:	bd10      	pop	{r4, pc}
 8003dae:	bf00      	nop
 8003db0:	20000380 	.word	0x20000380
 8003db4:	200003e8 	.word	0x200003e8
 8003db8:	20000450 	.word	0x20000450

08003dbc <global_stdio_init.part.0>:
 8003dbc:	b510      	push	{r4, lr}
 8003dbe:	4b0b      	ldr	r3, [pc, #44]	@ (8003dec <global_stdio_init.part.0+0x30>)
 8003dc0:	4c0b      	ldr	r4, [pc, #44]	@ (8003df0 <global_stdio_init.part.0+0x34>)
 8003dc2:	4a0c      	ldr	r2, [pc, #48]	@ (8003df4 <global_stdio_init.part.0+0x38>)
 8003dc4:	601a      	str	r2, [r3, #0]
 8003dc6:	4620      	mov	r0, r4
 8003dc8:	2200      	movs	r2, #0
 8003dca:	2104      	movs	r1, #4
 8003dcc:	f7ff ff94 	bl	8003cf8 <std>
 8003dd0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	2109      	movs	r1, #9
 8003dd8:	f7ff ff8e 	bl	8003cf8 <std>
 8003ddc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003de0:	2202      	movs	r2, #2
 8003de2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003de6:	2112      	movs	r1, #18
 8003de8:	f7ff bf86 	b.w	8003cf8 <std>
 8003dec:	200004b8 	.word	0x200004b8
 8003df0:	20000380 	.word	0x20000380
 8003df4:	08003d65 	.word	0x08003d65

08003df8 <__sfp_lock_acquire>:
 8003df8:	4801      	ldr	r0, [pc, #4]	@ (8003e00 <__sfp_lock_acquire+0x8>)
 8003dfa:	f000 ba32 	b.w	8004262 <__retarget_lock_acquire_recursive>
 8003dfe:	bf00      	nop
 8003e00:	200004c1 	.word	0x200004c1

08003e04 <__sfp_lock_release>:
 8003e04:	4801      	ldr	r0, [pc, #4]	@ (8003e0c <__sfp_lock_release+0x8>)
 8003e06:	f000 ba2d 	b.w	8004264 <__retarget_lock_release_recursive>
 8003e0a:	bf00      	nop
 8003e0c:	200004c1 	.word	0x200004c1

08003e10 <__sinit>:
 8003e10:	b510      	push	{r4, lr}
 8003e12:	4604      	mov	r4, r0
 8003e14:	f7ff fff0 	bl	8003df8 <__sfp_lock_acquire>
 8003e18:	6a23      	ldr	r3, [r4, #32]
 8003e1a:	b11b      	cbz	r3, 8003e24 <__sinit+0x14>
 8003e1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e20:	f7ff bff0 	b.w	8003e04 <__sfp_lock_release>
 8003e24:	4b04      	ldr	r3, [pc, #16]	@ (8003e38 <__sinit+0x28>)
 8003e26:	6223      	str	r3, [r4, #32]
 8003e28:	4b04      	ldr	r3, [pc, #16]	@ (8003e3c <__sinit+0x2c>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1f5      	bne.n	8003e1c <__sinit+0xc>
 8003e30:	f7ff ffc4 	bl	8003dbc <global_stdio_init.part.0>
 8003e34:	e7f2      	b.n	8003e1c <__sinit+0xc>
 8003e36:	bf00      	nop
 8003e38:	08003d7d 	.word	0x08003d7d
 8003e3c:	200004b8 	.word	0x200004b8

08003e40 <_fwalk_sglue>:
 8003e40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e44:	4607      	mov	r7, r0
 8003e46:	4688      	mov	r8, r1
 8003e48:	4614      	mov	r4, r2
 8003e4a:	2600      	movs	r6, #0
 8003e4c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003e50:	f1b9 0901 	subs.w	r9, r9, #1
 8003e54:	d505      	bpl.n	8003e62 <_fwalk_sglue+0x22>
 8003e56:	6824      	ldr	r4, [r4, #0]
 8003e58:	2c00      	cmp	r4, #0
 8003e5a:	d1f7      	bne.n	8003e4c <_fwalk_sglue+0xc>
 8003e5c:	4630      	mov	r0, r6
 8003e5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e62:	89ab      	ldrh	r3, [r5, #12]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d907      	bls.n	8003e78 <_fwalk_sglue+0x38>
 8003e68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	d003      	beq.n	8003e78 <_fwalk_sglue+0x38>
 8003e70:	4629      	mov	r1, r5
 8003e72:	4638      	mov	r0, r7
 8003e74:	47c0      	blx	r8
 8003e76:	4306      	orrs	r6, r0
 8003e78:	3568      	adds	r5, #104	@ 0x68
 8003e7a:	e7e9      	b.n	8003e50 <_fwalk_sglue+0x10>

08003e7c <_puts_r>:
 8003e7c:	6a03      	ldr	r3, [r0, #32]
 8003e7e:	b570      	push	{r4, r5, r6, lr}
 8003e80:	6884      	ldr	r4, [r0, #8]
 8003e82:	4605      	mov	r5, r0
 8003e84:	460e      	mov	r6, r1
 8003e86:	b90b      	cbnz	r3, 8003e8c <_puts_r+0x10>
 8003e88:	f7ff ffc2 	bl	8003e10 <__sinit>
 8003e8c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003e8e:	07db      	lsls	r3, r3, #31
 8003e90:	d405      	bmi.n	8003e9e <_puts_r+0x22>
 8003e92:	89a3      	ldrh	r3, [r4, #12]
 8003e94:	0598      	lsls	r0, r3, #22
 8003e96:	d402      	bmi.n	8003e9e <_puts_r+0x22>
 8003e98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003e9a:	f000 f9e2 	bl	8004262 <__retarget_lock_acquire_recursive>
 8003e9e:	89a3      	ldrh	r3, [r4, #12]
 8003ea0:	0719      	lsls	r1, r3, #28
 8003ea2:	d502      	bpl.n	8003eaa <_puts_r+0x2e>
 8003ea4:	6923      	ldr	r3, [r4, #16]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d135      	bne.n	8003f16 <_puts_r+0x9a>
 8003eaa:	4621      	mov	r1, r4
 8003eac:	4628      	mov	r0, r5
 8003eae:	f000 f8f9 	bl	80040a4 <__swsetup_r>
 8003eb2:	b380      	cbz	r0, 8003f16 <_puts_r+0x9a>
 8003eb4:	f04f 35ff 	mov.w	r5, #4294967295
 8003eb8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003eba:	07da      	lsls	r2, r3, #31
 8003ebc:	d405      	bmi.n	8003eca <_puts_r+0x4e>
 8003ebe:	89a3      	ldrh	r3, [r4, #12]
 8003ec0:	059b      	lsls	r3, r3, #22
 8003ec2:	d402      	bmi.n	8003eca <_puts_r+0x4e>
 8003ec4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003ec6:	f000 f9cd 	bl	8004264 <__retarget_lock_release_recursive>
 8003eca:	4628      	mov	r0, r5
 8003ecc:	bd70      	pop	{r4, r5, r6, pc}
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	da04      	bge.n	8003edc <_puts_r+0x60>
 8003ed2:	69a2      	ldr	r2, [r4, #24]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	dc17      	bgt.n	8003f08 <_puts_r+0x8c>
 8003ed8:	290a      	cmp	r1, #10
 8003eda:	d015      	beq.n	8003f08 <_puts_r+0x8c>
 8003edc:	6823      	ldr	r3, [r4, #0]
 8003ede:	1c5a      	adds	r2, r3, #1
 8003ee0:	6022      	str	r2, [r4, #0]
 8003ee2:	7019      	strb	r1, [r3, #0]
 8003ee4:	68a3      	ldr	r3, [r4, #8]
 8003ee6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003eea:	3b01      	subs	r3, #1
 8003eec:	60a3      	str	r3, [r4, #8]
 8003eee:	2900      	cmp	r1, #0
 8003ef0:	d1ed      	bne.n	8003ece <_puts_r+0x52>
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	da11      	bge.n	8003f1a <_puts_r+0x9e>
 8003ef6:	4622      	mov	r2, r4
 8003ef8:	210a      	movs	r1, #10
 8003efa:	4628      	mov	r0, r5
 8003efc:	f000 f893 	bl	8004026 <__swbuf_r>
 8003f00:	3001      	adds	r0, #1
 8003f02:	d0d7      	beq.n	8003eb4 <_puts_r+0x38>
 8003f04:	250a      	movs	r5, #10
 8003f06:	e7d7      	b.n	8003eb8 <_puts_r+0x3c>
 8003f08:	4622      	mov	r2, r4
 8003f0a:	4628      	mov	r0, r5
 8003f0c:	f000 f88b 	bl	8004026 <__swbuf_r>
 8003f10:	3001      	adds	r0, #1
 8003f12:	d1e7      	bne.n	8003ee4 <_puts_r+0x68>
 8003f14:	e7ce      	b.n	8003eb4 <_puts_r+0x38>
 8003f16:	3e01      	subs	r6, #1
 8003f18:	e7e4      	b.n	8003ee4 <_puts_r+0x68>
 8003f1a:	6823      	ldr	r3, [r4, #0]
 8003f1c:	1c5a      	adds	r2, r3, #1
 8003f1e:	6022      	str	r2, [r4, #0]
 8003f20:	220a      	movs	r2, #10
 8003f22:	701a      	strb	r2, [r3, #0]
 8003f24:	e7ee      	b.n	8003f04 <_puts_r+0x88>
	...

08003f28 <puts>:
 8003f28:	4b02      	ldr	r3, [pc, #8]	@ (8003f34 <puts+0xc>)
 8003f2a:	4601      	mov	r1, r0
 8003f2c:	6818      	ldr	r0, [r3, #0]
 8003f2e:	f7ff bfa5 	b.w	8003e7c <_puts_r>
 8003f32:	bf00      	nop
 8003f34:	20000174 	.word	0x20000174

08003f38 <sniprintf>:
 8003f38:	b40c      	push	{r2, r3}
 8003f3a:	b530      	push	{r4, r5, lr}
 8003f3c:	4b17      	ldr	r3, [pc, #92]	@ (8003f9c <sniprintf+0x64>)
 8003f3e:	1e0c      	subs	r4, r1, #0
 8003f40:	681d      	ldr	r5, [r3, #0]
 8003f42:	b09d      	sub	sp, #116	@ 0x74
 8003f44:	da08      	bge.n	8003f58 <sniprintf+0x20>
 8003f46:	238b      	movs	r3, #139	@ 0x8b
 8003f48:	602b      	str	r3, [r5, #0]
 8003f4a:	f04f 30ff 	mov.w	r0, #4294967295
 8003f4e:	b01d      	add	sp, #116	@ 0x74
 8003f50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003f54:	b002      	add	sp, #8
 8003f56:	4770      	bx	lr
 8003f58:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003f5c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003f60:	bf14      	ite	ne
 8003f62:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003f66:	4623      	moveq	r3, r4
 8003f68:	9304      	str	r3, [sp, #16]
 8003f6a:	9307      	str	r3, [sp, #28]
 8003f6c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003f70:	9002      	str	r0, [sp, #8]
 8003f72:	9006      	str	r0, [sp, #24]
 8003f74:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003f78:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003f7a:	ab21      	add	r3, sp, #132	@ 0x84
 8003f7c:	a902      	add	r1, sp, #8
 8003f7e:	4628      	mov	r0, r5
 8003f80:	9301      	str	r3, [sp, #4]
 8003f82:	f000 fa25 	bl	80043d0 <_svfiprintf_r>
 8003f86:	1c43      	adds	r3, r0, #1
 8003f88:	bfbc      	itt	lt
 8003f8a:	238b      	movlt	r3, #139	@ 0x8b
 8003f8c:	602b      	strlt	r3, [r5, #0]
 8003f8e:	2c00      	cmp	r4, #0
 8003f90:	d0dd      	beq.n	8003f4e <sniprintf+0x16>
 8003f92:	9b02      	ldr	r3, [sp, #8]
 8003f94:	2200      	movs	r2, #0
 8003f96:	701a      	strb	r2, [r3, #0]
 8003f98:	e7d9      	b.n	8003f4e <sniprintf+0x16>
 8003f9a:	bf00      	nop
 8003f9c:	20000174 	.word	0x20000174

08003fa0 <__sread>:
 8003fa0:	b510      	push	{r4, lr}
 8003fa2:	460c      	mov	r4, r1
 8003fa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fa8:	f000 f8fc 	bl	80041a4 <_read_r>
 8003fac:	2800      	cmp	r0, #0
 8003fae:	bfab      	itete	ge
 8003fb0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003fb2:	89a3      	ldrhlt	r3, [r4, #12]
 8003fb4:	181b      	addge	r3, r3, r0
 8003fb6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003fba:	bfac      	ite	ge
 8003fbc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003fbe:	81a3      	strhlt	r3, [r4, #12]
 8003fc0:	bd10      	pop	{r4, pc}

08003fc2 <__swrite>:
 8003fc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fc6:	461f      	mov	r7, r3
 8003fc8:	898b      	ldrh	r3, [r1, #12]
 8003fca:	05db      	lsls	r3, r3, #23
 8003fcc:	4605      	mov	r5, r0
 8003fce:	460c      	mov	r4, r1
 8003fd0:	4616      	mov	r6, r2
 8003fd2:	d505      	bpl.n	8003fe0 <__swrite+0x1e>
 8003fd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fd8:	2302      	movs	r3, #2
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f000 f8d0 	bl	8004180 <_lseek_r>
 8003fe0:	89a3      	ldrh	r3, [r4, #12]
 8003fe2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003fe6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003fea:	81a3      	strh	r3, [r4, #12]
 8003fec:	4632      	mov	r2, r6
 8003fee:	463b      	mov	r3, r7
 8003ff0:	4628      	mov	r0, r5
 8003ff2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ff6:	f000 b8f7 	b.w	80041e8 <_write_r>

08003ffa <__sseek>:
 8003ffa:	b510      	push	{r4, lr}
 8003ffc:	460c      	mov	r4, r1
 8003ffe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004002:	f000 f8bd 	bl	8004180 <_lseek_r>
 8004006:	1c43      	adds	r3, r0, #1
 8004008:	89a3      	ldrh	r3, [r4, #12]
 800400a:	bf15      	itete	ne
 800400c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800400e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004012:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004016:	81a3      	strheq	r3, [r4, #12]
 8004018:	bf18      	it	ne
 800401a:	81a3      	strhne	r3, [r4, #12]
 800401c:	bd10      	pop	{r4, pc}

0800401e <__sclose>:
 800401e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004022:	f000 b89d 	b.w	8004160 <_close_r>

08004026 <__swbuf_r>:
 8004026:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004028:	460e      	mov	r6, r1
 800402a:	4614      	mov	r4, r2
 800402c:	4605      	mov	r5, r0
 800402e:	b118      	cbz	r0, 8004038 <__swbuf_r+0x12>
 8004030:	6a03      	ldr	r3, [r0, #32]
 8004032:	b90b      	cbnz	r3, 8004038 <__swbuf_r+0x12>
 8004034:	f7ff feec 	bl	8003e10 <__sinit>
 8004038:	69a3      	ldr	r3, [r4, #24]
 800403a:	60a3      	str	r3, [r4, #8]
 800403c:	89a3      	ldrh	r3, [r4, #12]
 800403e:	071a      	lsls	r2, r3, #28
 8004040:	d501      	bpl.n	8004046 <__swbuf_r+0x20>
 8004042:	6923      	ldr	r3, [r4, #16]
 8004044:	b943      	cbnz	r3, 8004058 <__swbuf_r+0x32>
 8004046:	4621      	mov	r1, r4
 8004048:	4628      	mov	r0, r5
 800404a:	f000 f82b 	bl	80040a4 <__swsetup_r>
 800404e:	b118      	cbz	r0, 8004058 <__swbuf_r+0x32>
 8004050:	f04f 37ff 	mov.w	r7, #4294967295
 8004054:	4638      	mov	r0, r7
 8004056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004058:	6823      	ldr	r3, [r4, #0]
 800405a:	6922      	ldr	r2, [r4, #16]
 800405c:	1a98      	subs	r0, r3, r2
 800405e:	6963      	ldr	r3, [r4, #20]
 8004060:	b2f6      	uxtb	r6, r6
 8004062:	4283      	cmp	r3, r0
 8004064:	4637      	mov	r7, r6
 8004066:	dc05      	bgt.n	8004074 <__swbuf_r+0x4e>
 8004068:	4621      	mov	r1, r4
 800406a:	4628      	mov	r0, r5
 800406c:	f000 fcbe 	bl	80049ec <_fflush_r>
 8004070:	2800      	cmp	r0, #0
 8004072:	d1ed      	bne.n	8004050 <__swbuf_r+0x2a>
 8004074:	68a3      	ldr	r3, [r4, #8]
 8004076:	3b01      	subs	r3, #1
 8004078:	60a3      	str	r3, [r4, #8]
 800407a:	6823      	ldr	r3, [r4, #0]
 800407c:	1c5a      	adds	r2, r3, #1
 800407e:	6022      	str	r2, [r4, #0]
 8004080:	701e      	strb	r6, [r3, #0]
 8004082:	6962      	ldr	r2, [r4, #20]
 8004084:	1c43      	adds	r3, r0, #1
 8004086:	429a      	cmp	r2, r3
 8004088:	d004      	beq.n	8004094 <__swbuf_r+0x6e>
 800408a:	89a3      	ldrh	r3, [r4, #12]
 800408c:	07db      	lsls	r3, r3, #31
 800408e:	d5e1      	bpl.n	8004054 <__swbuf_r+0x2e>
 8004090:	2e0a      	cmp	r6, #10
 8004092:	d1df      	bne.n	8004054 <__swbuf_r+0x2e>
 8004094:	4621      	mov	r1, r4
 8004096:	4628      	mov	r0, r5
 8004098:	f000 fca8 	bl	80049ec <_fflush_r>
 800409c:	2800      	cmp	r0, #0
 800409e:	d0d9      	beq.n	8004054 <__swbuf_r+0x2e>
 80040a0:	e7d6      	b.n	8004050 <__swbuf_r+0x2a>
	...

080040a4 <__swsetup_r>:
 80040a4:	b538      	push	{r3, r4, r5, lr}
 80040a6:	4b29      	ldr	r3, [pc, #164]	@ (800414c <__swsetup_r+0xa8>)
 80040a8:	4605      	mov	r5, r0
 80040aa:	6818      	ldr	r0, [r3, #0]
 80040ac:	460c      	mov	r4, r1
 80040ae:	b118      	cbz	r0, 80040b8 <__swsetup_r+0x14>
 80040b0:	6a03      	ldr	r3, [r0, #32]
 80040b2:	b90b      	cbnz	r3, 80040b8 <__swsetup_r+0x14>
 80040b4:	f7ff feac 	bl	8003e10 <__sinit>
 80040b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040bc:	0719      	lsls	r1, r3, #28
 80040be:	d422      	bmi.n	8004106 <__swsetup_r+0x62>
 80040c0:	06da      	lsls	r2, r3, #27
 80040c2:	d407      	bmi.n	80040d4 <__swsetup_r+0x30>
 80040c4:	2209      	movs	r2, #9
 80040c6:	602a      	str	r2, [r5, #0]
 80040c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80040cc:	81a3      	strh	r3, [r4, #12]
 80040ce:	f04f 30ff 	mov.w	r0, #4294967295
 80040d2:	e033      	b.n	800413c <__swsetup_r+0x98>
 80040d4:	0758      	lsls	r0, r3, #29
 80040d6:	d512      	bpl.n	80040fe <__swsetup_r+0x5a>
 80040d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80040da:	b141      	cbz	r1, 80040ee <__swsetup_r+0x4a>
 80040dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80040e0:	4299      	cmp	r1, r3
 80040e2:	d002      	beq.n	80040ea <__swsetup_r+0x46>
 80040e4:	4628      	mov	r0, r5
 80040e6:	f000 f8cd 	bl	8004284 <_free_r>
 80040ea:	2300      	movs	r3, #0
 80040ec:	6363      	str	r3, [r4, #52]	@ 0x34
 80040ee:	89a3      	ldrh	r3, [r4, #12]
 80040f0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80040f4:	81a3      	strh	r3, [r4, #12]
 80040f6:	2300      	movs	r3, #0
 80040f8:	6063      	str	r3, [r4, #4]
 80040fa:	6923      	ldr	r3, [r4, #16]
 80040fc:	6023      	str	r3, [r4, #0]
 80040fe:	89a3      	ldrh	r3, [r4, #12]
 8004100:	f043 0308 	orr.w	r3, r3, #8
 8004104:	81a3      	strh	r3, [r4, #12]
 8004106:	6923      	ldr	r3, [r4, #16]
 8004108:	b94b      	cbnz	r3, 800411e <__swsetup_r+0x7a>
 800410a:	89a3      	ldrh	r3, [r4, #12]
 800410c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004110:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004114:	d003      	beq.n	800411e <__swsetup_r+0x7a>
 8004116:	4621      	mov	r1, r4
 8004118:	4628      	mov	r0, r5
 800411a:	f000 fcb5 	bl	8004a88 <__smakebuf_r>
 800411e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004122:	f013 0201 	ands.w	r2, r3, #1
 8004126:	d00a      	beq.n	800413e <__swsetup_r+0x9a>
 8004128:	2200      	movs	r2, #0
 800412a:	60a2      	str	r2, [r4, #8]
 800412c:	6962      	ldr	r2, [r4, #20]
 800412e:	4252      	negs	r2, r2
 8004130:	61a2      	str	r2, [r4, #24]
 8004132:	6922      	ldr	r2, [r4, #16]
 8004134:	b942      	cbnz	r2, 8004148 <__swsetup_r+0xa4>
 8004136:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800413a:	d1c5      	bne.n	80040c8 <__swsetup_r+0x24>
 800413c:	bd38      	pop	{r3, r4, r5, pc}
 800413e:	0799      	lsls	r1, r3, #30
 8004140:	bf58      	it	pl
 8004142:	6962      	ldrpl	r2, [r4, #20]
 8004144:	60a2      	str	r2, [r4, #8]
 8004146:	e7f4      	b.n	8004132 <__swsetup_r+0x8e>
 8004148:	2000      	movs	r0, #0
 800414a:	e7f7      	b.n	800413c <__swsetup_r+0x98>
 800414c:	20000174 	.word	0x20000174

08004150 <memset>:
 8004150:	4402      	add	r2, r0
 8004152:	4603      	mov	r3, r0
 8004154:	4293      	cmp	r3, r2
 8004156:	d100      	bne.n	800415a <memset+0xa>
 8004158:	4770      	bx	lr
 800415a:	f803 1b01 	strb.w	r1, [r3], #1
 800415e:	e7f9      	b.n	8004154 <memset+0x4>

08004160 <_close_r>:
 8004160:	b538      	push	{r3, r4, r5, lr}
 8004162:	4d06      	ldr	r5, [pc, #24]	@ (800417c <_close_r+0x1c>)
 8004164:	2300      	movs	r3, #0
 8004166:	4604      	mov	r4, r0
 8004168:	4608      	mov	r0, r1
 800416a:	602b      	str	r3, [r5, #0]
 800416c:	f7fd fbf2 	bl	8001954 <_close>
 8004170:	1c43      	adds	r3, r0, #1
 8004172:	d102      	bne.n	800417a <_close_r+0x1a>
 8004174:	682b      	ldr	r3, [r5, #0]
 8004176:	b103      	cbz	r3, 800417a <_close_r+0x1a>
 8004178:	6023      	str	r3, [r4, #0]
 800417a:	bd38      	pop	{r3, r4, r5, pc}
 800417c:	200004bc 	.word	0x200004bc

08004180 <_lseek_r>:
 8004180:	b538      	push	{r3, r4, r5, lr}
 8004182:	4d07      	ldr	r5, [pc, #28]	@ (80041a0 <_lseek_r+0x20>)
 8004184:	4604      	mov	r4, r0
 8004186:	4608      	mov	r0, r1
 8004188:	4611      	mov	r1, r2
 800418a:	2200      	movs	r2, #0
 800418c:	602a      	str	r2, [r5, #0]
 800418e:	461a      	mov	r2, r3
 8004190:	f7fd fc07 	bl	80019a2 <_lseek>
 8004194:	1c43      	adds	r3, r0, #1
 8004196:	d102      	bne.n	800419e <_lseek_r+0x1e>
 8004198:	682b      	ldr	r3, [r5, #0]
 800419a:	b103      	cbz	r3, 800419e <_lseek_r+0x1e>
 800419c:	6023      	str	r3, [r4, #0]
 800419e:	bd38      	pop	{r3, r4, r5, pc}
 80041a0:	200004bc 	.word	0x200004bc

080041a4 <_read_r>:
 80041a4:	b538      	push	{r3, r4, r5, lr}
 80041a6:	4d07      	ldr	r5, [pc, #28]	@ (80041c4 <_read_r+0x20>)
 80041a8:	4604      	mov	r4, r0
 80041aa:	4608      	mov	r0, r1
 80041ac:	4611      	mov	r1, r2
 80041ae:	2200      	movs	r2, #0
 80041b0:	602a      	str	r2, [r5, #0]
 80041b2:	461a      	mov	r2, r3
 80041b4:	f7fd fb84 	bl	80018c0 <_read>
 80041b8:	1c43      	adds	r3, r0, #1
 80041ba:	d102      	bne.n	80041c2 <_read_r+0x1e>
 80041bc:	682b      	ldr	r3, [r5, #0]
 80041be:	b103      	cbz	r3, 80041c2 <_read_r+0x1e>
 80041c0:	6023      	str	r3, [r4, #0]
 80041c2:	bd38      	pop	{r3, r4, r5, pc}
 80041c4:	200004bc 	.word	0x200004bc

080041c8 <_sbrk_r>:
 80041c8:	b538      	push	{r3, r4, r5, lr}
 80041ca:	4d06      	ldr	r5, [pc, #24]	@ (80041e4 <_sbrk_r+0x1c>)
 80041cc:	2300      	movs	r3, #0
 80041ce:	4604      	mov	r4, r0
 80041d0:	4608      	mov	r0, r1
 80041d2:	602b      	str	r3, [r5, #0]
 80041d4:	f7fd fb92 	bl	80018fc <_sbrk>
 80041d8:	1c43      	adds	r3, r0, #1
 80041da:	d102      	bne.n	80041e2 <_sbrk_r+0x1a>
 80041dc:	682b      	ldr	r3, [r5, #0]
 80041de:	b103      	cbz	r3, 80041e2 <_sbrk_r+0x1a>
 80041e0:	6023      	str	r3, [r4, #0]
 80041e2:	bd38      	pop	{r3, r4, r5, pc}
 80041e4:	200004bc 	.word	0x200004bc

080041e8 <_write_r>:
 80041e8:	b538      	push	{r3, r4, r5, lr}
 80041ea:	4d07      	ldr	r5, [pc, #28]	@ (8004208 <_write_r+0x20>)
 80041ec:	4604      	mov	r4, r0
 80041ee:	4608      	mov	r0, r1
 80041f0:	4611      	mov	r1, r2
 80041f2:	2200      	movs	r2, #0
 80041f4:	602a      	str	r2, [r5, #0]
 80041f6:	461a      	mov	r2, r3
 80041f8:	f7fc fec3 	bl	8000f82 <_write>
 80041fc:	1c43      	adds	r3, r0, #1
 80041fe:	d102      	bne.n	8004206 <_write_r+0x1e>
 8004200:	682b      	ldr	r3, [r5, #0]
 8004202:	b103      	cbz	r3, 8004206 <_write_r+0x1e>
 8004204:	6023      	str	r3, [r4, #0]
 8004206:	bd38      	pop	{r3, r4, r5, pc}
 8004208:	200004bc 	.word	0x200004bc

0800420c <__errno>:
 800420c:	4b01      	ldr	r3, [pc, #4]	@ (8004214 <__errno+0x8>)
 800420e:	6818      	ldr	r0, [r3, #0]
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	20000174 	.word	0x20000174

08004218 <__libc_init_array>:
 8004218:	b570      	push	{r4, r5, r6, lr}
 800421a:	4d0d      	ldr	r5, [pc, #52]	@ (8004250 <__libc_init_array+0x38>)
 800421c:	4c0d      	ldr	r4, [pc, #52]	@ (8004254 <__libc_init_array+0x3c>)
 800421e:	1b64      	subs	r4, r4, r5
 8004220:	10a4      	asrs	r4, r4, #2
 8004222:	2600      	movs	r6, #0
 8004224:	42a6      	cmp	r6, r4
 8004226:	d109      	bne.n	800423c <__libc_init_array+0x24>
 8004228:	4d0b      	ldr	r5, [pc, #44]	@ (8004258 <__libc_init_array+0x40>)
 800422a:	4c0c      	ldr	r4, [pc, #48]	@ (800425c <__libc_init_array+0x44>)
 800422c:	f000 fcda 	bl	8004be4 <_init>
 8004230:	1b64      	subs	r4, r4, r5
 8004232:	10a4      	asrs	r4, r4, #2
 8004234:	2600      	movs	r6, #0
 8004236:	42a6      	cmp	r6, r4
 8004238:	d105      	bne.n	8004246 <__libc_init_array+0x2e>
 800423a:	bd70      	pop	{r4, r5, r6, pc}
 800423c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004240:	4798      	blx	r3
 8004242:	3601      	adds	r6, #1
 8004244:	e7ee      	b.n	8004224 <__libc_init_array+0xc>
 8004246:	f855 3b04 	ldr.w	r3, [r5], #4
 800424a:	4798      	blx	r3
 800424c:	3601      	adds	r6, #1
 800424e:	e7f2      	b.n	8004236 <__libc_init_array+0x1e>
 8004250:	08004d44 	.word	0x08004d44
 8004254:	08004d44 	.word	0x08004d44
 8004258:	08004d44 	.word	0x08004d44
 800425c:	08004d48 	.word	0x08004d48

08004260 <__retarget_lock_init_recursive>:
 8004260:	4770      	bx	lr

08004262 <__retarget_lock_acquire_recursive>:
 8004262:	4770      	bx	lr

08004264 <__retarget_lock_release_recursive>:
 8004264:	4770      	bx	lr

08004266 <memcpy>:
 8004266:	440a      	add	r2, r1
 8004268:	4291      	cmp	r1, r2
 800426a:	f100 33ff 	add.w	r3, r0, #4294967295
 800426e:	d100      	bne.n	8004272 <memcpy+0xc>
 8004270:	4770      	bx	lr
 8004272:	b510      	push	{r4, lr}
 8004274:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004278:	f803 4f01 	strb.w	r4, [r3, #1]!
 800427c:	4291      	cmp	r1, r2
 800427e:	d1f9      	bne.n	8004274 <memcpy+0xe>
 8004280:	bd10      	pop	{r4, pc}
	...

08004284 <_free_r>:
 8004284:	b538      	push	{r3, r4, r5, lr}
 8004286:	4605      	mov	r5, r0
 8004288:	2900      	cmp	r1, #0
 800428a:	d041      	beq.n	8004310 <_free_r+0x8c>
 800428c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004290:	1f0c      	subs	r4, r1, #4
 8004292:	2b00      	cmp	r3, #0
 8004294:	bfb8      	it	lt
 8004296:	18e4      	addlt	r4, r4, r3
 8004298:	f7ff fd22 	bl	8003ce0 <__malloc_lock>
 800429c:	4a1d      	ldr	r2, [pc, #116]	@ (8004314 <_free_r+0x90>)
 800429e:	6813      	ldr	r3, [r2, #0]
 80042a0:	b933      	cbnz	r3, 80042b0 <_free_r+0x2c>
 80042a2:	6063      	str	r3, [r4, #4]
 80042a4:	6014      	str	r4, [r2, #0]
 80042a6:	4628      	mov	r0, r5
 80042a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80042ac:	f7ff bd1e 	b.w	8003cec <__malloc_unlock>
 80042b0:	42a3      	cmp	r3, r4
 80042b2:	d908      	bls.n	80042c6 <_free_r+0x42>
 80042b4:	6820      	ldr	r0, [r4, #0]
 80042b6:	1821      	adds	r1, r4, r0
 80042b8:	428b      	cmp	r3, r1
 80042ba:	bf01      	itttt	eq
 80042bc:	6819      	ldreq	r1, [r3, #0]
 80042be:	685b      	ldreq	r3, [r3, #4]
 80042c0:	1809      	addeq	r1, r1, r0
 80042c2:	6021      	streq	r1, [r4, #0]
 80042c4:	e7ed      	b.n	80042a2 <_free_r+0x1e>
 80042c6:	461a      	mov	r2, r3
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	b10b      	cbz	r3, 80042d0 <_free_r+0x4c>
 80042cc:	42a3      	cmp	r3, r4
 80042ce:	d9fa      	bls.n	80042c6 <_free_r+0x42>
 80042d0:	6811      	ldr	r1, [r2, #0]
 80042d2:	1850      	adds	r0, r2, r1
 80042d4:	42a0      	cmp	r0, r4
 80042d6:	d10b      	bne.n	80042f0 <_free_r+0x6c>
 80042d8:	6820      	ldr	r0, [r4, #0]
 80042da:	4401      	add	r1, r0
 80042dc:	1850      	adds	r0, r2, r1
 80042de:	4283      	cmp	r3, r0
 80042e0:	6011      	str	r1, [r2, #0]
 80042e2:	d1e0      	bne.n	80042a6 <_free_r+0x22>
 80042e4:	6818      	ldr	r0, [r3, #0]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	6053      	str	r3, [r2, #4]
 80042ea:	4408      	add	r0, r1
 80042ec:	6010      	str	r0, [r2, #0]
 80042ee:	e7da      	b.n	80042a6 <_free_r+0x22>
 80042f0:	d902      	bls.n	80042f8 <_free_r+0x74>
 80042f2:	230c      	movs	r3, #12
 80042f4:	602b      	str	r3, [r5, #0]
 80042f6:	e7d6      	b.n	80042a6 <_free_r+0x22>
 80042f8:	6820      	ldr	r0, [r4, #0]
 80042fa:	1821      	adds	r1, r4, r0
 80042fc:	428b      	cmp	r3, r1
 80042fe:	bf04      	itt	eq
 8004300:	6819      	ldreq	r1, [r3, #0]
 8004302:	685b      	ldreq	r3, [r3, #4]
 8004304:	6063      	str	r3, [r4, #4]
 8004306:	bf04      	itt	eq
 8004308:	1809      	addeq	r1, r1, r0
 800430a:	6021      	streq	r1, [r4, #0]
 800430c:	6054      	str	r4, [r2, #4]
 800430e:	e7ca      	b.n	80042a6 <_free_r+0x22>
 8004310:	bd38      	pop	{r3, r4, r5, pc}
 8004312:	bf00      	nop
 8004314:	2000037c 	.word	0x2000037c

08004318 <__ssputs_r>:
 8004318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800431c:	688e      	ldr	r6, [r1, #8]
 800431e:	461f      	mov	r7, r3
 8004320:	42be      	cmp	r6, r7
 8004322:	680b      	ldr	r3, [r1, #0]
 8004324:	4682      	mov	sl, r0
 8004326:	460c      	mov	r4, r1
 8004328:	4690      	mov	r8, r2
 800432a:	d82d      	bhi.n	8004388 <__ssputs_r+0x70>
 800432c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004330:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004334:	d026      	beq.n	8004384 <__ssputs_r+0x6c>
 8004336:	6965      	ldr	r5, [r4, #20]
 8004338:	6909      	ldr	r1, [r1, #16]
 800433a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800433e:	eba3 0901 	sub.w	r9, r3, r1
 8004342:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004346:	1c7b      	adds	r3, r7, #1
 8004348:	444b      	add	r3, r9
 800434a:	106d      	asrs	r5, r5, #1
 800434c:	429d      	cmp	r5, r3
 800434e:	bf38      	it	cc
 8004350:	461d      	movcc	r5, r3
 8004352:	0553      	lsls	r3, r2, #21
 8004354:	d527      	bpl.n	80043a6 <__ssputs_r+0x8e>
 8004356:	4629      	mov	r1, r5
 8004358:	f7ff fc42 	bl	8003be0 <_malloc_r>
 800435c:	4606      	mov	r6, r0
 800435e:	b360      	cbz	r0, 80043ba <__ssputs_r+0xa2>
 8004360:	6921      	ldr	r1, [r4, #16]
 8004362:	464a      	mov	r2, r9
 8004364:	f7ff ff7f 	bl	8004266 <memcpy>
 8004368:	89a3      	ldrh	r3, [r4, #12]
 800436a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800436e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004372:	81a3      	strh	r3, [r4, #12]
 8004374:	6126      	str	r6, [r4, #16]
 8004376:	6165      	str	r5, [r4, #20]
 8004378:	444e      	add	r6, r9
 800437a:	eba5 0509 	sub.w	r5, r5, r9
 800437e:	6026      	str	r6, [r4, #0]
 8004380:	60a5      	str	r5, [r4, #8]
 8004382:	463e      	mov	r6, r7
 8004384:	42be      	cmp	r6, r7
 8004386:	d900      	bls.n	800438a <__ssputs_r+0x72>
 8004388:	463e      	mov	r6, r7
 800438a:	6820      	ldr	r0, [r4, #0]
 800438c:	4632      	mov	r2, r6
 800438e:	4641      	mov	r1, r8
 8004390:	f000 fbb6 	bl	8004b00 <memmove>
 8004394:	68a3      	ldr	r3, [r4, #8]
 8004396:	1b9b      	subs	r3, r3, r6
 8004398:	60a3      	str	r3, [r4, #8]
 800439a:	6823      	ldr	r3, [r4, #0]
 800439c:	4433      	add	r3, r6
 800439e:	6023      	str	r3, [r4, #0]
 80043a0:	2000      	movs	r0, #0
 80043a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043a6:	462a      	mov	r2, r5
 80043a8:	f000 fbe6 	bl	8004b78 <_realloc_r>
 80043ac:	4606      	mov	r6, r0
 80043ae:	2800      	cmp	r0, #0
 80043b0:	d1e0      	bne.n	8004374 <__ssputs_r+0x5c>
 80043b2:	6921      	ldr	r1, [r4, #16]
 80043b4:	4650      	mov	r0, sl
 80043b6:	f7ff ff65 	bl	8004284 <_free_r>
 80043ba:	230c      	movs	r3, #12
 80043bc:	f8ca 3000 	str.w	r3, [sl]
 80043c0:	89a3      	ldrh	r3, [r4, #12]
 80043c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80043c6:	81a3      	strh	r3, [r4, #12]
 80043c8:	f04f 30ff 	mov.w	r0, #4294967295
 80043cc:	e7e9      	b.n	80043a2 <__ssputs_r+0x8a>
	...

080043d0 <_svfiprintf_r>:
 80043d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043d4:	4698      	mov	r8, r3
 80043d6:	898b      	ldrh	r3, [r1, #12]
 80043d8:	061b      	lsls	r3, r3, #24
 80043da:	b09d      	sub	sp, #116	@ 0x74
 80043dc:	4607      	mov	r7, r0
 80043de:	460d      	mov	r5, r1
 80043e0:	4614      	mov	r4, r2
 80043e2:	d510      	bpl.n	8004406 <_svfiprintf_r+0x36>
 80043e4:	690b      	ldr	r3, [r1, #16]
 80043e6:	b973      	cbnz	r3, 8004406 <_svfiprintf_r+0x36>
 80043e8:	2140      	movs	r1, #64	@ 0x40
 80043ea:	f7ff fbf9 	bl	8003be0 <_malloc_r>
 80043ee:	6028      	str	r0, [r5, #0]
 80043f0:	6128      	str	r0, [r5, #16]
 80043f2:	b930      	cbnz	r0, 8004402 <_svfiprintf_r+0x32>
 80043f4:	230c      	movs	r3, #12
 80043f6:	603b      	str	r3, [r7, #0]
 80043f8:	f04f 30ff 	mov.w	r0, #4294967295
 80043fc:	b01d      	add	sp, #116	@ 0x74
 80043fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004402:	2340      	movs	r3, #64	@ 0x40
 8004404:	616b      	str	r3, [r5, #20]
 8004406:	2300      	movs	r3, #0
 8004408:	9309      	str	r3, [sp, #36]	@ 0x24
 800440a:	2320      	movs	r3, #32
 800440c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004410:	f8cd 800c 	str.w	r8, [sp, #12]
 8004414:	2330      	movs	r3, #48	@ 0x30
 8004416:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80045b4 <_svfiprintf_r+0x1e4>
 800441a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800441e:	f04f 0901 	mov.w	r9, #1
 8004422:	4623      	mov	r3, r4
 8004424:	469a      	mov	sl, r3
 8004426:	f813 2b01 	ldrb.w	r2, [r3], #1
 800442a:	b10a      	cbz	r2, 8004430 <_svfiprintf_r+0x60>
 800442c:	2a25      	cmp	r2, #37	@ 0x25
 800442e:	d1f9      	bne.n	8004424 <_svfiprintf_r+0x54>
 8004430:	ebba 0b04 	subs.w	fp, sl, r4
 8004434:	d00b      	beq.n	800444e <_svfiprintf_r+0x7e>
 8004436:	465b      	mov	r3, fp
 8004438:	4622      	mov	r2, r4
 800443a:	4629      	mov	r1, r5
 800443c:	4638      	mov	r0, r7
 800443e:	f7ff ff6b 	bl	8004318 <__ssputs_r>
 8004442:	3001      	adds	r0, #1
 8004444:	f000 80a7 	beq.w	8004596 <_svfiprintf_r+0x1c6>
 8004448:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800444a:	445a      	add	r2, fp
 800444c:	9209      	str	r2, [sp, #36]	@ 0x24
 800444e:	f89a 3000 	ldrb.w	r3, [sl]
 8004452:	2b00      	cmp	r3, #0
 8004454:	f000 809f 	beq.w	8004596 <_svfiprintf_r+0x1c6>
 8004458:	2300      	movs	r3, #0
 800445a:	f04f 32ff 	mov.w	r2, #4294967295
 800445e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004462:	f10a 0a01 	add.w	sl, sl, #1
 8004466:	9304      	str	r3, [sp, #16]
 8004468:	9307      	str	r3, [sp, #28]
 800446a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800446e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004470:	4654      	mov	r4, sl
 8004472:	2205      	movs	r2, #5
 8004474:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004478:	484e      	ldr	r0, [pc, #312]	@ (80045b4 <_svfiprintf_r+0x1e4>)
 800447a:	f7fb feb1 	bl	80001e0 <memchr>
 800447e:	9a04      	ldr	r2, [sp, #16]
 8004480:	b9d8      	cbnz	r0, 80044ba <_svfiprintf_r+0xea>
 8004482:	06d0      	lsls	r0, r2, #27
 8004484:	bf44      	itt	mi
 8004486:	2320      	movmi	r3, #32
 8004488:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800448c:	0711      	lsls	r1, r2, #28
 800448e:	bf44      	itt	mi
 8004490:	232b      	movmi	r3, #43	@ 0x2b
 8004492:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004496:	f89a 3000 	ldrb.w	r3, [sl]
 800449a:	2b2a      	cmp	r3, #42	@ 0x2a
 800449c:	d015      	beq.n	80044ca <_svfiprintf_r+0xfa>
 800449e:	9a07      	ldr	r2, [sp, #28]
 80044a0:	4654      	mov	r4, sl
 80044a2:	2000      	movs	r0, #0
 80044a4:	f04f 0c0a 	mov.w	ip, #10
 80044a8:	4621      	mov	r1, r4
 80044aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80044ae:	3b30      	subs	r3, #48	@ 0x30
 80044b0:	2b09      	cmp	r3, #9
 80044b2:	d94b      	bls.n	800454c <_svfiprintf_r+0x17c>
 80044b4:	b1b0      	cbz	r0, 80044e4 <_svfiprintf_r+0x114>
 80044b6:	9207      	str	r2, [sp, #28]
 80044b8:	e014      	b.n	80044e4 <_svfiprintf_r+0x114>
 80044ba:	eba0 0308 	sub.w	r3, r0, r8
 80044be:	fa09 f303 	lsl.w	r3, r9, r3
 80044c2:	4313      	orrs	r3, r2
 80044c4:	9304      	str	r3, [sp, #16]
 80044c6:	46a2      	mov	sl, r4
 80044c8:	e7d2      	b.n	8004470 <_svfiprintf_r+0xa0>
 80044ca:	9b03      	ldr	r3, [sp, #12]
 80044cc:	1d19      	adds	r1, r3, #4
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	9103      	str	r1, [sp, #12]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	bfbb      	ittet	lt
 80044d6:	425b      	neglt	r3, r3
 80044d8:	f042 0202 	orrlt.w	r2, r2, #2
 80044dc:	9307      	strge	r3, [sp, #28]
 80044de:	9307      	strlt	r3, [sp, #28]
 80044e0:	bfb8      	it	lt
 80044e2:	9204      	strlt	r2, [sp, #16]
 80044e4:	7823      	ldrb	r3, [r4, #0]
 80044e6:	2b2e      	cmp	r3, #46	@ 0x2e
 80044e8:	d10a      	bne.n	8004500 <_svfiprintf_r+0x130>
 80044ea:	7863      	ldrb	r3, [r4, #1]
 80044ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80044ee:	d132      	bne.n	8004556 <_svfiprintf_r+0x186>
 80044f0:	9b03      	ldr	r3, [sp, #12]
 80044f2:	1d1a      	adds	r2, r3, #4
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	9203      	str	r2, [sp, #12]
 80044f8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80044fc:	3402      	adds	r4, #2
 80044fe:	9305      	str	r3, [sp, #20]
 8004500:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80045c4 <_svfiprintf_r+0x1f4>
 8004504:	7821      	ldrb	r1, [r4, #0]
 8004506:	2203      	movs	r2, #3
 8004508:	4650      	mov	r0, sl
 800450a:	f7fb fe69 	bl	80001e0 <memchr>
 800450e:	b138      	cbz	r0, 8004520 <_svfiprintf_r+0x150>
 8004510:	9b04      	ldr	r3, [sp, #16]
 8004512:	eba0 000a 	sub.w	r0, r0, sl
 8004516:	2240      	movs	r2, #64	@ 0x40
 8004518:	4082      	lsls	r2, r0
 800451a:	4313      	orrs	r3, r2
 800451c:	3401      	adds	r4, #1
 800451e:	9304      	str	r3, [sp, #16]
 8004520:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004524:	4824      	ldr	r0, [pc, #144]	@ (80045b8 <_svfiprintf_r+0x1e8>)
 8004526:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800452a:	2206      	movs	r2, #6
 800452c:	f7fb fe58 	bl	80001e0 <memchr>
 8004530:	2800      	cmp	r0, #0
 8004532:	d036      	beq.n	80045a2 <_svfiprintf_r+0x1d2>
 8004534:	4b21      	ldr	r3, [pc, #132]	@ (80045bc <_svfiprintf_r+0x1ec>)
 8004536:	bb1b      	cbnz	r3, 8004580 <_svfiprintf_r+0x1b0>
 8004538:	9b03      	ldr	r3, [sp, #12]
 800453a:	3307      	adds	r3, #7
 800453c:	f023 0307 	bic.w	r3, r3, #7
 8004540:	3308      	adds	r3, #8
 8004542:	9303      	str	r3, [sp, #12]
 8004544:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004546:	4433      	add	r3, r6
 8004548:	9309      	str	r3, [sp, #36]	@ 0x24
 800454a:	e76a      	b.n	8004422 <_svfiprintf_r+0x52>
 800454c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004550:	460c      	mov	r4, r1
 8004552:	2001      	movs	r0, #1
 8004554:	e7a8      	b.n	80044a8 <_svfiprintf_r+0xd8>
 8004556:	2300      	movs	r3, #0
 8004558:	3401      	adds	r4, #1
 800455a:	9305      	str	r3, [sp, #20]
 800455c:	4619      	mov	r1, r3
 800455e:	f04f 0c0a 	mov.w	ip, #10
 8004562:	4620      	mov	r0, r4
 8004564:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004568:	3a30      	subs	r2, #48	@ 0x30
 800456a:	2a09      	cmp	r2, #9
 800456c:	d903      	bls.n	8004576 <_svfiprintf_r+0x1a6>
 800456e:	2b00      	cmp	r3, #0
 8004570:	d0c6      	beq.n	8004500 <_svfiprintf_r+0x130>
 8004572:	9105      	str	r1, [sp, #20]
 8004574:	e7c4      	b.n	8004500 <_svfiprintf_r+0x130>
 8004576:	fb0c 2101 	mla	r1, ip, r1, r2
 800457a:	4604      	mov	r4, r0
 800457c:	2301      	movs	r3, #1
 800457e:	e7f0      	b.n	8004562 <_svfiprintf_r+0x192>
 8004580:	ab03      	add	r3, sp, #12
 8004582:	9300      	str	r3, [sp, #0]
 8004584:	462a      	mov	r2, r5
 8004586:	4b0e      	ldr	r3, [pc, #56]	@ (80045c0 <_svfiprintf_r+0x1f0>)
 8004588:	a904      	add	r1, sp, #16
 800458a:	4638      	mov	r0, r7
 800458c:	f3af 8000 	nop.w
 8004590:	1c42      	adds	r2, r0, #1
 8004592:	4606      	mov	r6, r0
 8004594:	d1d6      	bne.n	8004544 <_svfiprintf_r+0x174>
 8004596:	89ab      	ldrh	r3, [r5, #12]
 8004598:	065b      	lsls	r3, r3, #25
 800459a:	f53f af2d 	bmi.w	80043f8 <_svfiprintf_r+0x28>
 800459e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80045a0:	e72c      	b.n	80043fc <_svfiprintf_r+0x2c>
 80045a2:	ab03      	add	r3, sp, #12
 80045a4:	9300      	str	r3, [sp, #0]
 80045a6:	462a      	mov	r2, r5
 80045a8:	4b05      	ldr	r3, [pc, #20]	@ (80045c0 <_svfiprintf_r+0x1f0>)
 80045aa:	a904      	add	r1, sp, #16
 80045ac:	4638      	mov	r0, r7
 80045ae:	f000 f879 	bl	80046a4 <_printf_i>
 80045b2:	e7ed      	b.n	8004590 <_svfiprintf_r+0x1c0>
 80045b4:	08004d08 	.word	0x08004d08
 80045b8:	08004d12 	.word	0x08004d12
 80045bc:	00000000 	.word	0x00000000
 80045c0:	08004319 	.word	0x08004319
 80045c4:	08004d0e 	.word	0x08004d0e

080045c8 <_printf_common>:
 80045c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045cc:	4616      	mov	r6, r2
 80045ce:	4698      	mov	r8, r3
 80045d0:	688a      	ldr	r2, [r1, #8]
 80045d2:	690b      	ldr	r3, [r1, #16]
 80045d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80045d8:	4293      	cmp	r3, r2
 80045da:	bfb8      	it	lt
 80045dc:	4613      	movlt	r3, r2
 80045de:	6033      	str	r3, [r6, #0]
 80045e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80045e4:	4607      	mov	r7, r0
 80045e6:	460c      	mov	r4, r1
 80045e8:	b10a      	cbz	r2, 80045ee <_printf_common+0x26>
 80045ea:	3301      	adds	r3, #1
 80045ec:	6033      	str	r3, [r6, #0]
 80045ee:	6823      	ldr	r3, [r4, #0]
 80045f0:	0699      	lsls	r1, r3, #26
 80045f2:	bf42      	ittt	mi
 80045f4:	6833      	ldrmi	r3, [r6, #0]
 80045f6:	3302      	addmi	r3, #2
 80045f8:	6033      	strmi	r3, [r6, #0]
 80045fa:	6825      	ldr	r5, [r4, #0]
 80045fc:	f015 0506 	ands.w	r5, r5, #6
 8004600:	d106      	bne.n	8004610 <_printf_common+0x48>
 8004602:	f104 0a19 	add.w	sl, r4, #25
 8004606:	68e3      	ldr	r3, [r4, #12]
 8004608:	6832      	ldr	r2, [r6, #0]
 800460a:	1a9b      	subs	r3, r3, r2
 800460c:	42ab      	cmp	r3, r5
 800460e:	dc26      	bgt.n	800465e <_printf_common+0x96>
 8004610:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004614:	6822      	ldr	r2, [r4, #0]
 8004616:	3b00      	subs	r3, #0
 8004618:	bf18      	it	ne
 800461a:	2301      	movne	r3, #1
 800461c:	0692      	lsls	r2, r2, #26
 800461e:	d42b      	bmi.n	8004678 <_printf_common+0xb0>
 8004620:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004624:	4641      	mov	r1, r8
 8004626:	4638      	mov	r0, r7
 8004628:	47c8      	blx	r9
 800462a:	3001      	adds	r0, #1
 800462c:	d01e      	beq.n	800466c <_printf_common+0xa4>
 800462e:	6823      	ldr	r3, [r4, #0]
 8004630:	6922      	ldr	r2, [r4, #16]
 8004632:	f003 0306 	and.w	r3, r3, #6
 8004636:	2b04      	cmp	r3, #4
 8004638:	bf02      	ittt	eq
 800463a:	68e5      	ldreq	r5, [r4, #12]
 800463c:	6833      	ldreq	r3, [r6, #0]
 800463e:	1aed      	subeq	r5, r5, r3
 8004640:	68a3      	ldr	r3, [r4, #8]
 8004642:	bf0c      	ite	eq
 8004644:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004648:	2500      	movne	r5, #0
 800464a:	4293      	cmp	r3, r2
 800464c:	bfc4      	itt	gt
 800464e:	1a9b      	subgt	r3, r3, r2
 8004650:	18ed      	addgt	r5, r5, r3
 8004652:	2600      	movs	r6, #0
 8004654:	341a      	adds	r4, #26
 8004656:	42b5      	cmp	r5, r6
 8004658:	d11a      	bne.n	8004690 <_printf_common+0xc8>
 800465a:	2000      	movs	r0, #0
 800465c:	e008      	b.n	8004670 <_printf_common+0xa8>
 800465e:	2301      	movs	r3, #1
 8004660:	4652      	mov	r2, sl
 8004662:	4641      	mov	r1, r8
 8004664:	4638      	mov	r0, r7
 8004666:	47c8      	blx	r9
 8004668:	3001      	adds	r0, #1
 800466a:	d103      	bne.n	8004674 <_printf_common+0xac>
 800466c:	f04f 30ff 	mov.w	r0, #4294967295
 8004670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004674:	3501      	adds	r5, #1
 8004676:	e7c6      	b.n	8004606 <_printf_common+0x3e>
 8004678:	18e1      	adds	r1, r4, r3
 800467a:	1c5a      	adds	r2, r3, #1
 800467c:	2030      	movs	r0, #48	@ 0x30
 800467e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004682:	4422      	add	r2, r4
 8004684:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004688:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800468c:	3302      	adds	r3, #2
 800468e:	e7c7      	b.n	8004620 <_printf_common+0x58>
 8004690:	2301      	movs	r3, #1
 8004692:	4622      	mov	r2, r4
 8004694:	4641      	mov	r1, r8
 8004696:	4638      	mov	r0, r7
 8004698:	47c8      	blx	r9
 800469a:	3001      	adds	r0, #1
 800469c:	d0e6      	beq.n	800466c <_printf_common+0xa4>
 800469e:	3601      	adds	r6, #1
 80046a0:	e7d9      	b.n	8004656 <_printf_common+0x8e>
	...

080046a4 <_printf_i>:
 80046a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046a8:	7e0f      	ldrb	r7, [r1, #24]
 80046aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80046ac:	2f78      	cmp	r7, #120	@ 0x78
 80046ae:	4691      	mov	r9, r2
 80046b0:	4680      	mov	r8, r0
 80046b2:	460c      	mov	r4, r1
 80046b4:	469a      	mov	sl, r3
 80046b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80046ba:	d807      	bhi.n	80046cc <_printf_i+0x28>
 80046bc:	2f62      	cmp	r7, #98	@ 0x62
 80046be:	d80a      	bhi.n	80046d6 <_printf_i+0x32>
 80046c0:	2f00      	cmp	r7, #0
 80046c2:	f000 80d2 	beq.w	800486a <_printf_i+0x1c6>
 80046c6:	2f58      	cmp	r7, #88	@ 0x58
 80046c8:	f000 80b9 	beq.w	800483e <_printf_i+0x19a>
 80046cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80046d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80046d4:	e03a      	b.n	800474c <_printf_i+0xa8>
 80046d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80046da:	2b15      	cmp	r3, #21
 80046dc:	d8f6      	bhi.n	80046cc <_printf_i+0x28>
 80046de:	a101      	add	r1, pc, #4	@ (adr r1, 80046e4 <_printf_i+0x40>)
 80046e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80046e4:	0800473d 	.word	0x0800473d
 80046e8:	08004751 	.word	0x08004751
 80046ec:	080046cd 	.word	0x080046cd
 80046f0:	080046cd 	.word	0x080046cd
 80046f4:	080046cd 	.word	0x080046cd
 80046f8:	080046cd 	.word	0x080046cd
 80046fc:	08004751 	.word	0x08004751
 8004700:	080046cd 	.word	0x080046cd
 8004704:	080046cd 	.word	0x080046cd
 8004708:	080046cd 	.word	0x080046cd
 800470c:	080046cd 	.word	0x080046cd
 8004710:	08004851 	.word	0x08004851
 8004714:	0800477b 	.word	0x0800477b
 8004718:	0800480b 	.word	0x0800480b
 800471c:	080046cd 	.word	0x080046cd
 8004720:	080046cd 	.word	0x080046cd
 8004724:	08004873 	.word	0x08004873
 8004728:	080046cd 	.word	0x080046cd
 800472c:	0800477b 	.word	0x0800477b
 8004730:	080046cd 	.word	0x080046cd
 8004734:	080046cd 	.word	0x080046cd
 8004738:	08004813 	.word	0x08004813
 800473c:	6833      	ldr	r3, [r6, #0]
 800473e:	1d1a      	adds	r2, r3, #4
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	6032      	str	r2, [r6, #0]
 8004744:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004748:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800474c:	2301      	movs	r3, #1
 800474e:	e09d      	b.n	800488c <_printf_i+0x1e8>
 8004750:	6833      	ldr	r3, [r6, #0]
 8004752:	6820      	ldr	r0, [r4, #0]
 8004754:	1d19      	adds	r1, r3, #4
 8004756:	6031      	str	r1, [r6, #0]
 8004758:	0606      	lsls	r6, r0, #24
 800475a:	d501      	bpl.n	8004760 <_printf_i+0xbc>
 800475c:	681d      	ldr	r5, [r3, #0]
 800475e:	e003      	b.n	8004768 <_printf_i+0xc4>
 8004760:	0645      	lsls	r5, r0, #25
 8004762:	d5fb      	bpl.n	800475c <_printf_i+0xb8>
 8004764:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004768:	2d00      	cmp	r5, #0
 800476a:	da03      	bge.n	8004774 <_printf_i+0xd0>
 800476c:	232d      	movs	r3, #45	@ 0x2d
 800476e:	426d      	negs	r5, r5
 8004770:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004774:	4859      	ldr	r0, [pc, #356]	@ (80048dc <_printf_i+0x238>)
 8004776:	230a      	movs	r3, #10
 8004778:	e011      	b.n	800479e <_printf_i+0xfa>
 800477a:	6821      	ldr	r1, [r4, #0]
 800477c:	6833      	ldr	r3, [r6, #0]
 800477e:	0608      	lsls	r0, r1, #24
 8004780:	f853 5b04 	ldr.w	r5, [r3], #4
 8004784:	d402      	bmi.n	800478c <_printf_i+0xe8>
 8004786:	0649      	lsls	r1, r1, #25
 8004788:	bf48      	it	mi
 800478a:	b2ad      	uxthmi	r5, r5
 800478c:	2f6f      	cmp	r7, #111	@ 0x6f
 800478e:	4853      	ldr	r0, [pc, #332]	@ (80048dc <_printf_i+0x238>)
 8004790:	6033      	str	r3, [r6, #0]
 8004792:	bf14      	ite	ne
 8004794:	230a      	movne	r3, #10
 8004796:	2308      	moveq	r3, #8
 8004798:	2100      	movs	r1, #0
 800479a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800479e:	6866      	ldr	r6, [r4, #4]
 80047a0:	60a6      	str	r6, [r4, #8]
 80047a2:	2e00      	cmp	r6, #0
 80047a4:	bfa2      	ittt	ge
 80047a6:	6821      	ldrge	r1, [r4, #0]
 80047a8:	f021 0104 	bicge.w	r1, r1, #4
 80047ac:	6021      	strge	r1, [r4, #0]
 80047ae:	b90d      	cbnz	r5, 80047b4 <_printf_i+0x110>
 80047b0:	2e00      	cmp	r6, #0
 80047b2:	d04b      	beq.n	800484c <_printf_i+0x1a8>
 80047b4:	4616      	mov	r6, r2
 80047b6:	fbb5 f1f3 	udiv	r1, r5, r3
 80047ba:	fb03 5711 	mls	r7, r3, r1, r5
 80047be:	5dc7      	ldrb	r7, [r0, r7]
 80047c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80047c4:	462f      	mov	r7, r5
 80047c6:	42bb      	cmp	r3, r7
 80047c8:	460d      	mov	r5, r1
 80047ca:	d9f4      	bls.n	80047b6 <_printf_i+0x112>
 80047cc:	2b08      	cmp	r3, #8
 80047ce:	d10b      	bne.n	80047e8 <_printf_i+0x144>
 80047d0:	6823      	ldr	r3, [r4, #0]
 80047d2:	07df      	lsls	r7, r3, #31
 80047d4:	d508      	bpl.n	80047e8 <_printf_i+0x144>
 80047d6:	6923      	ldr	r3, [r4, #16]
 80047d8:	6861      	ldr	r1, [r4, #4]
 80047da:	4299      	cmp	r1, r3
 80047dc:	bfde      	ittt	le
 80047de:	2330      	movle	r3, #48	@ 0x30
 80047e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80047e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80047e8:	1b92      	subs	r2, r2, r6
 80047ea:	6122      	str	r2, [r4, #16]
 80047ec:	f8cd a000 	str.w	sl, [sp]
 80047f0:	464b      	mov	r3, r9
 80047f2:	aa03      	add	r2, sp, #12
 80047f4:	4621      	mov	r1, r4
 80047f6:	4640      	mov	r0, r8
 80047f8:	f7ff fee6 	bl	80045c8 <_printf_common>
 80047fc:	3001      	adds	r0, #1
 80047fe:	d14a      	bne.n	8004896 <_printf_i+0x1f2>
 8004800:	f04f 30ff 	mov.w	r0, #4294967295
 8004804:	b004      	add	sp, #16
 8004806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800480a:	6823      	ldr	r3, [r4, #0]
 800480c:	f043 0320 	orr.w	r3, r3, #32
 8004810:	6023      	str	r3, [r4, #0]
 8004812:	4833      	ldr	r0, [pc, #204]	@ (80048e0 <_printf_i+0x23c>)
 8004814:	2778      	movs	r7, #120	@ 0x78
 8004816:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800481a:	6823      	ldr	r3, [r4, #0]
 800481c:	6831      	ldr	r1, [r6, #0]
 800481e:	061f      	lsls	r7, r3, #24
 8004820:	f851 5b04 	ldr.w	r5, [r1], #4
 8004824:	d402      	bmi.n	800482c <_printf_i+0x188>
 8004826:	065f      	lsls	r7, r3, #25
 8004828:	bf48      	it	mi
 800482a:	b2ad      	uxthmi	r5, r5
 800482c:	6031      	str	r1, [r6, #0]
 800482e:	07d9      	lsls	r1, r3, #31
 8004830:	bf44      	itt	mi
 8004832:	f043 0320 	orrmi.w	r3, r3, #32
 8004836:	6023      	strmi	r3, [r4, #0]
 8004838:	b11d      	cbz	r5, 8004842 <_printf_i+0x19e>
 800483a:	2310      	movs	r3, #16
 800483c:	e7ac      	b.n	8004798 <_printf_i+0xf4>
 800483e:	4827      	ldr	r0, [pc, #156]	@ (80048dc <_printf_i+0x238>)
 8004840:	e7e9      	b.n	8004816 <_printf_i+0x172>
 8004842:	6823      	ldr	r3, [r4, #0]
 8004844:	f023 0320 	bic.w	r3, r3, #32
 8004848:	6023      	str	r3, [r4, #0]
 800484a:	e7f6      	b.n	800483a <_printf_i+0x196>
 800484c:	4616      	mov	r6, r2
 800484e:	e7bd      	b.n	80047cc <_printf_i+0x128>
 8004850:	6833      	ldr	r3, [r6, #0]
 8004852:	6825      	ldr	r5, [r4, #0]
 8004854:	6961      	ldr	r1, [r4, #20]
 8004856:	1d18      	adds	r0, r3, #4
 8004858:	6030      	str	r0, [r6, #0]
 800485a:	062e      	lsls	r6, r5, #24
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	d501      	bpl.n	8004864 <_printf_i+0x1c0>
 8004860:	6019      	str	r1, [r3, #0]
 8004862:	e002      	b.n	800486a <_printf_i+0x1c6>
 8004864:	0668      	lsls	r0, r5, #25
 8004866:	d5fb      	bpl.n	8004860 <_printf_i+0x1bc>
 8004868:	8019      	strh	r1, [r3, #0]
 800486a:	2300      	movs	r3, #0
 800486c:	6123      	str	r3, [r4, #16]
 800486e:	4616      	mov	r6, r2
 8004870:	e7bc      	b.n	80047ec <_printf_i+0x148>
 8004872:	6833      	ldr	r3, [r6, #0]
 8004874:	1d1a      	adds	r2, r3, #4
 8004876:	6032      	str	r2, [r6, #0]
 8004878:	681e      	ldr	r6, [r3, #0]
 800487a:	6862      	ldr	r2, [r4, #4]
 800487c:	2100      	movs	r1, #0
 800487e:	4630      	mov	r0, r6
 8004880:	f7fb fcae 	bl	80001e0 <memchr>
 8004884:	b108      	cbz	r0, 800488a <_printf_i+0x1e6>
 8004886:	1b80      	subs	r0, r0, r6
 8004888:	6060      	str	r0, [r4, #4]
 800488a:	6863      	ldr	r3, [r4, #4]
 800488c:	6123      	str	r3, [r4, #16]
 800488e:	2300      	movs	r3, #0
 8004890:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004894:	e7aa      	b.n	80047ec <_printf_i+0x148>
 8004896:	6923      	ldr	r3, [r4, #16]
 8004898:	4632      	mov	r2, r6
 800489a:	4649      	mov	r1, r9
 800489c:	4640      	mov	r0, r8
 800489e:	47d0      	blx	sl
 80048a0:	3001      	adds	r0, #1
 80048a2:	d0ad      	beq.n	8004800 <_printf_i+0x15c>
 80048a4:	6823      	ldr	r3, [r4, #0]
 80048a6:	079b      	lsls	r3, r3, #30
 80048a8:	d413      	bmi.n	80048d2 <_printf_i+0x22e>
 80048aa:	68e0      	ldr	r0, [r4, #12]
 80048ac:	9b03      	ldr	r3, [sp, #12]
 80048ae:	4298      	cmp	r0, r3
 80048b0:	bfb8      	it	lt
 80048b2:	4618      	movlt	r0, r3
 80048b4:	e7a6      	b.n	8004804 <_printf_i+0x160>
 80048b6:	2301      	movs	r3, #1
 80048b8:	4632      	mov	r2, r6
 80048ba:	4649      	mov	r1, r9
 80048bc:	4640      	mov	r0, r8
 80048be:	47d0      	blx	sl
 80048c0:	3001      	adds	r0, #1
 80048c2:	d09d      	beq.n	8004800 <_printf_i+0x15c>
 80048c4:	3501      	adds	r5, #1
 80048c6:	68e3      	ldr	r3, [r4, #12]
 80048c8:	9903      	ldr	r1, [sp, #12]
 80048ca:	1a5b      	subs	r3, r3, r1
 80048cc:	42ab      	cmp	r3, r5
 80048ce:	dcf2      	bgt.n	80048b6 <_printf_i+0x212>
 80048d0:	e7eb      	b.n	80048aa <_printf_i+0x206>
 80048d2:	2500      	movs	r5, #0
 80048d4:	f104 0619 	add.w	r6, r4, #25
 80048d8:	e7f5      	b.n	80048c6 <_printf_i+0x222>
 80048da:	bf00      	nop
 80048dc:	08004d19 	.word	0x08004d19
 80048e0:	08004d2a 	.word	0x08004d2a

080048e4 <__sflush_r>:
 80048e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80048e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048ec:	0716      	lsls	r6, r2, #28
 80048ee:	4605      	mov	r5, r0
 80048f0:	460c      	mov	r4, r1
 80048f2:	d454      	bmi.n	800499e <__sflush_r+0xba>
 80048f4:	684b      	ldr	r3, [r1, #4]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	dc02      	bgt.n	8004900 <__sflush_r+0x1c>
 80048fa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	dd48      	ble.n	8004992 <__sflush_r+0xae>
 8004900:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004902:	2e00      	cmp	r6, #0
 8004904:	d045      	beq.n	8004992 <__sflush_r+0xae>
 8004906:	2300      	movs	r3, #0
 8004908:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800490c:	682f      	ldr	r7, [r5, #0]
 800490e:	6a21      	ldr	r1, [r4, #32]
 8004910:	602b      	str	r3, [r5, #0]
 8004912:	d030      	beq.n	8004976 <__sflush_r+0x92>
 8004914:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004916:	89a3      	ldrh	r3, [r4, #12]
 8004918:	0759      	lsls	r1, r3, #29
 800491a:	d505      	bpl.n	8004928 <__sflush_r+0x44>
 800491c:	6863      	ldr	r3, [r4, #4]
 800491e:	1ad2      	subs	r2, r2, r3
 8004920:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004922:	b10b      	cbz	r3, 8004928 <__sflush_r+0x44>
 8004924:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004926:	1ad2      	subs	r2, r2, r3
 8004928:	2300      	movs	r3, #0
 800492a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800492c:	6a21      	ldr	r1, [r4, #32]
 800492e:	4628      	mov	r0, r5
 8004930:	47b0      	blx	r6
 8004932:	1c43      	adds	r3, r0, #1
 8004934:	89a3      	ldrh	r3, [r4, #12]
 8004936:	d106      	bne.n	8004946 <__sflush_r+0x62>
 8004938:	6829      	ldr	r1, [r5, #0]
 800493a:	291d      	cmp	r1, #29
 800493c:	d82b      	bhi.n	8004996 <__sflush_r+0xb2>
 800493e:	4a2a      	ldr	r2, [pc, #168]	@ (80049e8 <__sflush_r+0x104>)
 8004940:	410a      	asrs	r2, r1
 8004942:	07d6      	lsls	r6, r2, #31
 8004944:	d427      	bmi.n	8004996 <__sflush_r+0xb2>
 8004946:	2200      	movs	r2, #0
 8004948:	6062      	str	r2, [r4, #4]
 800494a:	04d9      	lsls	r1, r3, #19
 800494c:	6922      	ldr	r2, [r4, #16]
 800494e:	6022      	str	r2, [r4, #0]
 8004950:	d504      	bpl.n	800495c <__sflush_r+0x78>
 8004952:	1c42      	adds	r2, r0, #1
 8004954:	d101      	bne.n	800495a <__sflush_r+0x76>
 8004956:	682b      	ldr	r3, [r5, #0]
 8004958:	b903      	cbnz	r3, 800495c <__sflush_r+0x78>
 800495a:	6560      	str	r0, [r4, #84]	@ 0x54
 800495c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800495e:	602f      	str	r7, [r5, #0]
 8004960:	b1b9      	cbz	r1, 8004992 <__sflush_r+0xae>
 8004962:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004966:	4299      	cmp	r1, r3
 8004968:	d002      	beq.n	8004970 <__sflush_r+0x8c>
 800496a:	4628      	mov	r0, r5
 800496c:	f7ff fc8a 	bl	8004284 <_free_r>
 8004970:	2300      	movs	r3, #0
 8004972:	6363      	str	r3, [r4, #52]	@ 0x34
 8004974:	e00d      	b.n	8004992 <__sflush_r+0xae>
 8004976:	2301      	movs	r3, #1
 8004978:	4628      	mov	r0, r5
 800497a:	47b0      	blx	r6
 800497c:	4602      	mov	r2, r0
 800497e:	1c50      	adds	r0, r2, #1
 8004980:	d1c9      	bne.n	8004916 <__sflush_r+0x32>
 8004982:	682b      	ldr	r3, [r5, #0]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d0c6      	beq.n	8004916 <__sflush_r+0x32>
 8004988:	2b1d      	cmp	r3, #29
 800498a:	d001      	beq.n	8004990 <__sflush_r+0xac>
 800498c:	2b16      	cmp	r3, #22
 800498e:	d11e      	bne.n	80049ce <__sflush_r+0xea>
 8004990:	602f      	str	r7, [r5, #0]
 8004992:	2000      	movs	r0, #0
 8004994:	e022      	b.n	80049dc <__sflush_r+0xf8>
 8004996:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800499a:	b21b      	sxth	r3, r3
 800499c:	e01b      	b.n	80049d6 <__sflush_r+0xf2>
 800499e:	690f      	ldr	r7, [r1, #16]
 80049a0:	2f00      	cmp	r7, #0
 80049a2:	d0f6      	beq.n	8004992 <__sflush_r+0xae>
 80049a4:	0793      	lsls	r3, r2, #30
 80049a6:	680e      	ldr	r6, [r1, #0]
 80049a8:	bf08      	it	eq
 80049aa:	694b      	ldreq	r3, [r1, #20]
 80049ac:	600f      	str	r7, [r1, #0]
 80049ae:	bf18      	it	ne
 80049b0:	2300      	movne	r3, #0
 80049b2:	eba6 0807 	sub.w	r8, r6, r7
 80049b6:	608b      	str	r3, [r1, #8]
 80049b8:	f1b8 0f00 	cmp.w	r8, #0
 80049bc:	dde9      	ble.n	8004992 <__sflush_r+0xae>
 80049be:	6a21      	ldr	r1, [r4, #32]
 80049c0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80049c2:	4643      	mov	r3, r8
 80049c4:	463a      	mov	r2, r7
 80049c6:	4628      	mov	r0, r5
 80049c8:	47b0      	blx	r6
 80049ca:	2800      	cmp	r0, #0
 80049cc:	dc08      	bgt.n	80049e0 <__sflush_r+0xfc>
 80049ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049d6:	81a3      	strh	r3, [r4, #12]
 80049d8:	f04f 30ff 	mov.w	r0, #4294967295
 80049dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049e0:	4407      	add	r7, r0
 80049e2:	eba8 0800 	sub.w	r8, r8, r0
 80049e6:	e7e7      	b.n	80049b8 <__sflush_r+0xd4>
 80049e8:	dfbffffe 	.word	0xdfbffffe

080049ec <_fflush_r>:
 80049ec:	b538      	push	{r3, r4, r5, lr}
 80049ee:	690b      	ldr	r3, [r1, #16]
 80049f0:	4605      	mov	r5, r0
 80049f2:	460c      	mov	r4, r1
 80049f4:	b913      	cbnz	r3, 80049fc <_fflush_r+0x10>
 80049f6:	2500      	movs	r5, #0
 80049f8:	4628      	mov	r0, r5
 80049fa:	bd38      	pop	{r3, r4, r5, pc}
 80049fc:	b118      	cbz	r0, 8004a06 <_fflush_r+0x1a>
 80049fe:	6a03      	ldr	r3, [r0, #32]
 8004a00:	b90b      	cbnz	r3, 8004a06 <_fflush_r+0x1a>
 8004a02:	f7ff fa05 	bl	8003e10 <__sinit>
 8004a06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d0f3      	beq.n	80049f6 <_fflush_r+0xa>
 8004a0e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004a10:	07d0      	lsls	r0, r2, #31
 8004a12:	d404      	bmi.n	8004a1e <_fflush_r+0x32>
 8004a14:	0599      	lsls	r1, r3, #22
 8004a16:	d402      	bmi.n	8004a1e <_fflush_r+0x32>
 8004a18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a1a:	f7ff fc22 	bl	8004262 <__retarget_lock_acquire_recursive>
 8004a1e:	4628      	mov	r0, r5
 8004a20:	4621      	mov	r1, r4
 8004a22:	f7ff ff5f 	bl	80048e4 <__sflush_r>
 8004a26:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a28:	07da      	lsls	r2, r3, #31
 8004a2a:	4605      	mov	r5, r0
 8004a2c:	d4e4      	bmi.n	80049f8 <_fflush_r+0xc>
 8004a2e:	89a3      	ldrh	r3, [r4, #12]
 8004a30:	059b      	lsls	r3, r3, #22
 8004a32:	d4e1      	bmi.n	80049f8 <_fflush_r+0xc>
 8004a34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a36:	f7ff fc15 	bl	8004264 <__retarget_lock_release_recursive>
 8004a3a:	e7dd      	b.n	80049f8 <_fflush_r+0xc>

08004a3c <__swhatbuf_r>:
 8004a3c:	b570      	push	{r4, r5, r6, lr}
 8004a3e:	460c      	mov	r4, r1
 8004a40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a44:	2900      	cmp	r1, #0
 8004a46:	b096      	sub	sp, #88	@ 0x58
 8004a48:	4615      	mov	r5, r2
 8004a4a:	461e      	mov	r6, r3
 8004a4c:	da0d      	bge.n	8004a6a <__swhatbuf_r+0x2e>
 8004a4e:	89a3      	ldrh	r3, [r4, #12]
 8004a50:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004a54:	f04f 0100 	mov.w	r1, #0
 8004a58:	bf14      	ite	ne
 8004a5a:	2340      	movne	r3, #64	@ 0x40
 8004a5c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004a60:	2000      	movs	r0, #0
 8004a62:	6031      	str	r1, [r6, #0]
 8004a64:	602b      	str	r3, [r5, #0]
 8004a66:	b016      	add	sp, #88	@ 0x58
 8004a68:	bd70      	pop	{r4, r5, r6, pc}
 8004a6a:	466a      	mov	r2, sp
 8004a6c:	f000 f862 	bl	8004b34 <_fstat_r>
 8004a70:	2800      	cmp	r0, #0
 8004a72:	dbec      	blt.n	8004a4e <__swhatbuf_r+0x12>
 8004a74:	9901      	ldr	r1, [sp, #4]
 8004a76:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004a7a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004a7e:	4259      	negs	r1, r3
 8004a80:	4159      	adcs	r1, r3
 8004a82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004a86:	e7eb      	b.n	8004a60 <__swhatbuf_r+0x24>

08004a88 <__smakebuf_r>:
 8004a88:	898b      	ldrh	r3, [r1, #12]
 8004a8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a8c:	079d      	lsls	r5, r3, #30
 8004a8e:	4606      	mov	r6, r0
 8004a90:	460c      	mov	r4, r1
 8004a92:	d507      	bpl.n	8004aa4 <__smakebuf_r+0x1c>
 8004a94:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004a98:	6023      	str	r3, [r4, #0]
 8004a9a:	6123      	str	r3, [r4, #16]
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	6163      	str	r3, [r4, #20]
 8004aa0:	b003      	add	sp, #12
 8004aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004aa4:	ab01      	add	r3, sp, #4
 8004aa6:	466a      	mov	r2, sp
 8004aa8:	f7ff ffc8 	bl	8004a3c <__swhatbuf_r>
 8004aac:	9f00      	ldr	r7, [sp, #0]
 8004aae:	4605      	mov	r5, r0
 8004ab0:	4639      	mov	r1, r7
 8004ab2:	4630      	mov	r0, r6
 8004ab4:	f7ff f894 	bl	8003be0 <_malloc_r>
 8004ab8:	b948      	cbnz	r0, 8004ace <__smakebuf_r+0x46>
 8004aba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004abe:	059a      	lsls	r2, r3, #22
 8004ac0:	d4ee      	bmi.n	8004aa0 <__smakebuf_r+0x18>
 8004ac2:	f023 0303 	bic.w	r3, r3, #3
 8004ac6:	f043 0302 	orr.w	r3, r3, #2
 8004aca:	81a3      	strh	r3, [r4, #12]
 8004acc:	e7e2      	b.n	8004a94 <__smakebuf_r+0xc>
 8004ace:	89a3      	ldrh	r3, [r4, #12]
 8004ad0:	6020      	str	r0, [r4, #0]
 8004ad2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ad6:	81a3      	strh	r3, [r4, #12]
 8004ad8:	9b01      	ldr	r3, [sp, #4]
 8004ada:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004ade:	b15b      	cbz	r3, 8004af8 <__smakebuf_r+0x70>
 8004ae0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ae4:	4630      	mov	r0, r6
 8004ae6:	f000 f837 	bl	8004b58 <_isatty_r>
 8004aea:	b128      	cbz	r0, 8004af8 <__smakebuf_r+0x70>
 8004aec:	89a3      	ldrh	r3, [r4, #12]
 8004aee:	f023 0303 	bic.w	r3, r3, #3
 8004af2:	f043 0301 	orr.w	r3, r3, #1
 8004af6:	81a3      	strh	r3, [r4, #12]
 8004af8:	89a3      	ldrh	r3, [r4, #12]
 8004afa:	431d      	orrs	r5, r3
 8004afc:	81a5      	strh	r5, [r4, #12]
 8004afe:	e7cf      	b.n	8004aa0 <__smakebuf_r+0x18>

08004b00 <memmove>:
 8004b00:	4288      	cmp	r0, r1
 8004b02:	b510      	push	{r4, lr}
 8004b04:	eb01 0402 	add.w	r4, r1, r2
 8004b08:	d902      	bls.n	8004b10 <memmove+0x10>
 8004b0a:	4284      	cmp	r4, r0
 8004b0c:	4623      	mov	r3, r4
 8004b0e:	d807      	bhi.n	8004b20 <memmove+0x20>
 8004b10:	1e43      	subs	r3, r0, #1
 8004b12:	42a1      	cmp	r1, r4
 8004b14:	d008      	beq.n	8004b28 <memmove+0x28>
 8004b16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004b1e:	e7f8      	b.n	8004b12 <memmove+0x12>
 8004b20:	4402      	add	r2, r0
 8004b22:	4601      	mov	r1, r0
 8004b24:	428a      	cmp	r2, r1
 8004b26:	d100      	bne.n	8004b2a <memmove+0x2a>
 8004b28:	bd10      	pop	{r4, pc}
 8004b2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004b2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004b32:	e7f7      	b.n	8004b24 <memmove+0x24>

08004b34 <_fstat_r>:
 8004b34:	b538      	push	{r3, r4, r5, lr}
 8004b36:	4d07      	ldr	r5, [pc, #28]	@ (8004b54 <_fstat_r+0x20>)
 8004b38:	2300      	movs	r3, #0
 8004b3a:	4604      	mov	r4, r0
 8004b3c:	4608      	mov	r0, r1
 8004b3e:	4611      	mov	r1, r2
 8004b40:	602b      	str	r3, [r5, #0]
 8004b42:	f7fc ff13 	bl	800196c <_fstat>
 8004b46:	1c43      	adds	r3, r0, #1
 8004b48:	d102      	bne.n	8004b50 <_fstat_r+0x1c>
 8004b4a:	682b      	ldr	r3, [r5, #0]
 8004b4c:	b103      	cbz	r3, 8004b50 <_fstat_r+0x1c>
 8004b4e:	6023      	str	r3, [r4, #0]
 8004b50:	bd38      	pop	{r3, r4, r5, pc}
 8004b52:	bf00      	nop
 8004b54:	200004bc 	.word	0x200004bc

08004b58 <_isatty_r>:
 8004b58:	b538      	push	{r3, r4, r5, lr}
 8004b5a:	4d06      	ldr	r5, [pc, #24]	@ (8004b74 <_isatty_r+0x1c>)
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	4604      	mov	r4, r0
 8004b60:	4608      	mov	r0, r1
 8004b62:	602b      	str	r3, [r5, #0]
 8004b64:	f7fc ff12 	bl	800198c <_isatty>
 8004b68:	1c43      	adds	r3, r0, #1
 8004b6a:	d102      	bne.n	8004b72 <_isatty_r+0x1a>
 8004b6c:	682b      	ldr	r3, [r5, #0]
 8004b6e:	b103      	cbz	r3, 8004b72 <_isatty_r+0x1a>
 8004b70:	6023      	str	r3, [r4, #0]
 8004b72:	bd38      	pop	{r3, r4, r5, pc}
 8004b74:	200004bc 	.word	0x200004bc

08004b78 <_realloc_r>:
 8004b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b7c:	4680      	mov	r8, r0
 8004b7e:	4615      	mov	r5, r2
 8004b80:	460c      	mov	r4, r1
 8004b82:	b921      	cbnz	r1, 8004b8e <_realloc_r+0x16>
 8004b84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b88:	4611      	mov	r1, r2
 8004b8a:	f7ff b829 	b.w	8003be0 <_malloc_r>
 8004b8e:	b92a      	cbnz	r2, 8004b9c <_realloc_r+0x24>
 8004b90:	f7ff fb78 	bl	8004284 <_free_r>
 8004b94:	2400      	movs	r4, #0
 8004b96:	4620      	mov	r0, r4
 8004b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b9c:	f000 f81a 	bl	8004bd4 <_malloc_usable_size_r>
 8004ba0:	4285      	cmp	r5, r0
 8004ba2:	4606      	mov	r6, r0
 8004ba4:	d802      	bhi.n	8004bac <_realloc_r+0x34>
 8004ba6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004baa:	d8f4      	bhi.n	8004b96 <_realloc_r+0x1e>
 8004bac:	4629      	mov	r1, r5
 8004bae:	4640      	mov	r0, r8
 8004bb0:	f7ff f816 	bl	8003be0 <_malloc_r>
 8004bb4:	4607      	mov	r7, r0
 8004bb6:	2800      	cmp	r0, #0
 8004bb8:	d0ec      	beq.n	8004b94 <_realloc_r+0x1c>
 8004bba:	42b5      	cmp	r5, r6
 8004bbc:	462a      	mov	r2, r5
 8004bbe:	4621      	mov	r1, r4
 8004bc0:	bf28      	it	cs
 8004bc2:	4632      	movcs	r2, r6
 8004bc4:	f7ff fb4f 	bl	8004266 <memcpy>
 8004bc8:	4621      	mov	r1, r4
 8004bca:	4640      	mov	r0, r8
 8004bcc:	f7ff fb5a 	bl	8004284 <_free_r>
 8004bd0:	463c      	mov	r4, r7
 8004bd2:	e7e0      	b.n	8004b96 <_realloc_r+0x1e>

08004bd4 <_malloc_usable_size_r>:
 8004bd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bd8:	1f18      	subs	r0, r3, #4
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	bfbc      	itt	lt
 8004bde:	580b      	ldrlt	r3, [r1, r0]
 8004be0:	18c0      	addlt	r0, r0, r3
 8004be2:	4770      	bx	lr

08004be4 <_init>:
 8004be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004be6:	bf00      	nop
 8004be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bea:	bc08      	pop	{r3}
 8004bec:	469e      	mov	lr, r3
 8004bee:	4770      	bx	lr

08004bf0 <_fini>:
 8004bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bf2:	bf00      	nop
 8004bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bf6:	bc08      	pop	{r3}
 8004bf8:	469e      	mov	lr, r3
 8004bfa:	4770      	bx	lr
