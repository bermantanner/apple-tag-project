
youlostit-ble.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c20  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08004db0  08004db0  00005db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f48  08004f48  000061b8  2**0
                  CONTENTS
  4 .ARM          00000008  08004f48  08004f48  00005f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f50  08004f50  000061b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f50  08004f50  00005f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f54  08004f54  00005f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001b8  20000000  08004f58  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000300  200001b8  08005110  000061b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b8  08005110  000064b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000061b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ad3a  00000000  00000000  000061e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000200e  00000000  00000000  00010f22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c8  00000000  00000000  00012f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000745  00000000  00000000  000138f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002721c  00000000  00000000  0001403d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b12b  00000000  00000000  0003b259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0f7b  00000000  00000000  00046384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001372ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f74  00000000  00000000  00137344  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a4  00000000  00000000  0013a2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001b8 	.word	0x200001b8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004d98 	.word	0x08004d98

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001bc 	.word	0x200001bc
 80001cc:	08004d98 	.word	0x08004d98

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <ble_init>:
 int16_t connectionHandler[2] = {-1, -1}; // Little Endian Format for connection handler

 /**
  * Initializes the BLE module with appropriate settings
  */
 void ble_init(){
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af02      	add	r7, sp, #8
	 //fetching the reset event
	 rxEvent=(uint8_t*)malloc(EVENT_STARTUP_SIZE);
 8000286:	2006      	movs	r0, #6
 8000288:	f003 fbfe 	bl	8003a88 <malloc>
 800028c:	4603      	mov	r3, r0
 800028e:	461a      	mov	r2, r3
 8000290:	4b6f      	ldr	r3, [pc, #444]	@ (8000450 <ble_init+0x1d0>)
 8000292:	601a      	str	r2, [r3, #0]
	 int res;

	 while(!dataAvailable);
 8000294:	bf00      	nop
 8000296:	4b6f      	ldr	r3, [pc, #444]	@ (8000454 <ble_init+0x1d4>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d0fb      	beq.n	8000296 <ble_init+0x16>
	 res=fetchBleEvent(rxEvent,EVENT_STARTUP_SIZE);
 800029e:	4b6c      	ldr	r3, [pc, #432]	@ (8000450 <ble_init+0x1d0>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	2106      	movs	r1, #6
 80002a4:	4618      	mov	r0, r3
 80002a6:	f000 f903 	bl	80004b0 <fetchBleEvent>
 80002aa:	6078      	str	r0, [r7, #4]

	 if(res==BLE_OK){
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d111      	bne.n	80002d6 <ble_init+0x56>
	 res=checkEventResp(rxEvent,EVENT_STATUP_DATA,EVENT_STARTUP_SIZE);
 80002b2:	4b67      	ldr	r3, [pc, #412]	@ (8000450 <ble_init+0x1d0>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	2206      	movs	r2, #6
 80002b8:	4967      	ldr	r1, [pc, #412]	@ (8000458 <ble_init+0x1d8>)
 80002ba:	4618      	mov	r0, r3
 80002bc:	f000 f982 	bl	80005c4 <checkEventResp>
 80002c0:	6078      	str	r0, [r7, #4]
	 if(res==BLE_OK){
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d106      	bne.n	80002d6 <ble_init+0x56>
		stackInitCompleteFlag|=0x01;
 80002c8:	4b64      	ldr	r3, [pc, #400]	@ (800045c <ble_init+0x1dc>)
 80002ca:	881b      	ldrh	r3, [r3, #0]
 80002cc:	f043 0301 	orr.w	r3, r3, #1
 80002d0:	b29a      	uxth	r2, r3
 80002d2:	4b62      	ldr	r3, [pc, #392]	@ (800045c <ble_init+0x1dc>)
 80002d4:	801a      	strh	r2, [r3, #0]
	 }
	 }
	 HAL_Delay(10);
 80002d6:	200a      	movs	r0, #10
 80002d8:	f001 fc8c 	bl	8001bf4 <HAL_Delay>
	 free(rxEvent);
 80002dc:	4b5c      	ldr	r3, [pc, #368]	@ (8000450 <ble_init+0x1d0>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4618      	mov	r0, r3
 80002e2:	f003 fbd9 	bl	8003a98 <free>

	 //INIT GATT
	 if(BLE_command(ACI_GATT_INIT,sizeof(ACI_GATT_INIT),ACI_GATT_INIT_COMPLETE,sizeof(ACI_GATT_INIT_COMPLETE),0)==BLE_OK){
 80002e6:	2300      	movs	r3, #0
 80002e8:	9300      	str	r3, [sp, #0]
 80002ea:	2307      	movs	r3, #7
 80002ec:	4a5c      	ldr	r2, [pc, #368]	@ (8000460 <ble_init+0x1e0>)
 80002ee:	2104      	movs	r1, #4
 80002f0:	485c      	ldr	r0, [pc, #368]	@ (8000464 <ble_init+0x1e4>)
 80002f2:	f000 fa9d 	bl	8000830 <BLE_command>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d106      	bne.n	800030a <ble_init+0x8a>
		stackInitCompleteFlag|=0x02;
 80002fc:	4b57      	ldr	r3, [pc, #348]	@ (800045c <ble_init+0x1dc>)
 80002fe:	881b      	ldrh	r3, [r3, #0]
 8000300:	f043 0302 	orr.w	r3, r3, #2
 8000304:	b29a      	uxth	r2, r3
 8000306:	4b55      	ldr	r3, [pc, #340]	@ (800045c <ble_init+0x1dc>)
 8000308:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 800030a:	4b51      	ldr	r3, [pc, #324]	@ (8000450 <ble_init+0x1d0>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	4618      	mov	r0, r3
 8000310:	f003 fbc2 	bl	8003a98 <free>

	 //INIT GAP, actually the handle that i get is a GATT handle of a service, will change the name later
	 if(BLE_command(ACI_GAP_INIT,sizeof(ACI_GAP_INIT),ACI_GAP_INIT_COMPLETE,sizeof(ACI_GAP_INIT_COMPLETE),3)==BLE_OK){
 8000314:	2303      	movs	r3, #3
 8000316:	9300      	str	r3, [sp, #0]
 8000318:	2307      	movs	r3, #7
 800031a:	4a53      	ldr	r2, [pc, #332]	@ (8000468 <ble_init+0x1e8>)
 800031c:	2107      	movs	r1, #7
 800031e:	4853      	ldr	r0, [pc, #332]	@ (800046c <ble_init+0x1ec>)
 8000320:	f000 fa86 	bl	8000830 <BLE_command>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d11b      	bne.n	8000362 <ble_init+0xe2>
		stackInitCompleteFlag|=0x04;
 800032a:	4b4c      	ldr	r3, [pc, #304]	@ (800045c <ble_init+0x1dc>)
 800032c:	881b      	ldrh	r3, [r3, #0]
 800032e:	f043 0304 	orr.w	r3, r3, #4
 8000332:	b29a      	uxth	r2, r3
 8000334:	4b49      	ldr	r3, [pc, #292]	@ (800045c <ble_init+0x1dc>)
 8000336:	801a      	strh	r2, [r3, #0]
		memcpy(GAP_SERVICE_HANDLE,rxEvent+7,2);
 8000338:	4b45      	ldr	r3, [pc, #276]	@ (8000450 <ble_init+0x1d0>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	3307      	adds	r3, #7
 800033e:	881b      	ldrh	r3, [r3, #0]
 8000340:	b29a      	uxth	r2, r3
 8000342:	4b4b      	ldr	r3, [pc, #300]	@ (8000470 <ble_init+0x1f0>)
 8000344:	801a      	strh	r2, [r3, #0]
		memcpy(GAP_CHAR_NAME_HANDLE,rxEvent+9,2);
 8000346:	4b42      	ldr	r3, [pc, #264]	@ (8000450 <ble_init+0x1d0>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	3309      	adds	r3, #9
 800034c:	881b      	ldrh	r3, [r3, #0]
 800034e:	b29a      	uxth	r2, r3
 8000350:	4b48      	ldr	r3, [pc, #288]	@ (8000474 <ble_init+0x1f4>)
 8000352:	801a      	strh	r2, [r3, #0]
		memcpy(GAP_CHAR_APP_HANDLE,rxEvent+11,2);
 8000354:	4b3e      	ldr	r3, [pc, #248]	@ (8000450 <ble_init+0x1d0>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	330b      	adds	r3, #11
 800035a:	881b      	ldrh	r3, [r3, #0]
 800035c:	b29a      	uxth	r2, r3
 800035e:	4b46      	ldr	r3, [pc, #280]	@ (8000478 <ble_init+0x1f8>)
 8000360:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 8000362:	4b3b      	ldr	r3, [pc, #236]	@ (8000450 <ble_init+0x1d0>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	4618      	mov	r0, r3
 8000368:	f003 fb96 	bl	8003a98 <free>

	 //SET THE NAME OF THE BOARD IN THE SERVICE CREATED AUTOMATICALLY
	 updateCharValue(GAP_SERVICE_HANDLE,GAP_CHAR_NAME_HANDLE,0,sizeof(deviceName),deviceName);
 800036c:	4b43      	ldr	r3, [pc, #268]	@ (800047c <ble_init+0x1fc>)
 800036e:	9300      	str	r3, [sp, #0]
 8000370:	2307      	movs	r3, #7
 8000372:	2200      	movs	r2, #0
 8000374:	493f      	ldr	r1, [pc, #252]	@ (8000474 <ble_init+0x1f4>)
 8000376:	483e      	ldr	r0, [pc, #248]	@ (8000470 <ble_init+0x1f0>)
 8000378:	f000 fb20 	bl	80009bc <updateCharValue>
	 stackInitCompleteFlag|=0x08;
 800037c:	4b37      	ldr	r3, [pc, #220]	@ (800045c <ble_init+0x1dc>)
 800037e:	881b      	ldrh	r3, [r3, #0]
 8000380:	f043 0308 	orr.w	r3, r3, #8
 8000384:	b29a      	uxth	r2, r3
 8000386:	4b35      	ldr	r3, [pc, #212]	@ (800045c <ble_init+0x1dc>)
 8000388:	801a      	strh	r2, [r3, #0]
	 free(rxEvent);
 800038a:	4b31      	ldr	r3, [pc, #196]	@ (8000450 <ble_init+0x1d0>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	4618      	mov	r0, r3
 8000390:	f003 fb82 	bl	8003a98 <free>

	 //INIT AUTH
	 if(BLE_command(ACI_GAP_SET_AUTH,sizeof(ACI_GAP_SET_AUTH),ACI_GAP_SET_AUTH_RESP,sizeof(ACI_GAP_SET_AUTH_RESP),0)==BLE_OK){
 8000394:	2300      	movs	r3, #0
 8000396:	9300      	str	r3, [sp, #0]
 8000398:	2307      	movs	r3, #7
 800039a:	4a39      	ldr	r2, [pc, #228]	@ (8000480 <ble_init+0x200>)
 800039c:	2110      	movs	r1, #16
 800039e:	4839      	ldr	r0, [pc, #228]	@ (8000484 <ble_init+0x204>)
 80003a0:	f000 fa46 	bl	8000830 <BLE_command>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d106      	bne.n	80003b8 <ble_init+0x138>
		stackInitCompleteFlag|=0x10;
 80003aa:	4b2c      	ldr	r3, [pc, #176]	@ (800045c <ble_init+0x1dc>)
 80003ac:	881b      	ldrh	r3, [r3, #0]
 80003ae:	f043 0310 	orr.w	r3, r3, #16
 80003b2:	b29a      	uxth	r2, r3
 80003b4:	4b29      	ldr	r3, [pc, #164]	@ (800045c <ble_init+0x1dc>)
 80003b6:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 80003b8:	4b25      	ldr	r3, [pc, #148]	@ (8000450 <ble_init+0x1d0>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4618      	mov	r0, r3
 80003be:	f003 fb6b 	bl	8003a98 <free>

	 //SET_TX_LEVEL
	 if(BLE_command(ACI_HAL_SET_TX_POWER_LEVEL,sizeof(ACI_HAL_SET_TX_POWER_LEVEL),ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE,sizeof(ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE),0)==BLE_OK){
 80003c2:	2300      	movs	r3, #0
 80003c4:	9300      	str	r3, [sp, #0]
 80003c6:	2307      	movs	r3, #7
 80003c8:	4a2f      	ldr	r2, [pc, #188]	@ (8000488 <ble_init+0x208>)
 80003ca:	2106      	movs	r1, #6
 80003cc:	482f      	ldr	r0, [pc, #188]	@ (800048c <ble_init+0x20c>)
 80003ce:	f000 fa2f 	bl	8000830 <BLE_command>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d106      	bne.n	80003e6 <ble_init+0x166>
		stackInitCompleteFlag|=0x20;
 80003d8:	4b20      	ldr	r3, [pc, #128]	@ (800045c <ble_init+0x1dc>)
 80003da:	881b      	ldrh	r3, [r3, #0]
 80003dc:	f043 0320 	orr.w	r3, r3, #32
 80003e0:	b29a      	uxth	r2, r3
 80003e2:	4b1e      	ldr	r3, [pc, #120]	@ (800045c <ble_init+0x1dc>)
 80003e4:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 80003e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000450 <ble_init+0x1d0>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	4618      	mov	r0, r3
 80003ec:	f003 fb54 	bl	8003a98 <free>

	 //SET SCAN RESPONSE DATA
	 if(BLE_command(HCI_LE_SET_SCAN_RESPONSE_DATA,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA),HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE),0)==BLE_OK){
 80003f0:	2300      	movs	r3, #0
 80003f2:	9300      	str	r3, [sp, #0]
 80003f4:	2307      	movs	r3, #7
 80003f6:	4a26      	ldr	r2, [pc, #152]	@ (8000490 <ble_init+0x210>)
 80003f8:	2124      	movs	r1, #36	@ 0x24
 80003fa:	4826      	ldr	r0, [pc, #152]	@ (8000494 <ble_init+0x214>)
 80003fc:	f000 fa18 	bl	8000830 <BLE_command>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d106      	bne.n	8000414 <ble_init+0x194>
		stackInitCompleteFlag|=0x40;
 8000406:	4b15      	ldr	r3, [pc, #84]	@ (800045c <ble_init+0x1dc>)
 8000408:	881b      	ldrh	r3, [r3, #0]
 800040a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800040e:	b29a      	uxth	r2, r3
 8000410:	4b12      	ldr	r3, [pc, #72]	@ (800045c <ble_init+0x1dc>)
 8000412:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 8000414:	4b0e      	ldr	r3, [pc, #56]	@ (8000450 <ble_init+0x1d0>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4618      	mov	r0, r3
 800041a:	f003 fb3d 	bl	8003a98 <free>

	 //This will start the advertisment,
	 //setConnectable();

	 //add the nordic UART service
	 addService(UUID_NORDIC_UART_SERVICE,NORDIC_UART_SERVICE_HANDLE,SET_ATTRIBUTES(7)); //SET_ATTRIBUTES(1+2+3*2+3+3));//1 atribute service +2 attribute char readable+3*(2 NOTIFYABLE READABLE charachteristics)
 800041e:	2207      	movs	r2, #7
 8000420:	491d      	ldr	r1, [pc, #116]	@ (8000498 <ble_init+0x218>)
 8000422:	481e      	ldr	r0, [pc, #120]	@ (800049c <ble_init+0x21c>)
 8000424:	f000 fa50 	bl	80008c8 <addService>

	 //add the nordic UART charachteristics
	 addCharacteristic(UUID_CHAR_READ,READ_CHAR_HANDLE,NORDIC_UART_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),NOTIFIBLE);
 8000428:	2310      	movs	r3, #16
 800042a:	9300      	str	r3, [sp, #0]
 800042c:	2314      	movs	r3, #20
 800042e:	4a1a      	ldr	r2, [pc, #104]	@ (8000498 <ble_init+0x218>)
 8000430:	491b      	ldr	r1, [pc, #108]	@ (80004a0 <ble_init+0x220>)
 8000432:	481c      	ldr	r0, [pc, #112]	@ (80004a4 <ble_init+0x224>)
 8000434:	f000 fa80 	bl	8000938 <addCharacteristic>
	 addCharacteristic(UUID_CHAR_WRITE,WRITE_CHAR_HANDLE,NORDIC_UART_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),WRITABLE);
 8000438:	2304      	movs	r3, #4
 800043a:	9300      	str	r3, [sp, #0]
 800043c:	2314      	movs	r3, #20
 800043e:	4a16      	ldr	r2, [pc, #88]	@ (8000498 <ble_init+0x218>)
 8000440:	4919      	ldr	r1, [pc, #100]	@ (80004a8 <ble_init+0x228>)
 8000442:	481a      	ldr	r0, [pc, #104]	@ (80004ac <ble_init+0x22c>)
 8000444:	f000 fa78 	bl	8000938 <addCharacteristic>

	 if(stackInitCompleteFlag==255){
	   //turn on led blue if everything was fine
	 //  HAL_GPIO_WritePin(CPU_LED_GPIO_Port,CPU_LED_Pin,GPIO_PIN_SET);
	 }
	 return;
 8000448:	bf00      	nop
 }
 800044a:	3708      	adds	r7, #8
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}
 8000450:	200002ec 	.word	0x200002ec
 8000454:	200002f0 	.word	0x200002f0
 8000458:	20000000 	.word	0x20000000
 800045c:	200002ea 	.word	0x200002ea
 8000460:	2000000c 	.word	0x2000000c
 8000464:	20000008 	.word	0x20000008
 8000468:	2000001c 	.word	0x2000001c
 800046c:	20000014 	.word	0x20000014
 8000470:	200001d4 	.word	0x200001d4
 8000474:	200001d8 	.word	0x200001d8
 8000478:	200001dc 	.word	0x200001dc
 800047c:	20000114 	.word	0x20000114
 8000480:	20000034 	.word	0x20000034
 8000484:	20000024 	.word	0x20000024
 8000488:	20000044 	.word	0x20000044
 800048c:	2000003c 	.word	0x2000003c
 8000490:	20000070 	.word	0x20000070
 8000494:	2000004c 	.word	0x2000004c
 8000498:	200002e0 	.word	0x200002e0
 800049c:	2000011c 	.word	0x2000011c
 80004a0:	200002e8 	.word	0x200002e8
 80004a4:	2000013c 	.word	0x2000013c
 80004a8:	200002e4 	.word	0x200002e4
 80004ac:	2000012c 	.word	0x2000012c

080004b0 <fetchBleEvent>:
	  if(BLE_command(ACI_HAL_SET_STANDBY,sizeof(ACI_HAL_SET_STANDBY),ACI_HAL_SET_STANDBY_COMPLETE,sizeof(ACI_HAL_SET_STANDBY_COMPLETE),0)==BLE_OK){
	  }
	  free(rxEvent);
 }

 int fetchBleEvent(uint8_t *container, int size){
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b08c      	sub	sp, #48	@ 0x30
 80004b4:	af02      	add	r7, sp, #8
 80004b6:	6078      	str	r0, [r7, #4]
 80004b8:	6039      	str	r1, [r7, #0]

   uint8_t master_header[]={0x0b,0x00,0x00,0x00,0x00};
 80004ba:	4a3d      	ldr	r2, [pc, #244]	@ (80005b0 <fetchBleEvent+0x100>)
 80004bc:	f107 0318 	add.w	r3, r7, #24
 80004c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004c4:	6018      	str	r0, [r3, #0]
 80004c6:	3304      	adds	r3, #4
 80004c8:	7019      	strb	r1, [r3, #0]
   uint8_t slave_header[5];

   //Wait until it is available an event coming from the BLE module (GPIO PIN COULD CHANGE ACCORDING TO THE BOARD)
   if(HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 80004ca:	2140      	movs	r1, #64	@ 0x40
 80004cc:	4839      	ldr	r0, [pc, #228]	@ (80005b4 <fetchBleEvent+0x104>)
 80004ce:	f001 fe91 	bl	80021f4 <HAL_GPIO_ReadPin>
 80004d2:	4603      	mov	r3, r0
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d065      	beq.n	80005a4 <fetchBleEvent+0xf4>

   HAL_Delay(5);
 80004d8:	2005      	movs	r0, #5
 80004da:	f001 fb8b 	bl	8001bf4 <HAL_Delay>
   //PIN_CS of SPI2 LOW
   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 80004de:	2200      	movs	r2, #0
 80004e0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004e4:	4834      	ldr	r0, [pc, #208]	@ (80005b8 <fetchBleEvent+0x108>)
 80004e6:	f001 fe9d 	bl	8002224 <HAL_GPIO_WritePin>

   //SPI2 in this case, it could change according to the board
   //we send a byte containing a request of reading followed by 4 dummy bytes
   HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 80004ea:	f107 0210 	add.w	r2, r7, #16
 80004ee:	f107 0118 	add.w	r1, r7, #24
 80004f2:	2301      	movs	r3, #1
 80004f4:	9300      	str	r3, [sp, #0]
 80004f6:	2305      	movs	r3, #5
 80004f8:	4830      	ldr	r0, [pc, #192]	@ (80005bc <fetchBleEvent+0x10c>)
 80004fa:	f002 ff3f 	bl	800337c <HAL_SPI_TransmitReceive>
   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 80004fe:	2201      	movs	r2, #1
 8000500:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000504:	482c      	ldr	r0, [pc, #176]	@ (80005b8 <fetchBleEvent+0x108>)
 8000506:	f001 fe8d 	bl	8002224 <HAL_GPIO_WritePin>
   HAL_Delay(1);
 800050a:	2001      	movs	r0, #1
 800050c:	f001 fb72 	bl	8001bf4 <HAL_Delay>
   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 8000510:	2200      	movs	r2, #0
 8000512:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000516:	4828      	ldr	r0, [pc, #160]	@ (80005b8 <fetchBleEvent+0x108>)
 8000518:	f001 fe84 	bl	8002224 <HAL_GPIO_WritePin>

   HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 800051c:	f107 0210 	add.w	r2, r7, #16
 8000520:	f107 0118 	add.w	r1, r7, #24
 8000524:	2301      	movs	r3, #1
 8000526:	9300      	str	r3, [sp, #0]
 8000528:	2305      	movs	r3, #5
 800052a:	4824      	ldr	r0, [pc, #144]	@ (80005bc <fetchBleEvent+0x10c>)
 800052c:	f002 ff26 	bl	800337c <HAL_SPI_TransmitReceive>

   //let's get the size of data available
   int dataSize;
   dataSize=(slave_header[3]|slave_header[4]<<8);
 8000530:	7cfb      	ldrb	r3, [r7, #19]
 8000532:	461a      	mov	r2, r3
 8000534:	7d3b      	ldrb	r3, [r7, #20]
 8000536:	021b      	lsls	r3, r3, #8
 8000538:	4313      	orrs	r3, r2
 800053a:	627b      	str	r3, [r7, #36]	@ 0x24
   int i;
   char dummy=0xff;
 800053c:	23ff      	movs	r3, #255	@ 0xff
 800053e:	73fb      	strb	r3, [r7, #15]

   if(dataSize>size){
 8000540:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000542:	683b      	ldr	r3, [r7, #0]
 8000544:	429a      	cmp	r2, r3
 8000546:	dd01      	ble.n	800054c <fetchBleEvent+0x9c>
	   dataSize=size;
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	627b      	str	r3, [r7, #36]	@ 0x24
   }

   if(dataSize>0){
 800054c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800054e:	2b00      	cmp	r3, #0
 8000550:	dd1f      	ble.n	8000592 <fetchBleEvent+0xe2>
		 //let's fill the get the bytes availables and insert them into the container variable
		   for(i=0;i<dataSize;i++){
 8000552:	2300      	movs	r3, #0
 8000554:	623b      	str	r3, [r7, #32]
 8000556:	e00d      	b.n	8000574 <fetchBleEvent+0xc4>
		   HAL_SPI_TransmitReceive(&hspi3,(uint8_t*)&dummy,container+i,1,1);
 8000558:	6a3b      	ldr	r3, [r7, #32]
 800055a:	687a      	ldr	r2, [r7, #4]
 800055c:	441a      	add	r2, r3
 800055e:	f107 010f 	add.w	r1, r7, #15
 8000562:	2301      	movs	r3, #1
 8000564:	9300      	str	r3, [sp, #0]
 8000566:	2301      	movs	r3, #1
 8000568:	4814      	ldr	r0, [pc, #80]	@ (80005bc <fetchBleEvent+0x10c>)
 800056a:	f002 ff07 	bl	800337c <HAL_SPI_TransmitReceive>
		   for(i=0;i<dataSize;i++){
 800056e:	6a3b      	ldr	r3, [r7, #32]
 8000570:	3301      	adds	r3, #1
 8000572:	623b      	str	r3, [r7, #32]
 8000574:	6a3a      	ldr	r2, [r7, #32]
 8000576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000578:	429a      	cmp	r2, r3
 800057a:	dbed      	blt.n	8000558 <fetchBleEvent+0xa8>

		   }
		   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 800057c:	2201      	movs	r2, #1
 800057e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000582:	480d      	ldr	r0, [pc, #52]	@ (80005b8 <fetchBleEvent+0x108>)
 8000584:	f001 fe4e 	bl	8002224 <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
		 return -1;
	   }

   //let's stop the SPI2
   dataAvailable=0;
 8000588:	4b0d      	ldr	r3, [pc, #52]	@ (80005c0 <fetchBleEvent+0x110>)
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
   return BLE_OK;
 800058e:	2300      	movs	r3, #0
 8000590:	e00a      	b.n	80005a8 <fetchBleEvent+0xf8>
		   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000592:	2201      	movs	r2, #1
 8000594:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000598:	4807      	ldr	r0, [pc, #28]	@ (80005b8 <fetchBleEvent+0x108>)
 800059a:	f001 fe43 	bl	8002224 <HAL_GPIO_WritePin>
		 return -1;
 800059e:	f04f 33ff 	mov.w	r3, #4294967295
 80005a2:	e001      	b.n	80005a8 <fetchBleEvent+0xf8>
   }else{
   return -2;
 80005a4:	f06f 0301 	mvn.w	r3, #1
   }
 }
 80005a8:	4618      	mov	r0, r3
 80005aa:	3728      	adds	r7, #40	@ 0x28
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	08004db0 	.word	0x08004db0
 80005b4:	48001000 	.word	0x48001000
 80005b8:	48000c00 	.word	0x48000c00
 80005bc:	200002f4 	.word	0x200002f4
 80005c0:	200002f0 	.word	0x200002f0

080005c4 <checkEventResp>:


 int checkEventResp(uint8_t *event, uint8_t *reference, int size){
 80005c4:	b480      	push	{r7}
 80005c6:	b087      	sub	sp, #28
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	607a      	str	r2, [r7, #4]
	 int j=0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	617b      	str	r3, [r7, #20]

	 for(j=0;j<size;j++){
 80005d4:	2300      	movs	r3, #0
 80005d6:	617b      	str	r3, [r7, #20]
 80005d8:	e00f      	b.n	80005fa <checkEventResp+0x36>

		 if(event[j]!=reference[j]){
 80005da:	697b      	ldr	r3, [r7, #20]
 80005dc:	68fa      	ldr	r2, [r7, #12]
 80005de:	4413      	add	r3, r2
 80005e0:	781a      	ldrb	r2, [r3, #0]
 80005e2:	697b      	ldr	r3, [r7, #20]
 80005e4:	68b9      	ldr	r1, [r7, #8]
 80005e6:	440b      	add	r3, r1
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	429a      	cmp	r2, r3
 80005ec:	d002      	beq.n	80005f4 <checkEventResp+0x30>
			 return -1;
 80005ee:	f04f 33ff 	mov.w	r3, #4294967295
 80005f2:	e007      	b.n	8000604 <checkEventResp+0x40>
	 for(j=0;j<size;j++){
 80005f4:	697b      	ldr	r3, [r7, #20]
 80005f6:	3301      	adds	r3, #1
 80005f8:	617b      	str	r3, [r7, #20]
 80005fa:	697a      	ldr	r2, [r7, #20]
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	429a      	cmp	r2, r3
 8000600:	dbeb      	blt.n	80005da <checkEventResp+0x16>
		 }
	 }

 return BLE_OK;
 8000602:	2300      	movs	r3, #0
 }
 8000604:	4618      	mov	r0, r3
 8000606:	371c      	adds	r7, #28
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr

08000610 <sendCommand>:

 void sendCommand(uint8_t *command,int size){
 8000610:	b580      	push	{r7, lr}
 8000612:	b08a      	sub	sp, #40	@ 0x28
 8000614:	af02      	add	r7, sp, #8
 8000616:	6078      	str	r0, [r7, #4]
 8000618:	6039      	str	r1, [r7, #0]

	   uint8_t master_header[]={0x0a,0x00,0x00,0x00,0x00};
 800061a:	4a1f      	ldr	r2, [pc, #124]	@ (8000698 <sendCommand+0x88>)
 800061c:	f107 0310 	add.w	r3, r7, #16
 8000620:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000624:	6018      	str	r0, [r3, #0]
 8000626:	3304      	adds	r3, #4
 8000628:	7019      	strb	r1, [r3, #0]
	   uint8_t slave_header[5];

	   int result;

	 do{
	   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 800062a:	2200      	movs	r2, #0
 800062c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000630:	481a      	ldr	r0, [pc, #104]	@ (800069c <sendCommand+0x8c>)
 8000632:	f001 fdf7 	bl	8002224 <HAL_GPIO_WritePin>

	   //wait until it is possible to write
	   //while(!dataAvailable);
	   HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 8000636:	f107 0208 	add.w	r2, r7, #8
 800063a:	f107 0110 	add.w	r1, r7, #16
 800063e:	2301      	movs	r3, #1
 8000640:	9300      	str	r3, [sp, #0]
 8000642:	2305      	movs	r3, #5
 8000644:	4816      	ldr	r0, [pc, #88]	@ (80006a0 <sendCommand+0x90>)
 8000646:	f002 fe99 	bl	800337c <HAL_SPI_TransmitReceive>
	   int bufferSize=(slave_header[2]<<8|slave_header[1]);
 800064a:	7abb      	ldrb	r3, [r7, #10]
 800064c:	021b      	lsls	r3, r3, #8
 800064e:	7a7a      	ldrb	r2, [r7, #9]
 8000650:	4313      	orrs	r3, r2
 8000652:	61bb      	str	r3, [r7, #24]
	   if(bufferSize>=size){
 8000654:	69ba      	ldr	r2, [r7, #24]
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	429a      	cmp	r2, r3
 800065a:	db09      	blt.n	8000670 <sendCommand+0x60>
		 HAL_SPI_Transmit(&hspi3,command,size,1);
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	b29a      	uxth	r2, r3
 8000660:	2301      	movs	r3, #1
 8000662:	6879      	ldr	r1, [r7, #4]
 8000664:	480e      	ldr	r0, [pc, #56]	@ (80006a0 <sendCommand+0x90>)
 8000666:	f002 fd14 	bl	8003092 <HAL_SPI_Transmit>
		 result=0;
 800066a:	2300      	movs	r3, #0
 800066c:	61fb      	str	r3, [r7, #28]
 800066e:	e002      	b.n	8000676 <sendCommand+0x66>
	   }else{
		 result=-1;
 8000670:	f04f 33ff 	mov.w	r3, #4294967295
 8000674:	61fb      	str	r3, [r7, #28]
	   }
	   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000676:	2201      	movs	r2, #1
 8000678:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800067c:	4807      	ldr	r0, [pc, #28]	@ (800069c <sendCommand+0x8c>)
 800067e:	f001 fdd1 	bl	8002224 <HAL_GPIO_WritePin>
	   dataAvailable=0;
 8000682:	4b08      	ldr	r3, [pc, #32]	@ (80006a4 <sendCommand+0x94>)
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
	 }while(result!=0);
 8000688:	69fb      	ldr	r3, [r7, #28]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d1cd      	bne.n	800062a <sendCommand+0x1a>

 }
 800068e:	bf00      	nop
 8000690:	bf00      	nop
 8000692:	3720      	adds	r7, #32
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	08004db8 	.word	0x08004db8
 800069c:	48000c00 	.word	0x48000c00
 80006a0:	200002f4 	.word	0x200002f4
 80006a4:	200002f0 	.word	0x200002f0

080006a8 <catchBLE>:

 void catchBLE(uint8_t * byte1, uint8_t * byte2){
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	6039      	str	r1, [r7, #0]
	 int result=fetchBleEvent(buffer,127);
 80006b2:	217f      	movs	r1, #127	@ 0x7f
 80006b4:	4819      	ldr	r0, [pc, #100]	@ (800071c <catchBLE+0x74>)
 80006b6:	f7ff fefb 	bl	80004b0 <fetchBleEvent>
 80006ba:	60f8      	str	r0, [r7, #12]
	 if(result==BLE_OK){
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d128      	bne.n	8000714 <catchBLE+0x6c>
		 if(checkEventResp(buffer,EVENT_DISCONNECTED,3)==BLE_OK){
 80006c2:	2203      	movs	r2, #3
 80006c4:	4916      	ldr	r1, [pc, #88]	@ (8000720 <catchBLE+0x78>)
 80006c6:	4815      	ldr	r0, [pc, #84]	@ (800071c <catchBLE+0x74>)
 80006c8:	f7ff ff7c 	bl	80005c4 <checkEventResp>
			 //setConnectable();
		 }
		 if(checkEventResp(buffer, EVENT_CONNECTED, 5)==BLE_OK){
 80006cc:	2205      	movs	r2, #5
 80006ce:	4915      	ldr	r1, [pc, #84]	@ (8000724 <catchBLE+0x7c>)
 80006d0:	4812      	ldr	r0, [pc, #72]	@ (800071c <catchBLE+0x74>)
 80006d2:	f7ff ff77 	bl	80005c4 <checkEventResp>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d109      	bne.n	80006f0 <catchBLE+0x48>
			 // Little Endian Format
			 *(connectionHandler) = buffer[5];
 80006dc:	4b0f      	ldr	r3, [pc, #60]	@ (800071c <catchBLE+0x74>)
 80006de:	795b      	ldrb	r3, [r3, #5]
 80006e0:	b21a      	sxth	r2, r3
 80006e2:	4b11      	ldr	r3, [pc, #68]	@ (8000728 <catchBLE+0x80>)
 80006e4:	801a      	strh	r2, [r3, #0]
			 *(connectionHandler + 1) = buffer[6];
 80006e6:	4b0d      	ldr	r3, [pc, #52]	@ (800071c <catchBLE+0x74>)
 80006e8:	799b      	ldrb	r3, [r3, #6]
 80006ea:	b21a      	sxth	r2, r3
 80006ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000728 <catchBLE+0x80>)
 80006ee:	805a      	strh	r2, [r3, #2]
		 }
		 if (checkEventResp(buffer, EVENT_GATT_CHANGED, 5)){
 80006f0:	2205      	movs	r2, #5
 80006f2:	490e      	ldr	r1, [pc, #56]	@ (800072c <catchBLE+0x84>)
 80006f4:	4809      	ldr	r0, [pc, #36]	@ (800071c <catchBLE+0x74>)
 80006f6:	f7ff ff65 	bl	80005c4 <checkEventResp>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d009      	beq.n	8000714 <catchBLE+0x6c>
			 *(connectionHandler) = buffer[5];
 8000700:	4b06      	ldr	r3, [pc, #24]	@ (800071c <catchBLE+0x74>)
 8000702:	795b      	ldrb	r3, [r3, #5]
 8000704:	b21a      	sxth	r2, r3
 8000706:	4b08      	ldr	r3, [pc, #32]	@ (8000728 <catchBLE+0x80>)
 8000708:	801a      	strh	r2, [r3, #0]
			 *(connectionHandler + 1) = buffer[6];
 800070a:	4b04      	ldr	r3, [pc, #16]	@ (800071c <catchBLE+0x74>)
 800070c:	799b      	ldrb	r3, [r3, #6]
 800070e:	b21a      	sxth	r2, r3
 8000710:	4b05      	ldr	r3, [pc, #20]	@ (8000728 <catchBLE+0x80>)
 8000712:	805a      	strh	r2, [r3, #2]
		 }
	 }else{
		 //something bad is happening if I am here
	 }
 }
 8000714:	bf00      	nop
 8000716:	3710      	adds	r7, #16
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	200001e0 	.word	0x200001e0
 8000720:	200000ec 	.word	0x200000ec
 8000724:	200000f8 	.word	0x200000f8
 8000728:	2000014c 	.word	0x2000014c
 800072c:	20000100 	.word	0x20000100

08000730 <setConnectable>:
//		free(discoverableCommand);
//		free(localname);
//		HAL_Delay(10);
// }

 void setConnectable(){
 8000730:	b590      	push	{r4, r7, lr}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0
 		uint8_t* rxEvent;
 		//Start advertising
 		uint8_t *localname;
 		int res;
 		localname=(uint8_t*)malloc(sizeof(deviceName)+5);//carattere di terminazione+listauid+slavetemp
 8000736:	200c      	movs	r0, #12
 8000738:	f003 f9a6 	bl	8003a88 <malloc>
 800073c:	4603      	mov	r3, r0
 800073e:	60fb      	str	r3, [r7, #12]
 		memcpy(localname,deviceName,sizeof(deviceName));
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	4a37      	ldr	r2, [pc, #220]	@ (8000820 <setConnectable+0xf0>)
 8000744:	6810      	ldr	r0, [r2, #0]
 8000746:	6018      	str	r0, [r3, #0]
 8000748:	8891      	ldrh	r1, [r2, #4]
 800074a:	7992      	ldrb	r2, [r2, #6]
 800074c:	8099      	strh	r1, [r3, #4]
 800074e:	719a      	strb	r2, [r3, #6]
 		localname[sizeof(deviceName)+1]=0x00;
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	3308      	adds	r3, #8
 8000754:	2200      	movs	r2, #0
 8000756:	701a      	strb	r2, [r3, #0]
 		localname[sizeof(deviceName)+2]=0x00;
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	3309      	adds	r3, #9
 800075c:	2200      	movs	r2, #0
 800075e:	701a      	strb	r2, [r3, #0]
 		localname[sizeof(deviceName)+3]=0x00;
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	330a      	adds	r3, #10
 8000764:	2200      	movs	r2, #0
 8000766:	701a      	strb	r2, [r3, #0]
 		localname[sizeof(deviceName)+4]=0x00;
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	330b      	adds	r3, #11
 800076c:	2200      	movs	r2, #0
 800076e:	701a      	strb	r2, [r3, #0]
 		localname[sizeof(deviceName)]=0x00;
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	3307      	adds	r3, #7
 8000774:	2200      	movs	r2, #0
 8000776:	701a      	strb	r2, [r3, #0]


 		ACI_GAP_SET_DISCOVERABLE[11]=sizeof(deviceName)+1;
 8000778:	4b2a      	ldr	r3, [pc, #168]	@ (8000824 <setConnectable+0xf4>)
 800077a:	2208      	movs	r2, #8
 800077c:	72da      	strb	r2, [r3, #11]
 		ACI_GAP_SET_DISCOVERABLE[3]=sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE)-4;
 800077e:	4b29      	ldr	r3, [pc, #164]	@ (8000824 <setConnectable+0xf4>)
 8000780:	2215      	movs	r2, #21
 8000782:	70da      	strb	r2, [r3, #3]

 		uint8_t *discoverableCommand;
 		discoverableCommand=(uint8_t*)malloc(sizeof(ACI_GAP_SET_DISCOVERABLE)+sizeof(deviceName)+5);
 8000784:	2019      	movs	r0, #25
 8000786:	f003 f97f 	bl	8003a88 <malloc>
 800078a:	4603      	mov	r3, r0
 800078c:	60bb      	str	r3, [r7, #8]
 		memcpy(discoverableCommand,ACI_GAP_SET_DISCOVERABLE,sizeof(ACI_GAP_SET_DISCOVERABLE));
 800078e:	68bb      	ldr	r3, [r7, #8]
 8000790:	4a24      	ldr	r2, [pc, #144]	@ (8000824 <setConnectable+0xf4>)
 8000792:	461c      	mov	r4, r3
 8000794:	4613      	mov	r3, r2
 8000796:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000798:	6020      	str	r0, [r4, #0]
 800079a:	6061      	str	r1, [r4, #4]
 800079c:	60a2      	str	r2, [r4, #8]
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	7323      	strb	r3, [r4, #12]
 		memcpy(discoverableCommand+sizeof(ACI_GAP_SET_DISCOVERABLE),localname,sizeof(deviceName)+5);
 80007a2:	68bb      	ldr	r3, [r7, #8]
 80007a4:	330d      	adds	r3, #13
 80007a6:	220c      	movs	r2, #12
 80007a8:	68f9      	ldr	r1, [r7, #12]
 80007aa:	4618      	mov	r0, r3
 80007ac:	f003 fcf3 	bl	8004196 <memcpy>

 		// remove existing buffer content
 		rxEvent=(uint8_t*)malloc(7);
 80007b0:	2007      	movs	r0, #7
 80007b2:	f003 f969 	bl	8003a88 <malloc>
 80007b6:	4603      	mov	r3, r0
 80007b8:	607b      	str	r3, [r7, #4]
 		res=fetchBleEvent(rxEvent,7);
 80007ba:	2107      	movs	r1, #7
 80007bc:	6878      	ldr	r0, [r7, #4]
 80007be:	f7ff fe77 	bl	80004b0 <fetchBleEvent>
 80007c2:	6038      	str	r0, [r7, #0]

 		// send the command to make the peripheral discoverable
 		sendCommand(discoverableCommand,sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE));
 80007c4:	2119      	movs	r1, #25
 80007c6:	68b8      	ldr	r0, [r7, #8]
 80007c8:	f7ff ff22 	bl	8000610 <sendCommand>
 		HAL_Delay(100);
 80007cc:	2064      	movs	r0, #100	@ 0x64
 80007ce:	f001 fa11 	bl	8001bf4 <HAL_Delay>
 		res=fetchBleEvent(rxEvent,7);
 80007d2:	2107      	movs	r1, #7
 80007d4:	6878      	ldr	r0, [r7, #4]
 80007d6:	f7ff fe6b 	bl	80004b0 <fetchBleEvent>
 80007da:	6038      	str	r0, [r7, #0]
 		if(res==BLE_OK){
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d10e      	bne.n	8000800 <setConnectable+0xd0>
 		   if(checkEventResp(rxEvent, ACI_GAP_SET_DISCOVERABLE_COMPLETE, 7)==BLE_OK){
 80007e2:	2207      	movs	r2, #7
 80007e4:	4910      	ldr	r1, [pc, #64]	@ (8000828 <setConnectable+0xf8>)
 80007e6:	6878      	ldr	r0, [r7, #4]
 80007e8:	f7ff feec 	bl	80005c4 <checkEventResp>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d106      	bne.n	8000800 <setConnectable+0xd0>
 			  stackInitCompleteFlag|=0x80;
 80007f2:	4b0e      	ldr	r3, [pc, #56]	@ (800082c <setConnectable+0xfc>)
 80007f4:	881b      	ldrh	r3, [r3, #0]
 80007f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007fa:	b29a      	uxth	r2, r3
 80007fc:	4b0b      	ldr	r3, [pc, #44]	@ (800082c <setConnectable+0xfc>)
 80007fe:	801a      	strh	r2, [r3, #0]
 		   }
 		}
 		free(rxEvent);
 8000800:	6878      	ldr	r0, [r7, #4]
 8000802:	f003 f949 	bl	8003a98 <free>
 		free(discoverableCommand);
 8000806:	68b8      	ldr	r0, [r7, #8]
 8000808:	f003 f946 	bl	8003a98 <free>
 		free(localname);
 800080c:	68f8      	ldr	r0, [r7, #12]
 800080e:	f003 f943 	bl	8003a98 <free>
 		HAL_Delay(10);
 8000812:	200a      	movs	r0, #10
 8000814:	f001 f9ee 	bl	8001bf4 <HAL_Delay>
  }
 8000818:	bf00      	nop
 800081a:	3714      	adds	r7, #20
 800081c:	46bd      	mov	sp, r7
 800081e:	bd90      	pop	{r4, r7, pc}
 8000820:	20000114 	.word	0x20000114
 8000824:	20000078 	.word	0x20000078
 8000828:	20000088 	.word	0x20000088
 800082c:	200002ea 	.word	0x200002ea

08000830 <BLE_command>:
  * @param sizeRes Expected size of the response result.
  * @param returnHandles Number of handles expected in the response (each handle occupies 2 bytes).
  * @return int Returns BLE_OK if the command was successfully executed and the event response is valid,
  *             or an error code if something went wrong.
  */
 int BLE_command(uint8_t* command, int size, uint8_t* result, int sizeRes, int returnHandles){
 8000830:	b580      	push	{r7, lr}
 8000832:	b086      	sub	sp, #24
 8000834:	af00      	add	r7, sp, #0
 8000836:	60f8      	str	r0, [r7, #12]
 8000838:	60b9      	str	r1, [r7, #8]
 800083a:	607a      	str	r2, [r7, #4]
 800083c:	603b      	str	r3, [r7, #0]
		int response;

		sendCommand(command,size);
 800083e:	68b9      	ldr	r1, [r7, #8]
 8000840:	68f8      	ldr	r0, [r7, #12]
 8000842:	f7ff fee5 	bl	8000610 <sendCommand>
		rxEvent=(uint8_t*)malloc(sizeRes+2*returnHandles);
 8000846:	6a3b      	ldr	r3, [r7, #32]
 8000848:	005a      	lsls	r2, r3, #1
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	4413      	add	r3, r2
 800084e:	4618      	mov	r0, r3
 8000850:	f003 f91a 	bl	8003a88 <malloc>
 8000854:	4603      	mov	r3, r0
 8000856:	461a      	mov	r2, r3
 8000858:	4b19      	ldr	r3, [pc, #100]	@ (80008c0 <BLE_command+0x90>)
 800085a:	601a      	str	r2, [r3, #0]

		long contatore=0;
 800085c:	2300      	movs	r3, #0
 800085e:	613b      	str	r3, [r7, #16]
		while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8000860:	e007      	b.n	8000872 <BLE_command+0x42>
			contatore++;
 8000862:	693b      	ldr	r3, [r7, #16]
 8000864:	3301      	adds	r3, #1
 8000866:	613b      	str	r3, [r7, #16]
			if(contatore>30000){
 8000868:	693b      	ldr	r3, [r7, #16]
 800086a:	f247 5230 	movw	r2, #30000	@ 0x7530
 800086e:	4293      	cmp	r3, r2
 8000870:	dc07      	bgt.n	8000882 <BLE_command+0x52>
		while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8000872:	2140      	movs	r1, #64	@ 0x40
 8000874:	4813      	ldr	r0, [pc, #76]	@ (80008c4 <BLE_command+0x94>)
 8000876:	f001 fcbd 	bl	80021f4 <HAL_GPIO_ReadPin>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d0f0      	beq.n	8000862 <BLE_command+0x32>
 8000880:	e000      	b.n	8000884 <BLE_command+0x54>
				break;
 8000882:	bf00      	nop
			}
		}


		response=fetchBleEvent(rxEvent,sizeRes+returnHandles*2);
 8000884:	4b0e      	ldr	r3, [pc, #56]	@ (80008c0 <BLE_command+0x90>)
 8000886:	6818      	ldr	r0, [r3, #0]
 8000888:	6a3b      	ldr	r3, [r7, #32]
 800088a:	005a      	lsls	r2, r3, #1
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	4413      	add	r3, r2
 8000890:	4619      	mov	r1, r3
 8000892:	f7ff fe0d 	bl	80004b0 <fetchBleEvent>
 8000896:	6178      	str	r0, [r7, #20]
		if(response==BLE_OK){
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d107      	bne.n	80008ae <BLE_command+0x7e>
			response=checkEventResp(rxEvent,result,sizeRes);
 800089e:	4b08      	ldr	r3, [pc, #32]	@ (80008c0 <BLE_command+0x90>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	683a      	ldr	r2, [r7, #0]
 80008a4:	6879      	ldr	r1, [r7, #4]
 80008a6:	4618      	mov	r0, r3
 80008a8:	f7ff fe8c 	bl	80005c4 <checkEventResp>
 80008ac:	6178      	str	r0, [r7, #20]
		}
		HAL_Delay(10);
 80008ae:	200a      	movs	r0, #10
 80008b0:	f001 f9a0 	bl	8001bf4 <HAL_Delay>


	 return response;
 80008b4:	697b      	ldr	r3, [r7, #20]
 }
 80008b6:	4618      	mov	r0, r3
 80008b8:	3718      	adds	r7, #24
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	200002ec 	.word	0x200002ec
 80008c4:	48001000 	.word	0x48001000

080008c8 <addService>:

 void addService(uint8_t* UUID, uint8_t* handle, int attributes){
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b086      	sub	sp, #24
 80008cc:	af02      	add	r7, sp, #8
 80008ce:	60f8      	str	r0, [r7, #12]
 80008d0:	60b9      	str	r1, [r7, #8]
 80008d2:	607a      	str	r2, [r7, #4]


	 //memcpy
	 memcpy(ADD_PRIMARY_SERVICE+5,UUID,16);
 80008d4:	4b14      	ldr	r3, [pc, #80]	@ (8000928 <addService+0x60>)
 80008d6:	2210      	movs	r2, #16
 80008d8:	68f9      	ldr	r1, [r7, #12]
 80008da:	4618      	mov	r0, r3
 80008dc:	f003 fc5b 	bl	8004196 <memcpy>
	 ADD_PRIMARY_SERVICE[22]=attributes;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	b2da      	uxtb	r2, r3
 80008e4:	4b11      	ldr	r3, [pc, #68]	@ (800092c <addService+0x64>)
 80008e6:	759a      	strb	r2, [r3, #22]
		if(BLE_command(ADD_PRIMARY_SERVICE,sizeof(ADD_PRIMARY_SERVICE),ADD_PRIMARY_SERVICE_COMPLETE,sizeof(ADD_PRIMARY_SERVICE_COMPLETE),1)==BLE_OK){
 80008e8:	2301      	movs	r3, #1
 80008ea:	9300      	str	r3, [sp, #0]
 80008ec:	2307      	movs	r3, #7
 80008ee:	4a10      	ldr	r2, [pc, #64]	@ (8000930 <addService+0x68>)
 80008f0:	2117      	movs	r1, #23
 80008f2:	480e      	ldr	r0, [pc, #56]	@ (800092c <addService+0x64>)
 80008f4:	f7ff ff9c 	bl	8000830 <BLE_command>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d10a      	bne.n	8000914 <addService+0x4c>
			handle[0]=rxEvent[7];
 80008fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000934 <addService+0x6c>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	79da      	ldrb	r2, [r3, #7]
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	701a      	strb	r2, [r3, #0]
			handle[1]=rxEvent[8];
 8000908:	4b0a      	ldr	r3, [pc, #40]	@ (8000934 <addService+0x6c>)
 800090a:	681a      	ldr	r2, [r3, #0]
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	3301      	adds	r3, #1
 8000910:	7a12      	ldrb	r2, [r2, #8]
 8000912:	701a      	strb	r2, [r3, #0]
		 }
		free(rxEvent);
 8000914:	4b07      	ldr	r3, [pc, #28]	@ (8000934 <addService+0x6c>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4618      	mov	r0, r3
 800091a:	f003 f8bd 	bl	8003a98 <free>
 }
 800091e:	bf00      	nop
 8000920:	3710      	adds	r7, #16
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20000095 	.word	0x20000095
 800092c:	20000090 	.word	0x20000090
 8000930:	200000a8 	.word	0x200000a8
 8000934:	200002ec 	.word	0x200002ec

08000938 <addCharacteristic>:

 void addCharacteristic(uint8_t* UUID,uint8_t* handleChar, uint8_t* handleService, uint8_t maxsize, uint8_t proprieties){
 8000938:	b580      	push	{r7, lr}
 800093a:	b086      	sub	sp, #24
 800093c:	af02      	add	r7, sp, #8
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
 8000944:	70fb      	strb	r3, [r7, #3]
	 memcpy(ADD_CUSTOM_CHAR+7,UUID,16);
 8000946:	4b19      	ldr	r3, [pc, #100]	@ (80009ac <addCharacteristic+0x74>)
 8000948:	2210      	movs	r2, #16
 800094a:	68f9      	ldr	r1, [r7, #12]
 800094c:	4618      	mov	r0, r3
 800094e:	f003 fc22 	bl	8004196 <memcpy>

	 ADD_CUSTOM_CHAR[4]= handleService[0];
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	781a      	ldrb	r2, [r3, #0]
 8000956:	4b16      	ldr	r3, [pc, #88]	@ (80009b0 <addCharacteristic+0x78>)
 8000958:	711a      	strb	r2, [r3, #4]
	 ADD_CUSTOM_CHAR[5]= handleService[1];
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	785a      	ldrb	r2, [r3, #1]
 800095e:	4b14      	ldr	r3, [pc, #80]	@ (80009b0 <addCharacteristic+0x78>)
 8000960:	715a      	strb	r2, [r3, #5]
	 ADD_CUSTOM_CHAR[23]= maxsize;
 8000962:	4a13      	ldr	r2, [pc, #76]	@ (80009b0 <addCharacteristic+0x78>)
 8000964:	78fb      	ldrb	r3, [r7, #3]
 8000966:	75d3      	strb	r3, [r2, #23]
	 ADD_CUSTOM_CHAR[25]= proprieties;
 8000968:	4a11      	ldr	r2, [pc, #68]	@ (80009b0 <addCharacteristic+0x78>)
 800096a:	7e3b      	ldrb	r3, [r7, #24]
 800096c:	7653      	strb	r3, [r2, #25]
	 if(BLE_command(ADD_CUSTOM_CHAR,sizeof(ADD_CUSTOM_CHAR),ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),1)==BLE_OK){
 800096e:	2301      	movs	r3, #1
 8000970:	9300      	str	r3, [sp, #0]
 8000972:	2307      	movs	r3, #7
 8000974:	4a0f      	ldr	r2, [pc, #60]	@ (80009b4 <addCharacteristic+0x7c>)
 8000976:	211e      	movs	r1, #30
 8000978:	480d      	ldr	r0, [pc, #52]	@ (80009b0 <addCharacteristic+0x78>)
 800097a:	f7ff ff59 	bl	8000830 <BLE_command>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d10a      	bne.n	800099a <addCharacteristic+0x62>
		 handleChar[0]=rxEvent[7];
 8000984:	4b0c      	ldr	r3, [pc, #48]	@ (80009b8 <addCharacteristic+0x80>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	79da      	ldrb	r2, [r3, #7]
 800098a:	68bb      	ldr	r3, [r7, #8]
 800098c:	701a      	strb	r2, [r3, #0]
		 handleChar[1]=rxEvent[8];
 800098e:	4b0a      	ldr	r3, [pc, #40]	@ (80009b8 <addCharacteristic+0x80>)
 8000990:	681a      	ldr	r2, [r3, #0]
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	3301      	adds	r3, #1
 8000996:	7a12      	ldrb	r2, [r2, #8]
 8000998:	701a      	strb	r2, [r3, #0]
	 }
	 free(rxEvent);
 800099a:	4b07      	ldr	r3, [pc, #28]	@ (80009b8 <addCharacteristic+0x80>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4618      	mov	r0, r3
 80009a0:	f003 f87a 	bl	8003a98 <free>
 }
 80009a4:	bf00      	nop
 80009a6:	3710      	adds	r7, #16
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	200000b7 	.word	0x200000b7
 80009b0:	200000b0 	.word	0x200000b0
 80009b4:	200000d0 	.word	0x200000d0
 80009b8:	200002ec 	.word	0x200002ec

080009bc <updateCharValue>:

 void updateCharValue(uint8_t* handleService,uint8_t* handleChar, int offset, int size,uint8_t* data){
 80009bc:	b580      	push	{r7, lr}
 80009be:	b088      	sub	sp, #32
 80009c0:	af02      	add	r7, sp, #8
 80009c2:	60f8      	str	r0, [r7, #12]
 80009c4:	60b9      	str	r1, [r7, #8]
 80009c6:	607a      	str	r2, [r7, #4]
 80009c8:	603b      	str	r3, [r7, #0]
	 UPDATE_CHAR[3]=size+6;
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	3306      	adds	r3, #6
 80009d0:	b2da      	uxtb	r2, r3
 80009d2:	4b21      	ldr	r3, [pc, #132]	@ (8000a58 <updateCharValue+0x9c>)
 80009d4:	70da      	strb	r2, [r3, #3]
	 UPDATE_CHAR[4]=handleService[0];
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	781a      	ldrb	r2, [r3, #0]
 80009da:	4b1f      	ldr	r3, [pc, #124]	@ (8000a58 <updateCharValue+0x9c>)
 80009dc:	711a      	strb	r2, [r3, #4]
	 UPDATE_CHAR[5]=handleService[1];
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	785a      	ldrb	r2, [r3, #1]
 80009e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000a58 <updateCharValue+0x9c>)
 80009e4:	715a      	strb	r2, [r3, #5]
	 UPDATE_CHAR[6]=handleChar[0];
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	781a      	ldrb	r2, [r3, #0]
 80009ea:	4b1b      	ldr	r3, [pc, #108]	@ (8000a58 <updateCharValue+0x9c>)
 80009ec:	719a      	strb	r2, [r3, #6]
	 UPDATE_CHAR[7]=handleChar[1];
 80009ee:	68bb      	ldr	r3, [r7, #8]
 80009f0:	785a      	ldrb	r2, [r3, #1]
 80009f2:	4b19      	ldr	r3, [pc, #100]	@ (8000a58 <updateCharValue+0x9c>)
 80009f4:	71da      	strb	r2, [r3, #7]
	 UPDATE_CHAR[8]=offset;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	b2da      	uxtb	r2, r3
 80009fa:	4b17      	ldr	r3, [pc, #92]	@ (8000a58 <updateCharValue+0x9c>)
 80009fc:	721a      	strb	r2, [r3, #8]
	 UPDATE_CHAR[9]=size;
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	b2da      	uxtb	r2, r3
 8000a02:	4b15      	ldr	r3, [pc, #84]	@ (8000a58 <updateCharValue+0x9c>)
 8000a04:	725a      	strb	r2, [r3, #9]

	 uint8_t* commandComplete;
	 commandComplete=(uint8_t*)malloc(10+size);
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	330a      	adds	r3, #10
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f003 f83c 	bl	8003a88 <malloc>
 8000a10:	4603      	mov	r3, r0
 8000a12:	617b      	str	r3, [r7, #20]
	 memcpy(commandComplete,UPDATE_CHAR,10);
 8000a14:	220a      	movs	r2, #10
 8000a16:	4910      	ldr	r1, [pc, #64]	@ (8000a58 <updateCharValue+0x9c>)
 8000a18:	6978      	ldr	r0, [r7, #20]
 8000a1a:	f003 fbbc 	bl	8004196 <memcpy>
	 memcpy(commandComplete+10,data,size);
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	330a      	adds	r3, #10
 8000a22:	683a      	ldr	r2, [r7, #0]
 8000a24:	6a39      	ldr	r1, [r7, #32]
 8000a26:	4618      	mov	r0, r3
 8000a28:	f003 fbb5 	bl	8004196 <memcpy>

	 BLE_command(commandComplete,10+size,ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),0);
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	f103 010a 	add.w	r1, r3, #10
 8000a32:	2300      	movs	r3, #0
 8000a34:	9300      	str	r3, [sp, #0]
 8000a36:	2307      	movs	r3, #7
 8000a38:	4a08      	ldr	r2, [pc, #32]	@ (8000a5c <updateCharValue+0xa0>)
 8000a3a:	6978      	ldr	r0, [r7, #20]
 8000a3c:	f7ff fef8 	bl	8000830 <BLE_command>

	 free(commandComplete);
 8000a40:	6978      	ldr	r0, [r7, #20]
 8000a42:	f003 f829 	bl	8003a98 <free>
	 free(rxEvent);
 8000a46:	4b06      	ldr	r3, [pc, #24]	@ (8000a60 <updateCharValue+0xa4>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f003 f824 	bl	8003a98 <free>
 }
 8000a50:	bf00      	nop
 8000a52:	3718      	adds	r7, #24
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	200000d8 	.word	0x200000d8
 8000a5c:	200000d0 	.word	0x200000d0
 8000a60:	200002ec 	.word	0x200002ec

08000a64 <disconnectBLE>:

 /**
  * @brief Disconnects the peripheral from the central
 */
 void disconnectBLE(){
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b086      	sub	sp, #24
 8000a68:	af02      	add	r7, sp, #8
	 if (connectionHandler[0] == -1 && connectionHandler[1] == -1){
 8000a6a:	4b24      	ldr	r3, [pc, #144]	@ (8000afc <disconnectBLE+0x98>)
 8000a6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a74:	d105      	bne.n	8000a82 <disconnectBLE+0x1e>
 8000a76:	4b21      	ldr	r3, [pc, #132]	@ (8000afc <disconnectBLE+0x98>)
 8000a78:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a80:	d037      	beq.n	8000af2 <disconnectBLE+0x8e>
		// should not be -1
		return;
	 }
	 uint8_t command[7];
	 memcpy(command, DISCONNECT, 4);
 8000a82:	4b1f      	ldr	r3, [pc, #124]	@ (8000b00 <disconnectBLE+0x9c>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	607b      	str	r3, [r7, #4]
	 command[4] = connectionHandler[0];
 8000a88:	4b1c      	ldr	r3, [pc, #112]	@ (8000afc <disconnectBLE+0x98>)
 8000a8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	723b      	strb	r3, [r7, #8]
	 command[5] = connectionHandler[1];
 8000a92:	4b1a      	ldr	r3, [pc, #104]	@ (8000afc <disconnectBLE+0x98>)
 8000a94:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	727b      	strb	r3, [r7, #9]
	 command[6] = 0x13;
 8000a9c:	2313      	movs	r3, #19
 8000a9e:	72bb      	strb	r3, [r7, #10]
	 if(BLE_command(command,sizeof(command),EVENT_DISCONNECT_PENDING,7,0)==BLE_OK){
 8000aa0:	1d38      	adds	r0, r7, #4
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	9300      	str	r3, [sp, #0]
 8000aa6:	2307      	movs	r3, #7
 8000aa8:	4a16      	ldr	r2, [pc, #88]	@ (8000b04 <disconnectBLE+0xa0>)
 8000aaa:	2107      	movs	r1, #7
 8000aac:	f7ff fec0 	bl	8000830 <BLE_command>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d11e      	bne.n	8000af4 <disconnectBLE+0x90>
		 int result=fetchBleEvent(buffer,127);
 8000ab6:	217f      	movs	r1, #127	@ 0x7f
 8000ab8:	4813      	ldr	r0, [pc, #76]	@ (8000b08 <disconnectBLE+0xa4>)
 8000aba:	f7ff fcf9 	bl	80004b0 <fetchBleEvent>
 8000abe:	60f8      	str	r0, [r7, #12]
		 if(result==BLE_OK){
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d10f      	bne.n	8000ae6 <disconnectBLE+0x82>
			  if(checkEventResp(buffer,EVENT_DISCONNECTED,4)==BLE_OK){
 8000ac6:	2204      	movs	r2, #4
 8000ac8:	4910      	ldr	r1, [pc, #64]	@ (8000b0c <disconnectBLE+0xa8>)
 8000aca:	480f      	ldr	r0, [pc, #60]	@ (8000b08 <disconnectBLE+0xa4>)
 8000acc:	f7ff fd7a 	bl	80005c4 <checkEventResp>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d107      	bne.n	8000ae6 <disconnectBLE+0x82>
				  //setConnectable();
				  connectionHandler[0] = -1;
 8000ad6:	4b09      	ldr	r3, [pc, #36]	@ (8000afc <disconnectBLE+0x98>)
 8000ad8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000adc:	801a      	strh	r2, [r3, #0]
				  connectionHandler[1] = -1;
 8000ade:	4b07      	ldr	r3, [pc, #28]	@ (8000afc <disconnectBLE+0x98>)
 8000ae0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ae4:	805a      	strh	r2, [r3, #2]
			  }
		 }
	 free(rxEvent);
 8000ae6:	4b0a      	ldr	r3, [pc, #40]	@ (8000b10 <disconnectBLE+0xac>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4618      	mov	r0, r3
 8000aec:	f002 ffd4 	bl	8003a98 <free>
 8000af0:	e000      	b.n	8000af4 <disconnectBLE+0x90>
		return;
 8000af2:	bf00      	nop
	 }
 }
 8000af4:	3710      	adds	r7, #16
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	2000014c 	.word	0x2000014c
 8000b00:	200000e8 	.word	0x200000e8
 8000b04:	200000f0 	.word	0x200000f0
 8000b08:	200001e0 	.word	0x200001e0
 8000b0c:	200000ec 	.word	0x200000ec
 8000b10:	200002ec 	.word	0x200002ec

08000b14 <setDiscoverability>:
 /**
  * DO NOT CHANGE FUNCTION definition
  * @brief Sets the discoverability of the peripheral
  * @param mode 0 => Non Discoverable, 1 => Discoverable
  * */
 void setDiscoverability(uint8_t mode){
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af02      	add	r7, sp, #8
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	71fb      	strb	r3, [r7, #7]
	 if (mode == 1){
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	2b01      	cmp	r3, #1
 8000b22:	d102      	bne.n	8000b2a <setDiscoverability+0x16>
		 setConnectable();
 8000b24:	f7ff fe04 	bl	8000730 <setConnectable>
		 free(rxEvent);
	 }
	 else{
		 // Do nothing
	 }
 }
 8000b28:	e00f      	b.n	8000b4a <setDiscoverability+0x36>
	 else if (mode == 0){
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d10c      	bne.n	8000b4a <setDiscoverability+0x36>
		 if(BLE_command(ACI_GAP_SET_NON_DISCOVERABLE,sizeof(ACI_GAP_SET_NON_DISCOVERABLE),ACI_GAP_SET_NON_DISCOVERABLE_COMPLETE,sizeof(ACI_GAP_SET_NON_DISCOVERABLE_COMPLETE),0)==BLE_OK){
 8000b30:	2300      	movs	r3, #0
 8000b32:	9300      	str	r3, [sp, #0]
 8000b34:	2307      	movs	r3, #7
 8000b36:	4a07      	ldr	r2, [pc, #28]	@ (8000b54 <setDiscoverability+0x40>)
 8000b38:	2104      	movs	r1, #4
 8000b3a:	4807      	ldr	r0, [pc, #28]	@ (8000b58 <setDiscoverability+0x44>)
 8000b3c:	f7ff fe78 	bl	8000830 <BLE_command>
		 free(rxEvent);
 8000b40:	4b06      	ldr	r3, [pc, #24]	@ (8000b5c <setDiscoverability+0x48>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4618      	mov	r0, r3
 8000b46:	f002 ffa7 	bl	8003a98 <free>
 }
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	2000010c 	.word	0x2000010c
 8000b58:	20000108 	.word	0x20000108
 8000b5c:	200002ec 	.word	0x200002ec

08000b60 <i2c_init>:
 *      Author: tannerberman
 */

#include "i2c.h"

void i2c_init() {
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
	//I2C peripheral clock enabled in clock controller (4MHz)
	RCC->APB1ENR1 |= RCC_APB1ENR1_I2C2EN;
 8000b64:	4b4c      	ldr	r3, [pc, #304]	@ (8000c98 <i2c_init+0x138>)
 8000b66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b68:	4a4b      	ldr	r2, [pc, #300]	@ (8000c98 <i2c_init+0x138>)
 8000b6a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b6e:	6593      	str	r3, [r2, #88]	@ 0x58

	//Now, we must configure the I2C peripheral itself before enabling it

	//1. STM32’s default pin mode is GPIO, but I2C needs to use Alternate Function Mode.
	//So we must Configure GPIO Pins (PB10 & PB11) for I2C
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN; // Enable GPIOB peripheral clock
 8000b70:	4b49      	ldr	r3, [pc, #292]	@ (8000c98 <i2c_init+0x138>)
 8000b72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b74:	4a48      	ldr	r2, [pc, #288]	@ (8000c98 <i2c_init+0x138>)
 8000b76:	f043 0302 	orr.w	r3, r3, #2
 8000b7a:	64d3      	str	r3, [r2, #76]	@ 0x4c

	//Now we must put our pins in alternate function mode
	GPIOB->MODER &= ~GPIO_MODER_MODE10_Msk; //Clear mode state of GPIOB pin 10
 8000b7c:	4b47      	ldr	r3, [pc, #284]	@ (8000c9c <i2c_init+0x13c>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a46      	ldr	r2, [pc, #280]	@ (8000c9c <i2c_init+0x13c>)
 8000b82:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8000b86:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~GPIO_MODER_MODE11_Msk; //Clear mode state of GPIOB pin 11
 8000b88:	4b44      	ldr	r3, [pc, #272]	@ (8000c9c <i2c_init+0x13c>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a43      	ldr	r2, [pc, #268]	@ (8000c9c <i2c_init+0x13c>)
 8000b8e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000b92:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= GPIO_MODER_MODE10_1; 	//Set 2nd bit position to 1 for pin 10 (which sets it to alternate function (which is 0b10))
 8000b94:	4b41      	ldr	r3, [pc, #260]	@ (8000c9c <i2c_init+0x13c>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a40      	ldr	r2, [pc, #256]	@ (8000c9c <i2c_init+0x13c>)
 8000b9a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b9e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= GPIO_MODER_MODE11_1; 	//same as above but for pin 11
 8000ba0:	4b3e      	ldr	r3, [pc, #248]	@ (8000c9c <i2c_init+0x13c>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a3d      	ldr	r2, [pc, #244]	@ (8000c9c <i2c_init+0x13c>)
 8000ba6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000baa:	6013      	str	r3, [r2, #0]

	//Now we must actually set our pins to alternate function mode AF4 (I2C2's), bits need to be 0100 for this
	GPIOB->AFR[1] &= ~GPIO_AFRH_AFSEL10_Msk; 	// Clear Alternate function State for pin 10
 8000bac:	4b3b      	ldr	r3, [pc, #236]	@ (8000c9c <i2c_init+0x13c>)
 8000bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bb0:	4a3a      	ldr	r2, [pc, #232]	@ (8000c9c <i2c_init+0x13c>)
 8000bb2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000bb6:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] &= ~GPIO_AFRH_AFSEL11_Msk; 	// Clear Alternate Function state for pin 10
 8000bb8:	4b38      	ldr	r3, [pc, #224]	@ (8000c9c <i2c_init+0x13c>)
 8000bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bbc:	4a37      	ldr	r2, [pc, #220]	@ (8000c9c <i2c_init+0x13c>)
 8000bbe:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8000bc2:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |= GPIO_AFRH_AFSEL10_2; 		//Setting AFSEL area to 0b0100, for alternate function mode 4 (AF4)
 8000bc4:	4b35      	ldr	r3, [pc, #212]	@ (8000c9c <i2c_init+0x13c>)
 8000bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bc8:	4a34      	ldr	r2, [pc, #208]	@ (8000c9c <i2c_init+0x13c>)
 8000bca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bce:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |= GPIO_AFRH_AFSEL11_2; 		//same as above but for pin 11
 8000bd0:	4b32      	ldr	r3, [pc, #200]	@ (8000c9c <i2c_init+0x13c>)
 8000bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bd4:	4a31      	ldr	r2, [pc, #196]	@ (8000c9c <i2c_init+0x13c>)
 8000bd6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bda:	6253      	str	r3, [r2, #36]	@ 0x24

	//Must make our output type Open-Drain, (good for multiple devices)
	GPIOB->OTYPER |= GPIO_OTYPER_OT10;
 8000bdc:	4b2f      	ldr	r3, [pc, #188]	@ (8000c9c <i2c_init+0x13c>)
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	4a2e      	ldr	r2, [pc, #184]	@ (8000c9c <i2c_init+0x13c>)
 8000be2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000be6:	6053      	str	r3, [r2, #4]
	GPIOB->OTYPER |= GPIO_OTYPER_OT11;
 8000be8:	4b2c      	ldr	r3, [pc, #176]	@ (8000c9c <i2c_init+0x13c>)
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	4a2b      	ldr	r2, [pc, #172]	@ (8000c9c <i2c_init+0x13c>)
 8000bee:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000bf2:	6053      	str	r3, [r2, #4]
	// to manually enable internal pull-ups in software

	//GPIO setup is complete, now we must configure the I2C2 peripheral itself

	// "Clear PE bit in I2C_CR1"
	I2C2->CR1 &= ~I2C_CR1_PE;
 8000bf4:	4b2a      	ldr	r3, [pc, #168]	@ (8000ca0 <i2c_init+0x140>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a29      	ldr	r2, [pc, #164]	@ (8000ca0 <i2c_init+0x140>)
 8000bfa:	f023 0301 	bic.w	r3, r3, #1
 8000bfe:	6013      	str	r3, [r2, #0]
	//
	// Therefore, the actual SCL period is:
	//   133 ticks * 250 ns/tick = 33.25 µs,
	// which gives an SCL frequency of around 30.08 kHz.

	I2C2->TIMINGR &= ~I2C_TIMINGR_PRESC_Msk;
 8000c00:	4b27      	ldr	r3, [pc, #156]	@ (8000ca0 <i2c_init+0x140>)
 8000c02:	691b      	ldr	r3, [r3, #16]
 8000c04:	4a26      	ldr	r2, [pc, #152]	@ (8000ca0 <i2c_init+0x140>)
 8000c06:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8000c0a:	6113      	str	r3, [r2, #16]
	I2C2->TIMINGR |= (0 << I2C_TIMINGR_PRESC_Pos);       // PRESC = 0 (no division), so each tick = 250 ns
 8000c0c:	4b24      	ldr	r3, [pc, #144]	@ (8000ca0 <i2c_init+0x140>)
 8000c0e:	4a24      	ldr	r2, [pc, #144]	@ (8000ca0 <i2c_init+0x140>)
 8000c10:	691b      	ldr	r3, [r3, #16]
 8000c12:	6113      	str	r3, [r2, #16]

	I2C2->TIMINGR &= ~I2C_TIMINGR_SCLL_Msk;
 8000c14:	4b22      	ldr	r3, [pc, #136]	@ (8000ca0 <i2c_init+0x140>)
 8000c16:	691b      	ldr	r3, [r3, #16]
 8000c18:	4a21      	ldr	r2, [pc, #132]	@ (8000ca0 <i2c_init+0x140>)
 8000c1a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000c1e:	6113      	str	r3, [r2, #16]
	I2C2->TIMINGR |= (0x41 << I2C_TIMINGR_SCLL_Pos);      // SCLL = 65 (0x41)
 8000c20:	4b1f      	ldr	r3, [pc, #124]	@ (8000ca0 <i2c_init+0x140>)
 8000c22:	691b      	ldr	r3, [r3, #16]
 8000c24:	4a1e      	ldr	r2, [pc, #120]	@ (8000ca0 <i2c_init+0x140>)
 8000c26:	f043 0341 	orr.w	r3, r3, #65	@ 0x41
 8000c2a:	6113      	str	r3, [r2, #16]

	I2C2->TIMINGR &= ~I2C_TIMINGR_SCLH_Msk;
 8000c2c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ca0 <i2c_init+0x140>)
 8000c2e:	691b      	ldr	r3, [r3, #16]
 8000c30:	4a1b      	ldr	r2, [pc, #108]	@ (8000ca0 <i2c_init+0x140>)
 8000c32:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8000c36:	6113      	str	r3, [r2, #16]
	I2C2->TIMINGR |= (0x42 << I2C_TIMINGR_SCLH_Pos);      // SCLH = 66 (0x42)
 8000c38:	4b19      	ldr	r3, [pc, #100]	@ (8000ca0 <i2c_init+0x140>)
 8000c3a:	691b      	ldr	r3, [r3, #16]
 8000c3c:	4a18      	ldr	r2, [pc, #96]	@ (8000ca0 <i2c_init+0x140>)
 8000c3e:	f443 4384 	orr.w	r3, r3, #16896	@ 0x4200
 8000c42:	6113      	str	r3, [r2, #16]

	I2C2->TIMINGR &= ~I2C_TIMINGR_SDADEL_Msk;
 8000c44:	4b16      	ldr	r3, [pc, #88]	@ (8000ca0 <i2c_init+0x140>)
 8000c46:	691b      	ldr	r3, [r3, #16]
 8000c48:	4a15      	ldr	r2, [pc, #84]	@ (8000ca0 <i2c_init+0x140>)
 8000c4a:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8000c4e:	6113      	str	r3, [r2, #16]
	I2C2->TIMINGR |= (0x2 << I2C_TIMINGR_SDADEL_Pos);      // SDADEL = 2 (2 ticks = 500 ns delay)
 8000c50:	4b13      	ldr	r3, [pc, #76]	@ (8000ca0 <i2c_init+0x140>)
 8000c52:	691b      	ldr	r3, [r3, #16]
 8000c54:	4a12      	ldr	r2, [pc, #72]	@ (8000ca0 <i2c_init+0x140>)
 8000c56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c5a:	6113      	str	r3, [r2, #16]

	I2C2->TIMINGR &= ~I2C_TIMINGR_SCLDEL_Msk;
 8000c5c:	4b10      	ldr	r3, [pc, #64]	@ (8000ca0 <i2c_init+0x140>)
 8000c5e:	691b      	ldr	r3, [r3, #16]
 8000c60:	4a0f      	ldr	r2, [pc, #60]	@ (8000ca0 <i2c_init+0x140>)
 8000c62:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8000c66:	6113      	str	r3, [r2, #16]
	I2C2->TIMINGR |= (0x4 << I2C_TIMINGR_SCLDEL_Pos);      // SCLDEL = 4 (4 ticks = 1 µs delay)
 8000c68:	4b0d      	ldr	r3, [pc, #52]	@ (8000ca0 <i2c_init+0x140>)
 8000c6a:	691b      	ldr	r3, [r3, #16]
 8000c6c:	4a0c      	ldr	r2, [pc, #48]	@ (8000ca0 <i2c_init+0x140>)
 8000c6e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c72:	6113      	str	r3, [r2, #16]

	//Finally, Enable I2C2 (check if off first)
	if ((I2C2->CR1 & I2C_CR1_PE) == 0) {
 8000c74:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca0 <i2c_init+0x140>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f003 0301 	and.w	r3, r3, #1
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d105      	bne.n	8000c8c <i2c_init+0x12c>
		I2C2->CR1 |= I2C_CR1_PE;
 8000c80:	4b07      	ldr	r3, [pc, #28]	@ (8000ca0 <i2c_init+0x140>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a06      	ldr	r2, [pc, #24]	@ (8000ca0 <i2c_init+0x140>)
 8000c86:	f043 0301 	orr.w	r3, r3, #1
 8000c8a:	6013      	str	r3, [r2, #0]
	}
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	40021000 	.word	0x40021000
 8000c9c:	48000400 	.word	0x48000400
 8000ca0:	40005800 	.word	0x40005800

08000ca4 <i2c_transaction>:

uint8_t i2c_transaction(uint8_t address, uint8_t dir, uint8_t* data, uint8_t len) {
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	603a      	str	r2, [r7, #0]
 8000cac:	461a      	mov	r2, r3
 8000cae:	4603      	mov	r3, r0
 8000cb0:	71fb      	strb	r3, [r7, #7]
 8000cb2:	460b      	mov	r3, r1
 8000cb4:	71bb      	strb	r3, [r7, #6]
 8000cb6:	4613      	mov	r3, r2
 8000cb8:	717b      	strb	r3, [r7, #5]

    // Clear all previous settings in CR2 (for clean transactions)
    I2C2->CR2 &= ~(I2C_CR2_SADD_Msk | I2C_CR2_NBYTES_Msk | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP);
 8000cba:	4b57      	ldr	r3, [pc, #348]	@ (8000e18 <i2c_transaction+0x174>)
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	4a56      	ldr	r2, [pc, #344]	@ (8000e18 <i2c_transaction+0x174>)
 8000cc0:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 8000cc4:	f423 43ce 	bic.w	r3, r3, #26368	@ 0x6700
 8000cc8:	6053      	str	r3, [r2, #4]

    // Set the 7-bit slave address (properly shifted and masked)
    I2C2->CR2 |= ((address << 1) & I2C_CR2_SADD_Msk);
 8000cca:	4b53      	ldr	r3, [pc, #332]	@ (8000e18 <i2c_transaction+0x174>)
 8000ccc:	685a      	ldr	r2, [r3, #4]
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000cd6:	4950      	ldr	r1, [pc, #320]	@ (8000e18 <i2c_transaction+0x174>)
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	604b      	str	r3, [r1, #4]

    // Set the number of bytes to transfer
    I2C2->CR2 |= (len << I2C_CR2_NBYTES_Pos);
 8000cdc:	4b4e      	ldr	r3, [pc, #312]	@ (8000e18 <i2c_transaction+0x174>)
 8000cde:	685a      	ldr	r2, [r3, #4]
 8000ce0:	797b      	ldrb	r3, [r7, #5]
 8000ce2:	041b      	lsls	r3, r3, #16
 8000ce4:	494c      	ldr	r1, [pc, #304]	@ (8000e18 <i2c_transaction+0x174>)
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	604b      	str	r3, [r1, #4]

    // Set direction (write = 0, read = 1)
    if (dir == 1) {
 8000cea:	79bb      	ldrb	r3, [r7, #6]
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d106      	bne.n	8000cfe <i2c_transaction+0x5a>
        I2C2->CR2 |= I2C_CR2_RD_WRN;
 8000cf0:	4b49      	ldr	r3, [pc, #292]	@ (8000e18 <i2c_transaction+0x174>)
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	4a48      	ldr	r2, [pc, #288]	@ (8000e18 <i2c_transaction+0x174>)
 8000cf6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cfa:	6053      	str	r3, [r2, #4]
 8000cfc:	e005      	b.n	8000d0a <i2c_transaction+0x66>
    } else {
        I2C2->CR2 &= ~I2C_CR2_RD_WRN;
 8000cfe:	4b46      	ldr	r3, [pc, #280]	@ (8000e18 <i2c_transaction+0x174>)
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	4a45      	ldr	r2, [pc, #276]	@ (8000e18 <i2c_transaction+0x174>)
 8000d04:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000d08:	6053      	str	r3, [r2, #4]
    }

    // Generate START condition
    I2C2->CR2 |= I2C_CR2_START;
 8000d0a:	4b43      	ldr	r3, [pc, #268]	@ (8000e18 <i2c_transaction+0x174>)
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	4a42      	ldr	r2, [pc, #264]	@ (8000e18 <i2c_transaction+0x174>)
 8000d10:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000d14:	6053      	str	r3, [r2, #4]

    // Write Operation (Sending Data)
    if (dir == 0) {
 8000d16:	79bb      	ldrb	r3, [r7, #6]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d13f      	bne.n	8000d9c <i2c_transaction+0xf8>

    	// Loop over how ever many bytes we want to write
        for (uint8_t i = 0; i < len; i++) {
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	73fb      	strb	r3, [r7, #15]
 8000d20:	e01c      	b.n	8000d5c <i2c_transaction+0xb8>

        	// Wait until the transmit data register (TXDR) is empty and ready for the next byte
            while (!(I2C2->ISR & I2C_ISR_TXIS)) {
                // Check for the NACKF, when the peripheral didn't acknowledge
            	if (I2C2->ISR & I2C_ISR_NACKF) {
 8000d22:	4b3d      	ldr	r3, [pc, #244]	@ (8000e18 <i2c_transaction+0x174>)
 8000d24:	699b      	ldr	r3, [r3, #24]
 8000d26:	f003 0310 	and.w	r3, r3, #16
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d007      	beq.n	8000d3e <i2c_transaction+0x9a>
            		// Clear the NACKF flag
            		I2C2->ICR |= I2C_ICR_NACKCF;
 8000d2e:	4b3a      	ldr	r3, [pc, #232]	@ (8000e18 <i2c_transaction+0x174>)
 8000d30:	69db      	ldr	r3, [r3, #28]
 8000d32:	4a39      	ldr	r2, [pc, #228]	@ (8000e18 <i2c_transaction+0x174>)
 8000d34:	f043 0310 	orr.w	r3, r3, #16
 8000d38:	61d3      	str	r3, [r2, #28]
            		return 1; // Return 1, indicating that it was not a successful operation
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e066      	b.n	8000e0c <i2c_transaction+0x168>
            while (!(I2C2->ISR & I2C_ISR_TXIS)) {
 8000d3e:	4b36      	ldr	r3, [pc, #216]	@ (8000e18 <i2c_transaction+0x174>)
 8000d40:	699b      	ldr	r3, [r3, #24]
 8000d42:	f003 0302 	and.w	r3, r3, #2
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d0eb      	beq.n	8000d22 <i2c_transaction+0x7e>
            	}
            }

            // Send the data byte
            I2C2->TXDR = data[i];
 8000d4a:	7bfb      	ldrb	r3, [r7, #15]
 8000d4c:	683a      	ldr	r2, [r7, #0]
 8000d4e:	4413      	add	r3, r2
 8000d50:	781a      	ldrb	r2, [r3, #0]
 8000d52:	4b31      	ldr	r3, [pc, #196]	@ (8000e18 <i2c_transaction+0x174>)
 8000d54:	629a      	str	r2, [r3, #40]	@ 0x28
        for (uint8_t i = 0; i < len; i++) {
 8000d56:	7bfb      	ldrb	r3, [r7, #15]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	73fb      	strb	r3, [r7, #15]
 8000d5c:	7bfa      	ldrb	r2, [r7, #15]
 8000d5e:	797b      	ldrb	r3, [r7, #5]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d3ec      	bcc.n	8000d3e <i2c_transaction+0x9a>

        }

        // Wait until the Transfer Complete (TC) flag is set
        while (!(I2C2->ISR & I2C_ISR_TC));
 8000d64:	bf00      	nop
 8000d66:	4b2c      	ldr	r3, [pc, #176]	@ (8000e18 <i2c_transaction+0x174>)
 8000d68:	699b      	ldr	r3, [r3, #24]
 8000d6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d0f9      	beq.n	8000d66 <i2c_transaction+0xc2>

        // Generate STOP condition
        I2C2->CR2 |= I2C_CR2_STOP;
 8000d72:	4b29      	ldr	r3, [pc, #164]	@ (8000e18 <i2c_transaction+0x174>)
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	4a28      	ldr	r2, [pc, #160]	@ (8000e18 <i2c_transaction+0x174>)
 8000d78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d7c:	6053      	str	r3, [r2, #4]

        // Clearing the flag
        while (!(I2C2->ISR & I2C_ISR_STOPF));
 8000d7e:	bf00      	nop
 8000d80:	4b25      	ldr	r3, [pc, #148]	@ (8000e18 <i2c_transaction+0x174>)
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	f003 0320 	and.w	r3, r3, #32
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d0f9      	beq.n	8000d80 <i2c_transaction+0xdc>
        I2C2->ICR |= I2C_ICR_STOPCF;
 8000d8c:	4b22      	ldr	r3, [pc, #136]	@ (8000e18 <i2c_transaction+0x174>)
 8000d8e:	69db      	ldr	r3, [r3, #28]
 8000d90:	4a21      	ldr	r2, [pc, #132]	@ (8000e18 <i2c_transaction+0x174>)
 8000d92:	f043 0320 	orr.w	r3, r3, #32
 8000d96:	61d3      	str	r3, [r2, #28]

        return 0;	// Return 0 indicating it was a successful operation
 8000d98:	2300      	movs	r3, #0
 8000d9a:	e037      	b.n	8000e0c <i2c_transaction+0x168>
    }

    // Read Operation (Receiving Data)
    if (dir == 1) {
 8000d9c:	79bb      	ldrb	r3, [r7, #6]
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d133      	bne.n	8000e0a <i2c_transaction+0x166>

    	// Loop over how ever many bytes we want to read
        for (uint8_t i = 0; i < len; i++) {
 8000da2:	2300      	movs	r3, #0
 8000da4:	73bb      	strb	r3, [r7, #14]
 8000da6:	e010      	b.n	8000dca <i2c_transaction+0x126>

            // Wait until RX buffer has data
            while (!(I2C2->ISR & I2C_ISR_RXNE));
 8000da8:	bf00      	nop
 8000daa:	4b1b      	ldr	r3, [pc, #108]	@ (8000e18 <i2c_transaction+0x174>)
 8000dac:	699b      	ldr	r3, [r3, #24]
 8000dae:	f003 0304 	and.w	r3, r3, #4
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d0f9      	beq.n	8000daa <i2c_transaction+0x106>

            // Read received data
            data[i] = I2C2->RXDR;
 8000db6:	4b18      	ldr	r3, [pc, #96]	@ (8000e18 <i2c_transaction+0x174>)
 8000db8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000dba:	7bbb      	ldrb	r3, [r7, #14]
 8000dbc:	683a      	ldr	r2, [r7, #0]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	b2ca      	uxtb	r2, r1
 8000dc2:	701a      	strb	r2, [r3, #0]
        for (uint8_t i = 0; i < len; i++) {
 8000dc4:	7bbb      	ldrb	r3, [r7, #14]
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	73bb      	strb	r3, [r7, #14]
 8000dca:	7bba      	ldrb	r2, [r7, #14]
 8000dcc:	797b      	ldrb	r3, [r7, #5]
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d3ea      	bcc.n	8000da8 <i2c_transaction+0x104>
        }

        // Wait until the Transfer Complete (TC) flag is set
        while (!(I2C2->ISR & I2C_ISR_TC));
 8000dd2:	bf00      	nop
 8000dd4:	4b10      	ldr	r3, [pc, #64]	@ (8000e18 <i2c_transaction+0x174>)
 8000dd6:	699b      	ldr	r3, [r3, #24]
 8000dd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d0f9      	beq.n	8000dd4 <i2c_transaction+0x130>

        // Generate STOP condition
        I2C2->CR2 |= I2C_CR2_STOP;
 8000de0:	4b0d      	ldr	r3, [pc, #52]	@ (8000e18 <i2c_transaction+0x174>)
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	4a0c      	ldr	r2, [pc, #48]	@ (8000e18 <i2c_transaction+0x174>)
 8000de6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dea:	6053      	str	r3, [r2, #4]

        // Clearing the flag
        while (!(I2C2->ISR & I2C_ISR_STOPF));
 8000dec:	bf00      	nop
 8000dee:	4b0a      	ldr	r3, [pc, #40]	@ (8000e18 <i2c_transaction+0x174>)
 8000df0:	699b      	ldr	r3, [r3, #24]
 8000df2:	f003 0320 	and.w	r3, r3, #32
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d0f9      	beq.n	8000dee <i2c_transaction+0x14a>
        I2C2->ICR |= I2C_ICR_STOPCF;
 8000dfa:	4b07      	ldr	r3, [pc, #28]	@ (8000e18 <i2c_transaction+0x174>)
 8000dfc:	69db      	ldr	r3, [r3, #28]
 8000dfe:	4a06      	ldr	r2, [pc, #24]	@ (8000e18 <i2c_transaction+0x174>)
 8000e00:	f043 0320 	orr.w	r3, r3, #32
 8000e04:	61d3      	str	r3, [r2, #28]

        return 0; 	// Return 0 indicating it was a successful operation
 8000e06:	2300      	movs	r3, #0
 8000e08:	e000      	b.n	8000e0c <i2c_transaction+0x168>
    }

    return 1; 		// Should never reach here, or when dir is not 0 or 1
 8000e0a:	2301      	movs	r3, #1
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3714      	adds	r7, #20
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	40005800 	.word	0x40005800

08000e1c <lsm6dsl_init>:
#define OUTY_L 0x2A		   // Y-axis low byte
#define OUTY_H 0x2B		   // Y-axis high byte
#define OUTZ_L 0x2C		   // Z-axis low byte
#define OUTZ_H 0x2D		   // Z-axis high byte

void lsm6dsl_init() {
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0

	// An array to hold the data we want to write to, peripheral address, register address,
    uint8_t data[2];

    // Step 1: Enable accelerometer, 416Hz, ±2g range
    data[0] = CTRL1_XL;
 8000e22:	2310      	movs	r3, #16
 8000e24:	713b      	strb	r3, [r7, #4]
    data[1] = 0x60;  			// 16Hz ODR, high-performance mode
 8000e26:	2360      	movs	r3, #96	@ 0x60
 8000e28:	717b      	strb	r3, [r7, #5]
    if (i2c_transaction(LSM6DSL_ADDR, 0, data, 2)) {
 8000e2a:	1d3a      	adds	r2, r7, #4
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	2100      	movs	r1, #0
 8000e30:	206a      	movs	r0, #106	@ 0x6a
 8000e32:	f7ff ff37 	bl	8000ca4 <i2c_transaction>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d002      	beq.n	8000e42 <lsm6dsl_init+0x26>
        printf("Error: Failed to configure CTRL1_XL\n");
 8000e3c:	480b      	ldr	r0, [pc, #44]	@ (8000e6c <lsm6dsl_init+0x50>)
 8000e3e:	f003 f80b 	bl	8003e58 <puts>
    }

    // Step 2: Enable accelerometer data-ready interrupt on INT1
    data[0] = INT1_CTRL;
 8000e42:	230d      	movs	r3, #13
 8000e44:	713b      	strb	r3, [r7, #4]
    data[1] = 0x01;  			// Enable INT1_DRDY_XL
 8000e46:	2301      	movs	r3, #1
 8000e48:	717b      	strb	r3, [r7, #5]
    if (i2c_transaction(LSM6DSL_ADDR, 0, data, 2)) {
 8000e4a:	1d3a      	adds	r2, r7, #4
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	2100      	movs	r1, #0
 8000e50:	206a      	movs	r0, #106	@ 0x6a
 8000e52:	f7ff ff27 	bl	8000ca4 <i2c_transaction>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d002      	beq.n	8000e62 <lsm6dsl_init+0x46>
        printf("Error: Failed to configure INT1_CTRL\n");
 8000e5c:	4804      	ldr	r0, [pc, #16]	@ (8000e70 <lsm6dsl_init+0x54>)
 8000e5e:	f002 fffb 	bl	8003e58 <puts>
    }
}
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	08004dc0 	.word	0x08004dc0
 8000e70:	08004de4 	.word	0x08004de4

08000e74 <lsm6dsl_read_xyz>:


void lsm6dsl_read_xyz(int16_t* x, int16_t* y, int16_t* z) {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	607a      	str	r2, [r7, #4]

	// Slave register address, we want to start at OUTX_L
	uint8_t reg = OUTX_L;
 8000e80:	2328      	movs	r3, #40	@ 0x28
 8000e82:	75fb      	strb	r3, [r7, #23]
	// Since all the register we need to access are adjacent to each other, we can just read 6 bytes of data starting from OUTX_L
	// An array to hold all the x y z data -> OUTX_L, OUTX_H, OUTY_L, OUTY_H, OUTZ_L, OUTZ_H
    uint8_t data[6];

    // Write register address, then read 6 bytes in one transaction,
    if (i2c_transaction(LSM6DSL_ADDR, 0, &reg, 1)) {
 8000e84:	f107 0217 	add.w	r2, r7, #23
 8000e88:	2301      	movs	r3, #1
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	206a      	movs	r0, #106	@ 0x6a
 8000e8e:	f7ff ff09 	bl	8000ca4 <i2c_transaction>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d003      	beq.n	8000ea0 <lsm6dsl_read_xyz+0x2c>
        printf("Error: Failed to set register address for reading\n");
 8000e98:	4817      	ldr	r0, [pc, #92]	@ (8000ef8 <lsm6dsl_read_xyz+0x84>)
 8000e9a:	f002 ffdd 	bl	8003e58 <puts>
        return;
 8000e9e:	e028      	b.n	8000ef2 <lsm6dsl_read_xyz+0x7e>
    }
    if (i2c_transaction(LSM6DSL_ADDR, 1, data, 6)) {
 8000ea0:	f107 0210 	add.w	r2, r7, #16
 8000ea4:	2306      	movs	r3, #6
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	206a      	movs	r0, #106	@ 0x6a
 8000eaa:	f7ff fefb 	bl	8000ca4 <i2c_transaction>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d003      	beq.n	8000ebc <lsm6dsl_read_xyz+0x48>
        printf("Error: Failed to read accelerometer data\n");
 8000eb4:	4811      	ldr	r0, [pc, #68]	@ (8000efc <lsm6dsl_read_xyz+0x88>)
 8000eb6:	f002 ffcf 	bl	8003e58 <puts>
        return;
 8000eba:	e01a      	b.n	8000ef2 <lsm6dsl_read_xyz+0x7e>
    }

    // Convert the high and low data into their right position using bit shift
    // X values are in the first 2 elements of data, Y values are in the next 2 and so on
    *x = (int16_t)(data[1] << 8 | data[0]);
 8000ebc:	7c7b      	ldrb	r3, [r7, #17]
 8000ebe:	021b      	lsls	r3, r3, #8
 8000ec0:	b21a      	sxth	r2, r3
 8000ec2:	7c3b      	ldrb	r3, [r7, #16]
 8000ec4:	b21b      	sxth	r3, r3
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	b21a      	sxth	r2, r3
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	801a      	strh	r2, [r3, #0]
    *y = (int16_t)(data[3] << 8 | data[2]);
 8000ece:	7cfb      	ldrb	r3, [r7, #19]
 8000ed0:	021b      	lsls	r3, r3, #8
 8000ed2:	b21a      	sxth	r2, r3
 8000ed4:	7cbb      	ldrb	r3, [r7, #18]
 8000ed6:	b21b      	sxth	r3, r3
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	b21a      	sxth	r2, r3
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	801a      	strh	r2, [r3, #0]
    *z = (int16_t)(data[5] << 8 | data[4]);
 8000ee0:	7d7b      	ldrb	r3, [r7, #21]
 8000ee2:	021b      	lsls	r3, r3, #8
 8000ee4:	b21a      	sxth	r2, r3
 8000ee6:	7d3b      	ldrb	r3, [r7, #20]
 8000ee8:	b21b      	sxth	r3, r3
 8000eea:	4313      	orrs	r3, r2
 8000eec:	b21a      	sxth	r2, r3
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	801a      	strh	r2, [r3, #0]
}
 8000ef2:	3718      	adds	r7, #24
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	08004e0c 	.word	0x08004e0c
 8000efc:	08004e40 	.word	0x08004e40

08000f00 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f08:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f0c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000f10:	f003 0301 	and.w	r3, r3, #1
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d013      	beq.n	8000f40 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000f18:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f1c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000f20:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d00b      	beq.n	8000f40 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000f28:	e000      	b.n	8000f2c <ITM_SendChar+0x2c>
    {
      __NOP();
 8000f2a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000f2c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d0f9      	beq.n	8000f2a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000f36:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f3a:	687a      	ldr	r2, [r7, #4]
 8000f3c:	b2d2      	uxtb	r2, r2
 8000f3e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000f40:	687b      	ldr	r3, [r7, #4]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr

08000f4e <_write>:
volatile uint32_t time_still = 0;	 	// value for how long device has been still
volatile uint8_t send_message = 0;		// flag to trigger a BLE message every 10 seconds


// Redefine the libc _write() function so you can use printf in your code
int _write(int file, char *ptr, int len) {
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b086      	sub	sp, #24
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	60f8      	str	r0, [r7, #12]
 8000f56:	60b9      	str	r1, [r7, #8]
 8000f58:	607a      	str	r2, [r7, #4]
	int i = 0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	617b      	str	r3, [r7, #20]
    for (i = 0; i < len; i++) {
 8000f5e:	2300      	movs	r3, #0
 8000f60:	617b      	str	r3, [r7, #20]
 8000f62:	e009      	b.n	8000f78 <_write+0x2a>
        ITM_SendChar(*ptr++);
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	1c5a      	adds	r2, r3, #1
 8000f68:	60ba      	str	r2, [r7, #8]
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff ffc7 	bl	8000f00 <ITM_SendChar>
    for (i = 0; i < len; i++) {
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	3301      	adds	r3, #1
 8000f76:	617b      	str	r3, [r7, #20]
 8000f78:	697a      	ldr	r2, [r7, #20]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	dbf1      	blt.n	8000f64 <_write+0x16>
    }
    return len;
 8000f80:	687b      	ldr	r3, [r7, #4]
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3718      	adds	r7, #24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f8e:	f000 fdbc 	bl	8001b0a <HAL_Init>

  /* Configure the system clock */
  //SystemClock_Config();
  SystemClock_FullSpeed_Config();
 8000f92:	f000 fa4b 	bl	800142c <SystemClock_FullSpeed_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f96:	f000 fad7 	bl	8001548 <MX_GPIO_Init>
  MX_SPI3_Init();
 8000f9a:	f000 fa97 	bl	80014cc <MX_SPI3_Init>

  //RESET BLE MODULE
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_RESET);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fa4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fa8:	f001 f93c 	bl	8002224 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8000fac:	200a      	movs	r0, #10
 8000fae:	f000 fe21 	bl	8001bf4 <HAL_Delay>
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_SET);
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fb8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fbc:	f001 f932 	bl	8002224 <HAL_GPIO_WritePin>

  // Initialize the ble configurations
  ble_init();
 8000fc0:	f7ff f95e 	bl	8000280 <ble_init>

  privtag_run();				   // Call the privtag_run function to start the "application"
 8000fc4:	f000 f868 	bl	8001098 <privtag_run>
  	for(;;);					   // Infinite loop so the program keeps running (the priv_tag should run forever though since there is a infinite while loop in there)
 8000fc8:	bf00      	nop
 8000fca:	e7fd      	b.n	8000fc8 <main+0x3e>

08000fcc <TIM2_IRQHandler>:

}

void TIM2_IRQHandler()
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
    TIM2->SR &= ~TIM_SR_UIF;  	   // Clear interrupt flag
 8000fd0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000fd4:	691b      	ldr	r3, [r3, #16]
 8000fd6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fda:	f023 0301 	bic.w	r3, r3, #1
 8000fde:	6113      	str	r3, [r2, #16]
    timer_flag = 1;      	  	   // Set flag for main loop
 8000fe0:	4b0f      	ldr	r3, [pc, #60]	@ (8001020 <TIM2_IRQHandler+0x54>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	701a      	strb	r2, [r3, #0]
	time_still = time_still + 10000;  // Each time the the IRQHandler gets call, time has percisely increased by 50ms
 8000fe6:	4b0f      	ldr	r3, [pc, #60]	@ (8001024 <TIM2_IRQHandler+0x58>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8000fee:	3310      	adds	r3, #16
 8000ff0:	4a0c      	ldr	r2, [pc, #48]	@ (8001024 <TIM2_IRQHandler+0x58>)
 8000ff2:	6013      	str	r3, [r2, #0]
    if((time_still % 10000) == 0){ // 10000ms = 10s (Checking to change send message flag every 10 seconds
 8000ff4:	4b0b      	ldr	r3, [pc, #44]	@ (8001024 <TIM2_IRQHandler+0x58>)
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8001028 <TIM2_IRQHandler+0x5c>)
 8000ffa:	fba3 1302 	umull	r1, r3, r3, r2
 8000ffe:	0b5b      	lsrs	r3, r3, #13
 8001000:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001004:	fb01 f303 	mul.w	r3, r1, r3
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	2b00      	cmp	r3, #0
 800100c:	d102      	bne.n	8001014 <TIM2_IRQHandler+0x48>
    	send_message = 1;
 800100e:	4b07      	ldr	r3, [pc, #28]	@ (800102c <TIM2_IRQHandler+0x60>)
 8001010:	2201      	movs	r2, #1
 8001012:	701a      	strb	r2, [r3, #0]
    }

}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	20000358 	.word	0x20000358
 8001024:	2000035c 	.word	0x2000035c
 8001028:	d1b71759 	.word	0xd1b71759
 800102c:	20000360 	.word	0x20000360

08001030 <LPTIM1_IRQHandler>:

void LPTIM1_IRQHandler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0

    // Check if Auto-Reload Match interrupt is triggered
    if ((LPTIM1->ISR & LPTIM_ISR_ARRM) != 0) {
 8001034:	4b13      	ldr	r3, [pc, #76]	@ (8001084 <LPTIM1_IRQHandler+0x54>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f003 0302 	and.w	r3, r3, #2
 800103c:	2b00      	cmp	r3, #0
 800103e:	d01b      	beq.n	8001078 <LPTIM1_IRQHandler+0x48>
        // Clear the interrupt flag
        LPTIM1->ICR = LPTIM_ICR_ARRMCF;
 8001040:	4b10      	ldr	r3, [pc, #64]	@ (8001084 <LPTIM1_IRQHandler+0x54>)
 8001042:	2202      	movs	r2, #2
 8001044:	605a      	str	r2, [r3, #4]

        // Set flag for main loop (equivalent to timer_flag)
        timer_flag = 1;
 8001046:	4b10      	ldr	r3, [pc, #64]	@ (8001088 <LPTIM1_IRQHandler+0x58>)
 8001048:	2201      	movs	r2, #1
 800104a:	701a      	strb	r2, [r3, #0]

        // Increment time_still (now 1000 ms per interrupt instead of 50 ms)
        time_still += 1000;
 800104c:	4b0f      	ldr	r3, [pc, #60]	@ (800108c <LPTIM1_IRQHandler+0x5c>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001054:	4a0d      	ldr	r2, [pc, #52]	@ (800108c <LPTIM1_IRQHandler+0x5c>)
 8001056:	6013      	str	r3, [r2, #0]

        // Check for 10-second interval
        if ((time_still % 10000) == 0) {
 8001058:	4b0c      	ldr	r3, [pc, #48]	@ (800108c <LPTIM1_IRQHandler+0x5c>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	4b0c      	ldr	r3, [pc, #48]	@ (8001090 <LPTIM1_IRQHandler+0x60>)
 800105e:	fba3 1302 	umull	r1, r3, r3, r2
 8001062:	0b5b      	lsrs	r3, r3, #13
 8001064:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001068:	fb01 f303 	mul.w	r3, r1, r3
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	2b00      	cmp	r3, #0
 8001070:	d102      	bne.n	8001078 <LPTIM1_IRQHandler+0x48>
            send_message = 1;
 8001072:	4b08      	ldr	r3, [pc, #32]	@ (8001094 <LPTIM1_IRQHandler+0x64>)
 8001074:	2201      	movs	r2, #1
 8001076:	701a      	strb	r2, [r3, #0]
        }
    }
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	40007c00 	.word	0x40007c00
 8001088:	20000358 	.word	0x20000358
 800108c:	2000035c 	.word	0x2000035c
 8001090:	d1b71759 	.word	0xd1b71759
 8001094:	20000360 	.word	0x20000360

08001098 <privtag_run>:

void privtag_run() {
 8001098:	b580      	push	{r7, lr}
 800109a:	b09e      	sub	sp, #120	@ 0x78
 800109c:	af02      	add	r7, sp, #8
	//Initialize peripherals
	PWR->CR1 |= PWR_CR1_LPR;
 800109e:	4b89      	ldr	r3, [pc, #548]	@ (80012c4 <privtag_run+0x22c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a88      	ldr	r2, [pc, #544]	@ (80012c4 <privtag_run+0x22c>)
 80010a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010a8:	6013      	str	r3, [r2, #0]

	i2c_init();
 80010aa:	f7ff fd59 	bl	8000b60 <i2c_init>
	lsm6dsl_init();
 80010ae:	f7ff feb5 	bl	8000e1c <lsm6dsl_init>


	// Initialize timer to be in 50 ms intervals
//	timer_init(TIM2);
//	timer_set_ms(TIM2, 1000);
	lptim_init();
 80010b2:	f000 fc87 	bl	80019c4 <lptim_init>
	set_low_timer_ms();
 80010b6:	f000 fcf1 	bl	8001a9c <set_low_timer_ms>
	// x y z variables to hold current accelerations in the x y z acceleration values
	int16_t x, y, z;

	//prev_x, prev_y and prev_z variables to hold the previous x y z acceleration values
	int16_t prev_x = 0, prev_y = 0, prev_z = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 80010c0:	2300      	movs	r3, #0
 80010c2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 80010c6:	2300      	movs	r3, #0
 80010c8:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a

	// A flag to determine if the device has moved
	uint8_t device_moved_flag;

	// Variable to store the minutes since lost (for project 2)
	uint8_t minutes_since_lost = 0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

	// Variable to store the seconds since lost
	uint32_t seconds_since_lost = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	663b      	str	r3, [r7, #96]	@ 0x60
	char seconds_since_lost_str[20];

	// First disconnect the device, set the discoverability to be false because we are not in lost mode yet, and set the non discoverable flag to be true


	SystemClock_FullSpeed_Config();
 80010d6:	f000 f9a9 	bl	800142c <SystemClock_FullSpeed_Config>
	// Switch to high-speed MSI (8MHz)
	//RCC->CR = (RCC->CR & ~RCC_CR_MSIRANGE_Msk) | (RCC_CR_MSIRANGE_8 << RCC_CR_MSIRANGE_Pos) | RCC_CR_MSIRGSEL;


	disconnectBLE();
 80010da:	f7ff fcc3 	bl	8000a64 <disconnectBLE>
	setDiscoverability(0);
 80010de:	2000      	movs	r0, #0
 80010e0:	f7ff fd18 	bl	8000b14 <setDiscoverability>
	uint8_t nonDiscoverable = 1;
 80010e4:	2301      	movs	r3, #1
 80010e6:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68

	SystemClock_LowPower_Config();
 80010ea:	f000 f94f 	bl	800138c <SystemClock_LowPower_Config>

	// Switch to low-power MSI (100kHz)
	//RCC->CR = (RCC->CR & ~RCC_CR_MSIRANGE_Msk) | (RCC_CR_MSIRANGE_0 << RCC_CR_MSIRANGE_Pos) | RCC_CR_MSIRGSEL;

	disable_unused_peripherals_register();
 80010ee:	f000 f901 	bl	80012f4 <disable_unused_peripherals_register>

	// Hard coded name for the device
	unsigned char device_name[] = "TaneTag";
 80010f2:	4a75      	ldr	r2, [pc, #468]	@ (80012c8 <privtag_run+0x230>)
 80010f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010fc:	e883 0003 	stmia.w	r3, {r0, r1}
//        __WFI();  // Immediately wait for interrupt
//        __enable_irq();
//        //HAL_ResumeTick();


		if(!nonDiscoverable && HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8001100:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8001104:	2b00      	cmp	r3, #0
 8001106:	d10c      	bne.n	8001122 <privtag_run+0x8a>
 8001108:	2140      	movs	r1, #64	@ 0x40
 800110a:	4870      	ldr	r0, [pc, #448]	@ (80012cc <privtag_run+0x234>)
 800110c:	f001 f872 	bl	80021f4 <HAL_GPIO_ReadPin>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d005      	beq.n	8001122 <privtag_run+0x8a>
			SystemClock_FullSpeed_Config();
 8001116:	f000 f989 	bl	800142c <SystemClock_FullSpeed_Config>

			catchBLE();
 800111a:	f7ff fac5 	bl	80006a8 <catchBLE>

			SystemClock_LowPower_Config();
 800111e:	f000 f935 	bl	800138c <SystemClock_LowPower_Config>
		}

		if (timer_flag) { 			       // This triggers every 50 ms
 8001122:	4b6b      	ldr	r3, [pc, #428]	@ (80012d0 <privtag_run+0x238>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	b2db      	uxtb	r3, r3
 8001128:	2b00      	cmp	r3, #0
 800112a:	f000 80c3 	beq.w	80012b4 <privtag_run+0x21c>
			timer_flag = 0; 			   // Reset the timer flag
 800112e:	4b68      	ldr	r3, [pc, #416]	@ (80012d0 <privtag_run+0x238>)
 8001130:	2200      	movs	r2, #0
 8001132:	701a      	strb	r2, [r3, #0]
			lsm6dsl_read_xyz(&x, &y, &z);  // Read acceleration data
 8001134:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8001138:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 800113c:	f107 0346 	add.w	r3, r7, #70	@ 0x46
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff fe97 	bl	8000e74 <lsm6dsl_read_xyz>

			// Calculate total magnitude of change in movement
			delta_x = abs(x - prev_x);
 8001146:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 800114a:	461a      	mov	r2, r3
 800114c:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	2b00      	cmp	r3, #0
 8001154:	bfb8      	it	lt
 8001156:	425b      	neglt	r3, r3
 8001158:	65fb      	str	r3, [r7, #92]	@ 0x5c
			delta_y = abs(y - prev_y);
 800115a:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 800115e:	461a      	mov	r2, r3
 8001160:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	@ 0x6c
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	2b00      	cmp	r3, #0
 8001168:	bfb8      	it	lt
 800116a:	425b      	neglt	r3, r3
 800116c:	65bb      	str	r3, [r7, #88]	@ 0x58
			delta_z = abs(z - prev_z);
 800116e:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 8001172:	461a      	mov	r2, r3
 8001174:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	@ 0x6a
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	2b00      	cmp	r3, #0
 800117c:	bfb8      	it	lt
 800117e:	425b      	neglt	r3, r3
 8001180:	657b      	str	r3, [r7, #84]	@ 0x54

			// Calculate the the total movement
			total_movement = delta_x + delta_y + delta_z;
 8001182:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001184:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001186:	4413      	add	r3, r2
 8001188:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800118a:	4413      	add	r3, r2
 800118c:	653b      	str	r3, [r7, #80]	@ 0x50

			//Saves the current x y z values as the prev_x, prev_y, and prev_z for the next iteration
			prev_x = x;
 800118e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001192:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
			prev_y = y;
 8001196:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800119a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
			prev_z = z;
 800119e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80011a2:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a

			//If our device's total movement is beyond threshold, update device moved flag.
			if (total_movement > MOVEMENT_THRESHOLD) {
 80011a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80011a8:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80011ac:	dd03      	ble.n	80011b6 <privtag_run+0x11e>
				device_moved_flag = 1;
 80011ae:	2301      	movs	r3, #1
 80011b0:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
 80011b4:	e002      	b.n	80011bc <privtag_run+0x124>
			}
			else {
				device_moved_flag = 0;
 80011b6:	2300      	movs	r3, #0
 80011b8:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
			}

			//If device DID move.
			if (device_moved_flag) {
 80011bc:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d01b      	beq.n	80011fc <privtag_run+0x164>
				//leds_set(0b11);
				is_lost = 0;										 // If device moved, turn is lost mode to be OFF
 80011c4:	4b43      	ldr	r3, [pc, #268]	@ (80012d4 <privtag_run+0x23c>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	701a      	strb	r2, [r3, #0]
				time_still = 0;										 // If device moved, reset the time that it was still to be 0
 80011ca:	4b43      	ldr	r3, [pc, #268]	@ (80012d8 <privtag_run+0x240>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
				minutes_since_lost = 0;								 // If device moved, reset the minutes since lost to be 0
 80011d0:	2300      	movs	r3, #0
 80011d2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				seconds_since_lost = 0;								 // If device moved, reset the seconds since lost to be 0
 80011d6:	2300      	movs	r3, #0
 80011d8:	663b      	str	r3, [r7, #96]	@ 0x60
				// If the device is not in nonDiscoverable mode and it moved, then we disconnect the device first, then we set the discoverability to be false, and set the nonDiscoverable flag to be true
				if (!nonDiscoverable) {
 80011da:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d128      	bne.n	8001234 <privtag_run+0x19c>
					SystemClock_FullSpeed_Config();
 80011e2:	f000 f923 	bl	800142c <SystemClock_FullSpeed_Config>

					disconnectBLE();
 80011e6:	f7ff fc3d 	bl	8000a64 <disconnectBLE>
				    setDiscoverability(0);
 80011ea:	2000      	movs	r0, #0
 80011ec:	f7ff fc92 	bl	8000b14 <setDiscoverability>

				    nonDiscoverable = 1;
 80011f0:	2301      	movs	r3, #1
 80011f2:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68

				    SystemClock_LowPower_Config();
 80011f6:	f000 f8c9 	bl	800138c <SystemClock_LowPower_Config>
 80011fa:	e01b      	b.n	8001234 <privtag_run+0x19c>
				}

			}
			else {
			    if (time_still >= LOST_TIME_THRESHOLD && !is_lost) { // If the device has been there for long as the threshold, and it is not currently lost, turn on lost mode
 80011fc:	4b36      	ldr	r3, [pc, #216]	@ (80012d8 <privtag_run+0x240>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f642 62df 	movw	r2, #11999	@ 0x2edf
 8001204:	4293      	cmp	r3, r2
 8001206:	d915      	bls.n	8001234 <privtag_run+0x19c>
 8001208:	4b32      	ldr	r3, [pc, #200]	@ (80012d4 <privtag_run+0x23c>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	b2db      	uxtb	r3, r3
 800120e:	2b00      	cmp	r3, #0
 8001210:	d110      	bne.n	8001234 <privtag_run+0x19c>
			        is_lost = 1;
 8001212:	4b30      	ldr	r3, [pc, #192]	@ (80012d4 <privtag_run+0x23c>)
 8001214:	2201      	movs	r2, #1
 8001216:	701a      	strb	r2, [r3, #0]
			        // leds_set(0b00);
			        //If the device is in non discoverable mode, then we set the discoverability to be true, and set the nonDiscoverable flag to be false
			        if (nonDiscoverable) {
 8001218:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 800121c:	2b00      	cmp	r3, #0
 800121e:	d009      	beq.n	8001234 <privtag_run+0x19c>
			        	SystemClock_FullSpeed_Config();
 8001220:	f000 f904 	bl	800142c <SystemClock_FullSpeed_Config>

			            setDiscoverability(1);
 8001224:	2001      	movs	r0, #1
 8001226:	f7ff fc75 	bl	8000b14 <setDiscoverability>
			            nonDiscoverable = 0;
 800122a:	2300      	movs	r3, #0
 800122c:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68

			            SystemClock_LowPower_Config();
 8001230:	f000 f8ac 	bl	800138c <SystemClock_LowPower_Config>
			        }
			    }
			}


			if (is_lost) { //LOST MODE!
 8001234:	4b27      	ldr	r3, [pc, #156]	@ (80012d4 <privtag_run+0x23c>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	b2db      	uxtb	r3, r3
 800123a:	2b00      	cmp	r3, #0
 800123c:	d03a      	beq.n	80012b4 <privtag_run+0x21c>
				// Calculates the total minutes lost
				minutes_since_lost = ((time_still - LOST_TIME_THRESHOLD) / LOST_TIME_THRESHOLD) + 1;
 800123e:	4b26      	ldr	r3, [pc, #152]	@ (80012d8 <privtag_run+0x240>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f5a3 533b 	sub.w	r3, r3, #11968	@ 0x2ec0
 8001246:	3b20      	subs	r3, #32
 8001248:	4a24      	ldr	r2, [pc, #144]	@ (80012dc <privtag_run+0x244>)
 800124a:	fba2 2303 	umull	r2, r3, r2, r3
 800124e:	0a1b      	lsrs	r3, r3, #8
 8001250:	b2db      	uxtb	r3, r3
 8001252:	3301      	adds	r3, #1
 8001254:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

				// Calculates the total seconds lost
				uint32_t seconds_since_lost = (time_still - LOST_TIME_THRESHOLD) / 1000;
 8001258:	4b1f      	ldr	r3, [pc, #124]	@ (80012d8 <privtag_run+0x240>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f5a3 533b 	sub.w	r3, r3, #11968	@ 0x2ec0
 8001260:	3b20      	subs	r3, #32
 8001262:	4a1f      	ldr	r2, [pc, #124]	@ (80012e0 <privtag_run+0x248>)
 8001264:	fba2 2303 	umull	r2, r3, r2, r3
 8001268:	099b      	lsrs	r3, r3, #6
 800126a:	64fb      	str	r3, [r7, #76]	@ 0x4c

				// If the send message flag is set, send a message to the user
				if (send_message) {
 800126c:	4b1d      	ldr	r3, [pc, #116]	@ (80012e4 <privtag_run+0x24c>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	b2db      	uxtb	r3, r3
 8001272:	2b00      	cmp	r3, #0
 8001274:	d01e      	beq.n	80012b4 <privtag_run+0x21c>

					SystemClock_FullSpeed_Config();
 8001276:	f000 f8d9 	bl	800142c <SystemClock_FullSpeed_Config>

					//leds_set(0b01);

					//Build the string to send out
					unsigned char formatted_str[32];
					snprintf((char*)formatted_str, sizeof(formatted_str), "%s %us", device_name, seconds_since_lost);
 800127a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800127e:	1d38      	adds	r0, r7, #4
 8001280:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001282:	9300      	str	r3, [sp, #0]
 8001284:	4613      	mov	r3, r2
 8001286:	4a18      	ldr	r2, [pc, #96]	@ (80012e8 <privtag_run+0x250>)
 8001288:	2120      	movs	r1, #32
 800128a:	f002 fded 	bl	8003e68 <sniprintf>

					// Use strlen to get the actual string length
					int str_len = strlen((char*)formatted_str);
 800128e:	1d3b      	adds	r3, r7, #4
 8001290:	4618      	mov	r0, r3
 8001292:	f7fe ff9d 	bl	80001d0 <strlen>
 8001296:	4603      	mov	r3, r0
 8001298:	64bb      	str	r3, [r7, #72]	@ 0x48

					// Send the message to the user
					updateCharValue(NORDIC_UART_SERVICE_HANDLE, READ_CHAR_HANDLE, 0, str_len, formatted_str);
 800129a:	1d3b      	adds	r3, r7, #4
 800129c:	9300      	str	r3, [sp, #0]
 800129e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80012a0:	2200      	movs	r2, #0
 80012a2:	4912      	ldr	r1, [pc, #72]	@ (80012ec <privtag_run+0x254>)
 80012a4:	4812      	ldr	r0, [pc, #72]	@ (80012f0 <privtag_run+0x258>)
 80012a6:	f7ff fb89 	bl	80009bc <updateCharValue>
					send_message = 0;
 80012aa:	4b0e      	ldr	r3, [pc, #56]	@ (80012e4 <privtag_run+0x24c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	701a      	strb	r2, [r3, #0]

					//leds_set(0b10);

					SystemClock_LowPower_Config();
 80012b0:	f000 f86c 	bl	800138c <SystemClock_LowPower_Config>
//        __WFI();  // Immediately wait for interrupt
//        //__enable_irq();
//        HAL_ResumeTick();
		// At the end of your main loop, before STOP2 mode

		HAL_SuspendTick();
 80012b4:	f000 fcc2 	bl	8001c3c <HAL_SuspendTick>
		HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 80012b8:	2001      	movs	r0, #1
 80012ba:	f001 f853 	bl	8002364 <HAL_PWREx_EnterSTOP2Mode>
		HAL_ResumeTick();
 80012be:	f000 fccd 	bl	8001c5c <HAL_ResumeTick>
		if(!nonDiscoverable && HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 80012c2:	e71d      	b.n	8001100 <privtag_run+0x68>
 80012c4:	40007000 	.word	0x40007000
 80012c8:	08004e74 	.word	0x08004e74
 80012cc:	48001000 	.word	0x48001000
 80012d0:	20000358 	.word	0x20000358
 80012d4:	20000359 	.word	0x20000359
 80012d8:	2000035c 	.word	0x2000035c
 80012dc:	057619f1 	.word	0x057619f1
 80012e0:	10624dd3 	.word	0x10624dd3
 80012e4:	20000360 	.word	0x20000360
 80012e8:	08004e6c 	.word	0x08004e6c
 80012ec:	200002e8 	.word	0x200002e8
 80012f0:	200002e0 	.word	0x200002e0

080012f4 <disable_unused_peripherals_register>:
    // 9. Reset SLEEPDEEP bit
    SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
}


void disable_unused_peripherals_register(void) {
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
//                      RCC_AHB2ENR_GPIOCEN |
//                      RCC_AHB2ENR_GPIODEN |
//                      RCC_AHB2ENR_GPIOEEN);

    // Disable USART clocks
    RCC->APB2ENR &= ~(RCC_APB2ENR_USART1EN);
 80012f8:	4b23      	ldr	r3, [pc, #140]	@ (8001388 <disable_unused_peripherals_register+0x94>)
 80012fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012fc:	4a22      	ldr	r2, [pc, #136]	@ (8001388 <disable_unused_peripherals_register+0x94>)
 80012fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001302:	6613      	str	r3, [r2, #96]	@ 0x60
    RCC->APB1ENR1 &= ~(RCC_APB1ENR1_USART2EN |
 8001304:	4b20      	ldr	r3, [pc, #128]	@ (8001388 <disable_unused_peripherals_register+0x94>)
 8001306:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001308:	4a1f      	ldr	r2, [pc, #124]	@ (8001388 <disable_unused_peripherals_register+0x94>)
 800130a:	f423 23c0 	bic.w	r3, r3, #393216	@ 0x60000
 800130e:	6593      	str	r3, [r2, #88]	@ 0x58
                       RCC_APB1ENR1_USART3EN);
    RCC->APB1ENR1 &= ~(RCC_APB1ENR1_UART4EN |
 8001310:	4b1d      	ldr	r3, [pc, #116]	@ (8001388 <disable_unused_peripherals_register+0x94>)
 8001312:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001314:	4a1c      	ldr	r2, [pc, #112]	@ (8001388 <disable_unused_peripherals_register+0x94>)
 8001316:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800131a:	6593      	str	r3, [r2, #88]	@ 0x58
                       RCC_APB1ENR1_UART5EN);

    // Disable I2C clocks
    RCC->APB1ENR1 &= ~(RCC_APB1ENR1_I2C1EN |
 800131c:	4b1a      	ldr	r3, [pc, #104]	@ (8001388 <disable_unused_peripherals_register+0x94>)
 800131e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001320:	4a19      	ldr	r2, [pc, #100]	@ (8001388 <disable_unused_peripherals_register+0x94>)
 8001322:	f423 0320 	bic.w	r3, r3, #10485760	@ 0xa00000
 8001326:	6593      	str	r3, [r2, #88]	@ 0x58
                       RCC_APB1ENR1_I2C3EN);

    // Disable SPI clocks
    RCC->APB2ENR &= ~(RCC_APB2ENR_SPI1EN);
 8001328:	4b17      	ldr	r3, [pc, #92]	@ (8001388 <disable_unused_peripherals_register+0x94>)
 800132a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800132c:	4a16      	ldr	r2, [pc, #88]	@ (8001388 <disable_unused_peripherals_register+0x94>)
 800132e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001332:	6613      	str	r3, [r2, #96]	@ 0x60
    RCC->APB1ENR1 &= ~(RCC_APB1ENR1_SPI2EN);
 8001334:	4b14      	ldr	r3, [pc, #80]	@ (8001388 <disable_unused_peripherals_register+0x94>)
 8001336:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001338:	4a13      	ldr	r2, [pc, #76]	@ (8001388 <disable_unused_peripherals_register+0x94>)
 800133a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800133e:	6593      	str	r3, [r2, #88]	@ 0x58

    // Disable ADC clock
    RCC->AHB2ENR &= ~(RCC_AHB2ENR_ADCEN);
 8001340:	4b11      	ldr	r3, [pc, #68]	@ (8001388 <disable_unused_peripherals_register+0x94>)
 8001342:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001344:	4a10      	ldr	r2, [pc, #64]	@ (8001388 <disable_unused_peripherals_register+0x94>)
 8001346:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800134a:	64d3      	str	r3, [r2, #76]	@ 0x4c

    // Disable DAC clock
    RCC->APB1ENR1 &= ~(RCC_APB1ENR1_DAC1EN);
 800134c:	4b0e      	ldr	r3, [pc, #56]	@ (8001388 <disable_unused_peripherals_register+0x94>)
 800134e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001350:	4a0d      	ldr	r2, [pc, #52]	@ (8001388 <disable_unused_peripherals_register+0x94>)
 8001352:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8001356:	6593      	str	r3, [r2, #88]	@ 0x58

    // Disable Timer clocks
    RCC->APB1ENR1 &= ~(RCC_APB1ENR1_TIM2EN |
 8001358:	4b0b      	ldr	r3, [pc, #44]	@ (8001388 <disable_unused_peripherals_register+0x94>)
 800135a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800135c:	4a0a      	ldr	r2, [pc, #40]	@ (8001388 <disable_unused_peripherals_register+0x94>)
 800135e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001362:	6593      	str	r3, [r2, #88]	@ 0x58
                       RCC_APB1ENR1_TIM5EN |
                       RCC_APB1ENR1_TIM6EN |
                       RCC_APB1ENR1_TIM7EN);

    // Disable CAN clock
    RCC->APB1ENR1 &= ~(RCC_APB1ENR1_CAN1EN);
 8001364:	4b08      	ldr	r3, [pc, #32]	@ (8001388 <disable_unused_peripherals_register+0x94>)
 8001366:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001368:	4a07      	ldr	r2, [pc, #28]	@ (8001388 <disable_unused_peripherals_register+0x94>)
 800136a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800136e:	6593      	str	r3, [r2, #88]	@ 0x58

    // Disable USB clock
    RCC->APB1ENR1 &= ~(1 << 26);
 8001370:	4b05      	ldr	r3, [pc, #20]	@ (8001388 <disable_unused_peripherals_register+0x94>)
 8001372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001374:	4a04      	ldr	r2, [pc, #16]	@ (8001388 <disable_unused_peripherals_register+0x94>)
 8001376:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800137a:	6593      	str	r3, [r2, #88]	@ 0x58

    // Disable AES
    //RCC->AHB2ENR &= ~(RCC_AHB2ENR_AESEN);
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	40021000 	.word	0x40021000

0800138c <SystemClock_LowPower_Config>:

void SystemClock_LowPower_Config(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b096      	sub	sp, #88	@ 0x58
 8001390:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001392:	f107 0314 	add.w	r3, r7, #20
 8001396:	2244      	movs	r2, #68	@ 0x44
 8001398:	2100      	movs	r1, #0
 800139a:	4618      	mov	r0, r3
 800139c:	f002 fe70 	bl	8004080 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013a0:	463b      	mov	r3, r7
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]
 80013aa:	60da      	str	r2, [r3, #12]
 80013ac:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
    */
    if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80013ae:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80013b2:	f000 ff81 	bl	80022b8 <HAL_PWREx_ControlVoltageScaling>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <SystemClock_LowPower_Config+0x34>
    {
      Error_Handler();
 80013bc:	f000 f95c 	bl	8001678 <Error_Handler>
    }
    /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80013c0:	2310      	movs	r3, #16
 80013c2:	617b      	str	r3, [r7, #20]
    RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80013c4:	2301      	movs	r3, #1
 80013c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.MSICalibrationValue = 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;  // 100 kHz
 80013cc:	2300      	movs	r3, #0
 80013ce:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013d0:	2300      	movs	r3, #0
 80013d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013d4:	f107 0314 	add.w	r3, r7, #20
 80013d8:	4618      	mov	r0, r3
 80013da:	f000 ffef 	bl	80023bc <HAL_RCC_OscConfig>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <SystemClock_LowPower_Config+0x5c>
    {
        Error_Handler();
 80013e4:	f000 f948 	bl	8001678 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013e8:	230f      	movs	r3, #15
 80013ea:	603b      	str	r3, [r7, #0]
    |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80013ec:	2300      	movs	r3, #0
 80013ee:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013f0:	2300      	movs	r3, #0
 80013f2:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013f4:	2300      	movs	r3, #0
 80013f6:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013f8:	2300      	movs	r3, #0
 80013fa:	613b      	str	r3, [r7, #16]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013fc:	463b      	mov	r3, r7
 80013fe:	2100      	movs	r1, #0
 8001400:	4618      	mov	r0, r3
 8001402:	f001 fbb7 	bl	8002b74 <HAL_RCC_ClockConfig>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <SystemClock_LowPower_Config+0x84>
    {
        Error_Handler();
 800140c:	f000 f934 	bl	8001678 <Error_Handler>
    }

    // Print current system clock frequency
    printf("(LOST) current system clock is %lu Hz\n", HAL_RCC_GetSysClockFreq());
 8001410:	f001 fcb0 	bl	8002d74 <HAL_RCC_GetSysClockFreq>
 8001414:	4603      	mov	r3, r0
 8001416:	4619      	mov	r1, r3
 8001418:	4803      	ldr	r0, [pc, #12]	@ (8001428 <SystemClock_LowPower_Config+0x9c>)
 800141a:	f002 fcb5 	bl	8003d88 <iprintf>
}
 800141e:	bf00      	nop
 8001420:	3758      	adds	r7, #88	@ 0x58
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	08004e7c 	.word	0x08004e7c

0800142c <SystemClock_FullSpeed_Config>:

void SystemClock_FullSpeed_Config(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b096      	sub	sp, #88	@ 0x58
 8001430:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001432:	f107 0314 	add.w	r3, r7, #20
 8001436:	2244      	movs	r2, #68	@ 0x44
 8001438:	2100      	movs	r1, #0
 800143a:	4618      	mov	r0, r3
 800143c:	f002 fe20 	bl	8004080 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001440:	463b      	mov	r3, r7
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]
 800144a:	60da      	str	r2, [r3, #12]
 800144c:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
    */
    if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800144e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001452:	f000 ff31 	bl	80022b8 <HAL_PWREx_ControlVoltageScaling>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <SystemClock_FullSpeed_Config+0x34>
    {
        Error_Handler();
 800145c:	f000 f90c 	bl	8001678 <Error_Handler>
    }

    /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001460:	2310      	movs	r3, #16
 8001462:	617b      	str	r3, [r7, #20]
    RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001464:	2301      	movs	r3, #1
 8001466:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.MSICalibrationValue = 0;
 8001468:	2300      	movs	r3, #0
 800146a:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;  // 8 MHz
 800146c:	2370      	movs	r3, #112	@ 0x70
 800146e:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001470:	2300      	movs	r3, #0
 8001472:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001474:	f107 0314 	add.w	r3, r7, #20
 8001478:	4618      	mov	r0, r3
 800147a:	f000 ff9f 	bl	80023bc <HAL_RCC_OscConfig>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <SystemClock_FullSpeed_Config+0x5c>
    {
        Error_Handler();
 8001484:	f000 f8f8 	bl	8001678 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001488:	230f      	movs	r3, #15
 800148a:	603b      	str	r3, [r7, #0]
    |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800148c:	2300      	movs	r3, #0
 800148e:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001490:	2300      	movs	r3, #0
 8001492:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001494:	2300      	movs	r3, #0
 8001496:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001498:	2300      	movs	r3, #0
 800149a:	613b      	str	r3, [r7, #16]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800149c:	463b      	mov	r3, r7
 800149e:	2100      	movs	r1, #0
 80014a0:	4618      	mov	r0, r3
 80014a2:	f001 fb67 	bl	8002b74 <HAL_RCC_ClockConfig>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <SystemClock_FullSpeed_Config+0x84>
    {
        Error_Handler();
 80014ac:	f000 f8e4 	bl	8001678 <Error_Handler>
    }

    // Print current system clock frequency
    printf("(FULL SPEED) current system clock is %lu Hz\n", HAL_RCC_GetSysClockFreq());
 80014b0:	f001 fc60 	bl	8002d74 <HAL_RCC_GetSysClockFreq>
 80014b4:	4603      	mov	r3, r0
 80014b6:	4619      	mov	r1, r3
 80014b8:	4803      	ldr	r0, [pc, #12]	@ (80014c8 <SystemClock_FullSpeed_Config+0x9c>)
 80014ba:	f002 fc65 	bl	8003d88 <iprintf>
}
 80014be:	bf00      	nop
 80014c0:	3758      	adds	r7, #88	@ 0x58
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	08004ea4 	.word	0x08004ea4

080014cc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80014d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001540 <MX_SPI3_Init+0x74>)
 80014d2:	4a1c      	ldr	r2, [pc, #112]	@ (8001544 <MX_SPI3_Init+0x78>)
 80014d4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80014d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001540 <MX_SPI3_Init+0x74>)
 80014d8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80014dc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80014de:	4b18      	ldr	r3, [pc, #96]	@ (8001540 <MX_SPI3_Init+0x74>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80014e4:	4b16      	ldr	r3, [pc, #88]	@ (8001540 <MX_SPI3_Init+0x74>)
 80014e6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80014ea:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014ec:	4b14      	ldr	r3, [pc, #80]	@ (8001540 <MX_SPI3_Init+0x74>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014f2:	4b13      	ldr	r3, [pc, #76]	@ (8001540 <MX_SPI3_Init+0x74>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80014f8:	4b11      	ldr	r3, [pc, #68]	@ (8001540 <MX_SPI3_Init+0x74>)
 80014fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014fe:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001500:	4b0f      	ldr	r3, [pc, #60]	@ (8001540 <MX_SPI3_Init+0x74>)
 8001502:	2200      	movs	r2, #0
 8001504:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001506:	4b0e      	ldr	r3, [pc, #56]	@ (8001540 <MX_SPI3_Init+0x74>)
 8001508:	2200      	movs	r2, #0
 800150a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800150c:	4b0c      	ldr	r3, [pc, #48]	@ (8001540 <MX_SPI3_Init+0x74>)
 800150e:	2200      	movs	r2, #0
 8001510:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001512:	4b0b      	ldr	r3, [pc, #44]	@ (8001540 <MX_SPI3_Init+0x74>)
 8001514:	2200      	movs	r2, #0
 8001516:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001518:	4b09      	ldr	r3, [pc, #36]	@ (8001540 <MX_SPI3_Init+0x74>)
 800151a:	2207      	movs	r2, #7
 800151c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800151e:	4b08      	ldr	r3, [pc, #32]	@ (8001540 <MX_SPI3_Init+0x74>)
 8001520:	2200      	movs	r2, #0
 8001522:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001524:	4b06      	ldr	r3, [pc, #24]	@ (8001540 <MX_SPI3_Init+0x74>)
 8001526:	2208      	movs	r2, #8
 8001528:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800152a:	4805      	ldr	r0, [pc, #20]	@ (8001540 <MX_SPI3_Init+0x74>)
 800152c:	f001 fd0e 	bl	8002f4c <HAL_SPI_Init>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001536:	f000 f89f 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	200002f4 	.word	0x200002f4
 8001544:	40003c00 	.word	0x40003c00

08001548 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b08a      	sub	sp, #40	@ 0x28
 800154c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154e:	f107 0314 	add.w	r3, r7, #20
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	605a      	str	r2, [r3, #4]
 8001558:	609a      	str	r2, [r3, #8]
 800155a:	60da      	str	r2, [r3, #12]
 800155c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800155e:	4b43      	ldr	r3, [pc, #268]	@ (800166c <MX_GPIO_Init+0x124>)
 8001560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001562:	4a42      	ldr	r2, [pc, #264]	@ (800166c <MX_GPIO_Init+0x124>)
 8001564:	f043 0310 	orr.w	r3, r3, #16
 8001568:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800156a:	4b40      	ldr	r3, [pc, #256]	@ (800166c <MX_GPIO_Init+0x124>)
 800156c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800156e:	f003 0310 	and.w	r3, r3, #16
 8001572:	613b      	str	r3, [r7, #16]
 8001574:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001576:	4b3d      	ldr	r3, [pc, #244]	@ (800166c <MX_GPIO_Init+0x124>)
 8001578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800157a:	4a3c      	ldr	r2, [pc, #240]	@ (800166c <MX_GPIO_Init+0x124>)
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001582:	4b3a      	ldr	r3, [pc, #232]	@ (800166c <MX_GPIO_Init+0x124>)
 8001584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800158e:	4b37      	ldr	r3, [pc, #220]	@ (800166c <MX_GPIO_Init+0x124>)
 8001590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001592:	4a36      	ldr	r2, [pc, #216]	@ (800166c <MX_GPIO_Init+0x124>)
 8001594:	f043 0302 	orr.w	r3, r3, #2
 8001598:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800159a:	4b34      	ldr	r3, [pc, #208]	@ (800166c <MX_GPIO_Init+0x124>)
 800159c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	60bb      	str	r3, [r7, #8]
 80015a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015a6:	4b31      	ldr	r3, [pc, #196]	@ (800166c <MX_GPIO_Init+0x124>)
 80015a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015aa:	4a30      	ldr	r2, [pc, #192]	@ (800166c <MX_GPIO_Init+0x124>)
 80015ac:	f043 0308 	orr.w	r3, r3, #8
 80015b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015b2:	4b2e      	ldr	r3, [pc, #184]	@ (800166c <MX_GPIO_Init+0x124>)
 80015b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b6:	f003 0308 	and.w	r3, r3, #8
 80015ba:	607b      	str	r3, [r7, #4]
 80015bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015be:	4b2b      	ldr	r3, [pc, #172]	@ (800166c <MX_GPIO_Init+0x124>)
 80015c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015c2:	4a2a      	ldr	r2, [pc, #168]	@ (800166c <MX_GPIO_Init+0x124>)
 80015c4:	f043 0304 	orr.w	r3, r3, #4
 80015c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015ca:	4b28      	ldr	r3, [pc, #160]	@ (800166c <MX_GPIO_Init+0x124>)
 80015cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ce:	f003 0304 	and.w	r3, r3, #4
 80015d2:	603b      	str	r3, [r7, #0]
 80015d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_LED1_GPIO_Port, GPIO_LED1_Pin, GPIO_PIN_RESET);
 80015d6:	2200      	movs	r2, #0
 80015d8:	2120      	movs	r1, #32
 80015da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015de:	f000 fe21 	bl	8002224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port, BLE_CS_Pin, GPIO_PIN_SET);
 80015e2:	2201      	movs	r2, #1
 80015e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015e8:	4821      	ldr	r0, [pc, #132]	@ (8001670 <MX_GPIO_Init+0x128>)
 80015ea:	f000 fe1b 	bl	8002224 <HAL_GPIO_WritePin>


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port, BLE_RESET_Pin, GPIO_PIN_SET);
 80015ee:	2201      	movs	r2, #1
 80015f0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015f8:	f000 fe14 	bl	8002224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLE_INT_Pin */
  GPIO_InitStruct.Pin = BLE_INT_Pin;
 80015fc:	2340      	movs	r3, #64	@ 0x40
 80015fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001600:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001604:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLE_INT_GPIO_Port, &GPIO_InitStruct);
 800160a:	f107 0314 	add.w	r3, r7, #20
 800160e:	4619      	mov	r1, r3
 8001610:	4818      	ldr	r0, [pc, #96]	@ (8001674 <MX_GPIO_Init+0x12c>)
 8001612:	f000 fc45 	bl	8001ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_LED1_Pin BLE_RESET_Pin */
  GPIO_InitStruct.Pin = GPIO_LED1_Pin|BLE_RESET_Pin;
 8001616:	f44f 7390 	mov.w	r3, #288	@ 0x120
 800161a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800161c:	2301      	movs	r3, #1
 800161e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001624:	2300      	movs	r3, #0
 8001626:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001628:	f107 0314 	add.w	r3, r7, #20
 800162c:	4619      	mov	r1, r3
 800162e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001632:	f000 fc35 	bl	8001ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_CS_Pin */
  GPIO_InitStruct.Pin = BLE_CS_Pin;
 8001636:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800163a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800163c:	2301      	movs	r3, #1
 800163e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001644:	2303      	movs	r3, #3
 8001646:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLE_CS_GPIO_Port, &GPIO_InitStruct);
 8001648:	f107 0314 	add.w	r3, r7, #20
 800164c:	4619      	mov	r1, r3
 800164e:	4808      	ldr	r0, [pc, #32]	@ (8001670 <MX_GPIO_Init+0x128>)
 8001650:	f000 fc26 	bl	8001ea0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001654:	2200      	movs	r2, #0
 8001656:	2100      	movs	r1, #0
 8001658:	2017      	movs	r0, #23
 800165a:	f000 fbea 	bl	8001e32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800165e:	2017      	movs	r0, #23
 8001660:	f000 fc03 	bl	8001e6a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001664:	bf00      	nop
 8001666:	3728      	adds	r7, #40	@ 0x28
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40021000 	.word	0x40021000
 8001670:	48000c00 	.word	0x48000c00
 8001674:	48001000 	.word	0x48001000

08001678 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800167c:	b672      	cpsid	i
}
 800167e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001680:	bf00      	nop
 8001682:	e7fd      	b.n	8001680 <Error_Handler+0x8>

08001684 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800168a:	4b0f      	ldr	r3, [pc, #60]	@ (80016c8 <HAL_MspInit+0x44>)
 800168c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800168e:	4a0e      	ldr	r2, [pc, #56]	@ (80016c8 <HAL_MspInit+0x44>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	6613      	str	r3, [r2, #96]	@ 0x60
 8001696:	4b0c      	ldr	r3, [pc, #48]	@ (80016c8 <HAL_MspInit+0x44>)
 8001698:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	607b      	str	r3, [r7, #4]
 80016a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016a2:	4b09      	ldr	r3, [pc, #36]	@ (80016c8 <HAL_MspInit+0x44>)
 80016a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016a6:	4a08      	ldr	r2, [pc, #32]	@ (80016c8 <HAL_MspInit+0x44>)
 80016a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80016ae:	4b06      	ldr	r3, [pc, #24]	@ (80016c8 <HAL_MspInit+0x44>)
 80016b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016b6:	603b      	str	r3, [r7, #0]
 80016b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ba:	bf00      	nop
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	40021000 	.word	0x40021000

080016cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b08a      	sub	sp, #40	@ 0x28
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d4:	f107 0314 	add.w	r3, r7, #20
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	60da      	str	r2, [r3, #12]
 80016e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a17      	ldr	r2, [pc, #92]	@ (8001748 <HAL_SPI_MspInit+0x7c>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d128      	bne.n	8001740 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80016ee:	4b17      	ldr	r3, [pc, #92]	@ (800174c <HAL_SPI_MspInit+0x80>)
 80016f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016f2:	4a16      	ldr	r2, [pc, #88]	@ (800174c <HAL_SPI_MspInit+0x80>)
 80016f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80016f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80016fa:	4b14      	ldr	r3, [pc, #80]	@ (800174c <HAL_SPI_MspInit+0x80>)
 80016fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001702:	613b      	str	r3, [r7, #16]
 8001704:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001706:	4b11      	ldr	r3, [pc, #68]	@ (800174c <HAL_SPI_MspInit+0x80>)
 8001708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800170a:	4a10      	ldr	r2, [pc, #64]	@ (800174c <HAL_SPI_MspInit+0x80>)
 800170c:	f043 0304 	orr.w	r3, r3, #4
 8001710:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001712:	4b0e      	ldr	r3, [pc, #56]	@ (800174c <HAL_SPI_MspInit+0x80>)
 8001714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001716:	f003 0304 	and.w	r3, r3, #4
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800171e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001722:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001724:	2302      	movs	r3, #2
 8001726:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172c:	2303      	movs	r3, #3
 800172e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001730:	2306      	movs	r3, #6
 8001732:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001734:	f107 0314 	add.w	r3, r7, #20
 8001738:	4619      	mov	r1, r3
 800173a:	4805      	ldr	r0, [pc, #20]	@ (8001750 <HAL_SPI_MspInit+0x84>)
 800173c:	f000 fbb0 	bl	8001ea0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001740:	bf00      	nop
 8001742:	3728      	adds	r7, #40	@ 0x28
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	40003c00 	.word	0x40003c00
 800174c:	40021000 	.word	0x40021000
 8001750:	48000800 	.word	0x48000800

08001754 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001758:	bf00      	nop
 800175a:	e7fd      	b.n	8001758 <NMI_Handler+0x4>

0800175c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001760:	bf00      	nop
 8001762:	e7fd      	b.n	8001760 <HardFault_Handler+0x4>

08001764 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001768:	bf00      	nop
 800176a:	e7fd      	b.n	8001768 <MemManage_Handler+0x4>

0800176c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001770:	bf00      	nop
 8001772:	e7fd      	b.n	8001770 <BusFault_Handler+0x4>

08001774 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001778:	bf00      	nop
 800177a:	e7fd      	b.n	8001778 <UsageFault_Handler+0x4>

0800177c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800178a:	b480      	push	{r7}
 800178c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017aa:	f000 fa03 	bl	8001bb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
	...

080017b4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  dataAvailable=1;
 80017b8:	4b03      	ldr	r3, [pc, #12]	@ (80017c8 <EXTI9_5_IRQHandler+0x14>)
 80017ba:	2201      	movs	r2, #1
 80017bc:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLE_INT_Pin);
 80017be:	2040      	movs	r0, #64	@ 0x40
 80017c0:	f000 fd48 	bl	8002254 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80017c4:	bf00      	nop
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	200002f0 	.word	0x200002f0

080017cc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]
 80017dc:	e00a      	b.n	80017f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017de:	f3af 8000 	nop.w
 80017e2:	4601      	mov	r1, r0
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	1c5a      	adds	r2, r3, #1
 80017e8:	60ba      	str	r2, [r7, #8]
 80017ea:	b2ca      	uxtb	r2, r1
 80017ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	3301      	adds	r3, #1
 80017f2:	617b      	str	r3, [r7, #20]
 80017f4:	697a      	ldr	r2, [r7, #20]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	dbf0      	blt.n	80017de <_read+0x12>
	}

return len;
 80017fc:	687b      	ldr	r3, [r7, #4]
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3718      	adds	r7, #24
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
	...

08001808 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001810:	4b11      	ldr	r3, [pc, #68]	@ (8001858 <_sbrk+0x50>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d102      	bne.n	800181e <_sbrk+0x16>
		heap_end = &end;
 8001818:	4b0f      	ldr	r3, [pc, #60]	@ (8001858 <_sbrk+0x50>)
 800181a:	4a10      	ldr	r2, [pc, #64]	@ (800185c <_sbrk+0x54>)
 800181c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800181e:	4b0e      	ldr	r3, [pc, #56]	@ (8001858 <_sbrk+0x50>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001824:	4b0c      	ldr	r3, [pc, #48]	@ (8001858 <_sbrk+0x50>)
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	4413      	add	r3, r2
 800182c:	466a      	mov	r2, sp
 800182e:	4293      	cmp	r3, r2
 8001830:	d907      	bls.n	8001842 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001832:	f002 fc83 	bl	800413c <__errno>
 8001836:	4603      	mov	r3, r0
 8001838:	220c      	movs	r2, #12
 800183a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800183c:	f04f 33ff 	mov.w	r3, #4294967295
 8001840:	e006      	b.n	8001850 <_sbrk+0x48>
	}

	heap_end += incr;
 8001842:	4b05      	ldr	r3, [pc, #20]	@ (8001858 <_sbrk+0x50>)
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4413      	add	r3, r2
 800184a:	4a03      	ldr	r2, [pc, #12]	@ (8001858 <_sbrk+0x50>)
 800184c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800184e:	68fb      	ldr	r3, [r7, #12]
}
 8001850:	4618      	mov	r0, r3
 8001852:	3710      	adds	r7, #16
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	20000364 	.word	0x20000364
 800185c:	200004b8 	.word	0x200004b8

08001860 <_close>:

int _close(int file)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
	return -1;
 8001868:	f04f 33ff 	mov.w	r3, #4294967295
}
 800186c:	4618      	mov	r0, r3
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001888:	605a      	str	r2, [r3, #4]
	return 0;
 800188a:	2300      	movs	r3, #0
}
 800188c:	4618      	mov	r0, r3
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <_isatty>:

int _isatty(int file)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
	return 1;
 80018a0:	2301      	movs	r3, #1
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018ae:	b480      	push	{r7}
 80018b0:	b085      	sub	sp, #20
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	60f8      	str	r0, [r7, #12]
 80018b6:	60b9      	str	r1, [r7, #8]
 80018b8:	607a      	str	r2, [r7, #4]
	return 0;
 80018ba:	2300      	movs	r3, #0
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3714      	adds	r7, #20
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018cc:	4b17      	ldr	r3, [pc, #92]	@ (800192c <SystemInit+0x64>)
 80018ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018d2:	4a16      	ldr	r2, [pc, #88]	@ (800192c <SystemInit+0x64>)
 80018d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80018dc:	4b14      	ldr	r3, [pc, #80]	@ (8001930 <SystemInit+0x68>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a13      	ldr	r2, [pc, #76]	@ (8001930 <SystemInit+0x68>)
 80018e2:	f043 0301 	orr.w	r3, r3, #1
 80018e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80018e8:	4b11      	ldr	r3, [pc, #68]	@ (8001930 <SystemInit+0x68>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80018ee:	4b10      	ldr	r3, [pc, #64]	@ (8001930 <SystemInit+0x68>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a0f      	ldr	r2, [pc, #60]	@ (8001930 <SystemInit+0x68>)
 80018f4:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 80018f8:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 80018fc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80018fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001930 <SystemInit+0x68>)
 8001900:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001904:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001906:	4b0a      	ldr	r3, [pc, #40]	@ (8001930 <SystemInit+0x68>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a09      	ldr	r2, [pc, #36]	@ (8001930 <SystemInit+0x68>)
 800190c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001910:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001912:	4b07      	ldr	r3, [pc, #28]	@ (8001930 <SystemInit+0x68>)
 8001914:	2200      	movs	r2, #0
 8001916:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001918:	4b04      	ldr	r3, [pc, #16]	@ (800192c <SystemInit+0x64>)
 800191a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800191e:	609a      	str	r2, [r3, #8]
#endif
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	e000ed00 	.word	0xe000ed00
 8001930:	40021000 	.word	0x40021000

08001934 <__NVIC_EnableIRQ>:
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800193e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001942:	2b00      	cmp	r3, #0
 8001944:	db0b      	blt.n	800195e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001946:	79fb      	ldrb	r3, [r7, #7]
 8001948:	f003 021f 	and.w	r2, r3, #31
 800194c:	4907      	ldr	r1, [pc, #28]	@ (800196c <__NVIC_EnableIRQ+0x38>)
 800194e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001952:	095b      	lsrs	r3, r3, #5
 8001954:	2001      	movs	r0, #1
 8001956:	fa00 f202 	lsl.w	r2, r0, r2
 800195a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	e000e100 	.word	0xe000e100

08001970 <__NVIC_SetPriority>:
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	6039      	str	r1, [r7, #0]
 800197a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800197c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001980:	2b00      	cmp	r3, #0
 8001982:	db0a      	blt.n	800199a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	b2da      	uxtb	r2, r3
 8001988:	490c      	ldr	r1, [pc, #48]	@ (80019bc <__NVIC_SetPriority+0x4c>)
 800198a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198e:	0112      	lsls	r2, r2, #4
 8001990:	b2d2      	uxtb	r2, r2
 8001992:	440b      	add	r3, r1
 8001994:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001998:	e00a      	b.n	80019b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	b2da      	uxtb	r2, r3
 800199e:	4908      	ldr	r1, [pc, #32]	@ (80019c0 <__NVIC_SetPriority+0x50>)
 80019a0:	79fb      	ldrb	r3, [r7, #7]
 80019a2:	f003 030f 	and.w	r3, r3, #15
 80019a6:	3b04      	subs	r3, #4
 80019a8:	0112      	lsls	r2, r2, #4
 80019aa:	b2d2      	uxtb	r2, r2
 80019ac:	440b      	add	r3, r1
 80019ae:	761a      	strb	r2, [r3, #24]
}
 80019b0:	bf00      	nop
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	e000e100 	.word	0xe000e100
 80019c0:	e000ed00 	.word	0xe000ed00

080019c4 <lptim_init>:
	// Restart the timer
    timer->CR1 |= TIM_CR1_CEN;

}

void lptim_init(void) {
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0

	// Enable LSI Ready Interrupt
	RCC->CIER |= RCC_CIER_LSIRDYIE;
 80019c8:	4b32      	ldr	r3, [pc, #200]	@ (8001a94 <lptim_init+0xd0>)
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	4a31      	ldr	r2, [pc, #196]	@ (8001a94 <lptim_init+0xd0>)
 80019ce:	f043 0301 	orr.w	r3, r3, #1
 80019d2:	6193      	str	r3, [r2, #24]

    // Step 1: enable LSI
    RCC->CSR |= RCC_CSR_LSION;
 80019d4:	4b2f      	ldr	r3, [pc, #188]	@ (8001a94 <lptim_init+0xd0>)
 80019d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019da:	4a2e      	ldr	r2, [pc, #184]	@ (8001a94 <lptim_init+0xd0>)
 80019dc:	f043 0301 	orr.w	r3, r3, #1
 80019e0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    while (!(RCC->CSR & RCC_CSR_LSIRDY));
 80019e4:	bf00      	nop
 80019e6:	4b2b      	ldr	r3, [pc, #172]	@ (8001a94 <lptim_init+0xd0>)
 80019e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019ec:	f003 0302 	and.w	r3, r3, #2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d0f8      	beq.n	80019e6 <lptim_init+0x22>

    // Step 2: enable LPTIM1 clock
    RCC->APB1ENR1 |= RCC_APB1ENR1_LPTIM1EN;
 80019f4:	4b27      	ldr	r3, [pc, #156]	@ (8001a94 <lptim_init+0xd0>)
 80019f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019f8:	4a26      	ldr	r2, [pc, #152]	@ (8001a94 <lptim_init+0xd0>)
 80019fa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80019fe:	6593      	str	r3, [r2, #88]	@ 0x58

    // Step 3: Configure LPTIM1 to use LSI clock
    RCC->CCIPR &= ~RCC_CCIPR_LPTIM1SEL; // Clear existing settings
 8001a00:	4b24      	ldr	r3, [pc, #144]	@ (8001a94 <lptim_init+0xd0>)
 8001a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a06:	4a23      	ldr	r2, [pc, #140]	@ (8001a94 <lptim_init+0xd0>)
 8001a08:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8001a0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    RCC->CCIPR |= RCC_CCIPR_LPTIM1SEL_0; // Select LSI (01 in the bitfield)
 8001a10:	4b20      	ldr	r3, [pc, #128]	@ (8001a94 <lptim_init+0xd0>)
 8001a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a16:	4a1f      	ldr	r2, [pc, #124]	@ (8001a94 <lptim_init+0xd0>)
 8001a18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

    // Step 4: Enable LPTIM1 to continue running in debug mode
    //DBGMCU->APB1FZR1 &= ~DBGMCU_APB1FZR1_DBG_LPTIM1_STOP;

    // 5. Disable the LPTIM before configuration
    LPTIM1->CR &= ~LPTIM_CR_ENABLE; // Clear ENABLE bit
 8001a20:	4b1d      	ldr	r3, [pc, #116]	@ (8001a98 <lptim_init+0xd4>)
 8001a22:	691b      	ldr	r3, [r3, #16]
 8001a24:	4a1c      	ldr	r2, [pc, #112]	@ (8001a98 <lptim_init+0xd4>)
 8001a26:	f023 0301 	bic.w	r3, r3, #1
 8001a2a:	6113      	str	r3, [r2, #16]

    // Wait for the timer to be actually disabled
    while(LPTIM1->CR & LPTIM_CR_ENABLE) {}
 8001a2c:	bf00      	nop
 8001a2e:	4b1a      	ldr	r3, [pc, #104]	@ (8001a98 <lptim_init+0xd4>)
 8001a30:	691b      	ldr	r3, [r3, #16]
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d1f9      	bne.n	8001a2e <lptim_init+0x6a>

    // 6. Clear any pending interrupts
    // Clear all LPTIM1 interrupt flags using specific macros
    LPTIM1->ICR = LPTIM_ICR_ARRMCF |    // Clear Auto-Reload Match flag
 8001a3a:	4b17      	ldr	r3, [pc, #92]	@ (8001a98 <lptim_init+0xd4>)
 8001a3c:	225f      	movs	r2, #95	@ 0x5f
 8001a3e:	605a      	str	r2, [r3, #4]
                  LPTIM_ICR_CMPMCF |      // Clear Compare Match flag
                  LPTIM_ICR_ARRMCF |  // Clear Interrupt Enable flag
                  LPTIM_ICR_DOWNCF;      // Clear Down Count flag

    // 7. Configure LPTIM Registers
    LPTIM1->CFGR = 0; // Clear configuration register
 8001a40:	4b15      	ldr	r3, [pc, #84]	@ (8001a98 <lptim_init+0xd4>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	60da      	str	r2, [r3, #12]

    // 8. Configure Clock Source and Counter Mode
    // CKSEL = 0 (internal clock)
    // COUNTMODE = 0 (update counter on each internal clock pulse)
    // Prescaler = 32 (division ratio of 32, corresponds to binary 101)
    LPTIM1->CFGR = (0b101 << LPTIM_CFGR_PRESC_Pos) | // Prescaler
 8001a46:	4b14      	ldr	r3, [pc, #80]	@ (8001a98 <lptim_init+0xd4>)
 8001a48:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8001a4c:	60da      	str	r2, [r3, #12]

    // 9. Set Operating Mode (Continuous Mode)
    // PRELOAD = 0 (immediate update)
    // LPTIM1->CFGR &= ~LPTIM_CFGR_PRELOAD;

    LPTIM1->CNT = 0;
 8001a4e:	4b12      	ldr	r3, [pc, #72]	@ (8001a98 <lptim_init+0xd4>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	61da      	str	r2, [r3, #28]

    // 10. Configure Interrupt Registers
    // Enable relevant interrupts
    LPTIM1->IER = LPTIM_IER_ARRMIE; // Auto-reload match interrupt
 8001a54:	4b10      	ldr	r3, [pc, #64]	@ (8001a98 <lptim_init+0xd4>)
 8001a56:	2202      	movs	r2, #2
 8001a58:	609a      	str	r2, [r3, #8]

    // 13. Clear ARROK flag
    // LPTIM1->ICR |= LPTIM_ICR_ARROKCF;

    // 16. Configure NVIC for LPTIM1 Interrupt
    NVIC_SetPriority(LPTIM1_IRQn, 0);
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	2041      	movs	r0, #65	@ 0x41
 8001a5e:	f7ff ff87 	bl	8001970 <__NVIC_SetPriority>
    NVIC_EnableIRQ(LPTIM1_IRQn);
 8001a62:	2041      	movs	r0, #65	@ 0x41
 8001a64:	f7ff ff66 	bl	8001934 <__NVIC_EnableIRQ>

    // 14. Enable Timer
    // Set ENABLE bit in CR register
    LPTIM1->CR |= LPTIM_CR_ENABLE;
 8001a68:	4b0b      	ldr	r3, [pc, #44]	@ (8001a98 <lptim_init+0xd4>)
 8001a6a:	691b      	ldr	r3, [r3, #16]
 8001a6c:	4a0a      	ldr	r2, [pc, #40]	@ (8001a98 <lptim_init+0xd4>)
 8001a6e:	f043 0301 	orr.w	r3, r3, #1
 8001a72:	6113      	str	r3, [r2, #16]

    // Wait for the timer to be actually enabled
    while(!(LPTIM1->CR & LPTIM_CR_ENABLE)) {}
 8001a74:	bf00      	nop
 8001a76:	4b08      	ldr	r3, [pc, #32]	@ (8001a98 <lptim_init+0xd4>)
 8001a78:	691b      	ldr	r3, [r3, #16]
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d0f9      	beq.n	8001a76 <lptim_init+0xb2>

    // 15. Start Continuous Counting
    // Set CNTSTRT bit to start counter
    LPTIM1->CR |= LPTIM_CR_CNTSTRT;
 8001a82:	4b05      	ldr	r3, [pc, #20]	@ (8001a98 <lptim_init+0xd4>)
 8001a84:	691b      	ldr	r3, [r3, #16]
 8001a86:	4a04      	ldr	r2, [pc, #16]	@ (8001a98 <lptim_init+0xd4>)
 8001a88:	f043 0304 	orr.w	r3, r3, #4
 8001a8c:	6113      	str	r3, [r2, #16]

}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40021000 	.word	0x40021000
 8001a98:	40007c00 	.word	0x40007c00

08001a9c <set_low_timer_ms>:

void set_low_timer_ms() {
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
	LPTIM1->ARR = 1000; // 1 ms period (adjust as needed)
 8001aa0:	4b04      	ldr	r3, [pc, #16]	@ (8001ab4 <set_low_timer_ms+0x18>)
 8001aa2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001aa6:	619a      	str	r2, [r3, #24]
}
 8001aa8:	bf00      	nop
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	40007c00 	.word	0x40007c00

08001ab8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ab8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001af0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001abc:	f7ff ff04 	bl	80018c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ac0:	480c      	ldr	r0, [pc, #48]	@ (8001af4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ac2:	490d      	ldr	r1, [pc, #52]	@ (8001af8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ac4:	4a0d      	ldr	r2, [pc, #52]	@ (8001afc <LoopForever+0xe>)
  movs r3, #0
 8001ac6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ac8:	e002      	b.n	8001ad0 <LoopCopyDataInit>

08001aca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001acc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ace:	3304      	adds	r3, #4

08001ad0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ad0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ad2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ad4:	d3f9      	bcc.n	8001aca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ad6:	4a0a      	ldr	r2, [pc, #40]	@ (8001b00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ad8:	4c0a      	ldr	r4, [pc, #40]	@ (8001b04 <LoopForever+0x16>)
  movs r3, #0
 8001ada:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001adc:	e001      	b.n	8001ae2 <LoopFillZerobss>

08001ade <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ade:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ae0:	3204      	adds	r2, #4

08001ae2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ae2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ae4:	d3fb      	bcc.n	8001ade <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ae6:	f002 fb2f 	bl	8004148 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001aea:	f7ff fa4e 	bl	8000f8a <main>

08001aee <LoopForever>:

LoopForever:
    b LoopForever
 8001aee:	e7fe      	b.n	8001aee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001af0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001af4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001af8:	200001b8 	.word	0x200001b8
  ldr r2, =_sidata
 8001afc:	08004f58 	.word	0x08004f58
  ldr r2, =_sbss
 8001b00:	200001b8 	.word	0x200001b8
  ldr r4, =_ebss
 8001b04:	200004b8 	.word	0x200004b8

08001b08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b08:	e7fe      	b.n	8001b08 <ADC1_2_IRQHandler>

08001b0a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b082      	sub	sp, #8
 8001b0e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b10:	2300      	movs	r3, #0
 8001b12:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b14:	2003      	movs	r0, #3
 8001b16:	f000 f981 	bl	8001e1c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b1a:	2000      	movs	r0, #0
 8001b1c:	f000 f80e 	bl	8001b3c <HAL_InitTick>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d002      	beq.n	8001b2c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	71fb      	strb	r3, [r7, #7]
 8001b2a:	e001      	b.n	8001b30 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b2c:	f7ff fdaa 	bl	8001684 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b30:	79fb      	ldrb	r3, [r7, #7]
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
	...

08001b3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b44:	2300      	movs	r3, #0
 8001b46:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b48:	4b17      	ldr	r3, [pc, #92]	@ (8001ba8 <HAL_InitTick+0x6c>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d023      	beq.n	8001b98 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b50:	4b16      	ldr	r3, [pc, #88]	@ (8001bac <HAL_InitTick+0x70>)
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	4b14      	ldr	r3, [pc, #80]	@ (8001ba8 <HAL_InitTick+0x6c>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	4619      	mov	r1, r3
 8001b5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b66:	4618      	mov	r0, r3
 8001b68:	f000 f98d 	bl	8001e86 <HAL_SYSTICK_Config>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d10f      	bne.n	8001b92 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2b0f      	cmp	r3, #15
 8001b76:	d809      	bhi.n	8001b8c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b78:	2200      	movs	r2, #0
 8001b7a:	6879      	ldr	r1, [r7, #4]
 8001b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b80:	f000 f957 	bl	8001e32 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b84:	4a0a      	ldr	r2, [pc, #40]	@ (8001bb0 <HAL_InitTick+0x74>)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6013      	str	r3, [r2, #0]
 8001b8a:	e007      	b.n	8001b9c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	73fb      	strb	r3, [r7, #15]
 8001b90:	e004      	b.n	8001b9c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	73fb      	strb	r3, [r7, #15]
 8001b96:	e001      	b.n	8001b9c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3710      	adds	r7, #16
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20000158 	.word	0x20000158
 8001bac:	20000150 	.word	0x20000150
 8001bb0:	20000154 	.word	0x20000154

08001bb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bb8:	4b06      	ldr	r3, [pc, #24]	@ (8001bd4 <HAL_IncTick+0x20>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	4b06      	ldr	r3, [pc, #24]	@ (8001bd8 <HAL_IncTick+0x24>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	4a04      	ldr	r2, [pc, #16]	@ (8001bd8 <HAL_IncTick+0x24>)
 8001bc6:	6013      	str	r3, [r2, #0]
}
 8001bc8:	bf00      	nop
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	20000158 	.word	0x20000158
 8001bd8:	20000368 	.word	0x20000368

08001bdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  return uwTick;
 8001be0:	4b03      	ldr	r3, [pc, #12]	@ (8001bf0 <HAL_GetTick+0x14>)
 8001be2:	681b      	ldr	r3, [r3, #0]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	20000368 	.word	0x20000368

08001bf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bfc:	f7ff ffee 	bl	8001bdc <HAL_GetTick>
 8001c00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c0c:	d005      	beq.n	8001c1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c38 <HAL_Delay+0x44>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	461a      	mov	r2, r3
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	4413      	add	r3, r2
 8001c18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c1a:	bf00      	nop
 8001c1c:	f7ff ffde 	bl	8001bdc <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d8f7      	bhi.n	8001c1c <HAL_Delay+0x28>
  {
  }
}
 8001c2c:	bf00      	nop
 8001c2e:	bf00      	nop
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000158 	.word	0x20000158

08001c3c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001c40:	4b05      	ldr	r3, [pc, #20]	@ (8001c58 <HAL_SuspendTick+0x1c>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a04      	ldr	r2, [pc, #16]	@ (8001c58 <HAL_SuspendTick+0x1c>)
 8001c46:	f023 0302 	bic.w	r3, r3, #2
 8001c4a:	6013      	str	r3, [r2, #0]
}
 8001c4c:	bf00      	nop
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	e000e010 	.word	0xe000e010

08001c5c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8001c60:	4b05      	ldr	r3, [pc, #20]	@ (8001c78 <HAL_ResumeTick+0x1c>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a04      	ldr	r2, [pc, #16]	@ (8001c78 <HAL_ResumeTick+0x1c>)
 8001c66:	f043 0302 	orr.w	r3, r3, #2
 8001c6a:	6013      	str	r3, [r2, #0]
}
 8001c6c:	bf00      	nop
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	e000e010 	.word	0xe000e010

08001c7c <__NVIC_SetPriorityGrouping>:
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c92:	68ba      	ldr	r2, [r7, #8]
 8001c94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c98:	4013      	ands	r3, r2
 8001c9a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ca4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ca8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cae:	4a04      	ldr	r2, [pc, #16]	@ (8001cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	60d3      	str	r3, [r2, #12]
}
 8001cb4:	bf00      	nop
 8001cb6:	3714      	adds	r7, #20
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	e000ed00 	.word	0xe000ed00

08001cc4 <__NVIC_GetPriorityGrouping>:
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cc8:	4b04      	ldr	r3, [pc, #16]	@ (8001cdc <__NVIC_GetPriorityGrouping+0x18>)
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	0a1b      	lsrs	r3, r3, #8
 8001cce:	f003 0307 	and.w	r3, r3, #7
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	e000ed00 	.word	0xe000ed00

08001ce0 <__NVIC_EnableIRQ>:
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	db0b      	blt.n	8001d0a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cf2:	79fb      	ldrb	r3, [r7, #7]
 8001cf4:	f003 021f 	and.w	r2, r3, #31
 8001cf8:	4907      	ldr	r1, [pc, #28]	@ (8001d18 <__NVIC_EnableIRQ+0x38>)
 8001cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfe:	095b      	lsrs	r3, r3, #5
 8001d00:	2001      	movs	r0, #1
 8001d02:	fa00 f202 	lsl.w	r2, r0, r2
 8001d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001d0a:	bf00      	nop
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	e000e100 	.word	0xe000e100

08001d1c <__NVIC_SetPriority>:
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	4603      	mov	r3, r0
 8001d24:	6039      	str	r1, [r7, #0]
 8001d26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	db0a      	blt.n	8001d46 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	b2da      	uxtb	r2, r3
 8001d34:	490c      	ldr	r1, [pc, #48]	@ (8001d68 <__NVIC_SetPriority+0x4c>)
 8001d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3a:	0112      	lsls	r2, r2, #4
 8001d3c:	b2d2      	uxtb	r2, r2
 8001d3e:	440b      	add	r3, r1
 8001d40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001d44:	e00a      	b.n	8001d5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	b2da      	uxtb	r2, r3
 8001d4a:	4908      	ldr	r1, [pc, #32]	@ (8001d6c <__NVIC_SetPriority+0x50>)
 8001d4c:	79fb      	ldrb	r3, [r7, #7]
 8001d4e:	f003 030f 	and.w	r3, r3, #15
 8001d52:	3b04      	subs	r3, #4
 8001d54:	0112      	lsls	r2, r2, #4
 8001d56:	b2d2      	uxtb	r2, r2
 8001d58:	440b      	add	r3, r1
 8001d5a:	761a      	strb	r2, [r3, #24]
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	e000e100 	.word	0xe000e100
 8001d6c:	e000ed00 	.word	0xe000ed00

08001d70 <NVIC_EncodePriority>:
{
 8001d70:	b480      	push	{r7}
 8001d72:	b089      	sub	sp, #36	@ 0x24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f003 0307 	and.w	r3, r3, #7
 8001d82:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	f1c3 0307 	rsb	r3, r3, #7
 8001d8a:	2b04      	cmp	r3, #4
 8001d8c:	bf28      	it	cs
 8001d8e:	2304      	movcs	r3, #4
 8001d90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	3304      	adds	r3, #4
 8001d96:	2b06      	cmp	r3, #6
 8001d98:	d902      	bls.n	8001da0 <NVIC_EncodePriority+0x30>
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	3b03      	subs	r3, #3
 8001d9e:	e000      	b.n	8001da2 <NVIC_EncodePriority+0x32>
 8001da0:	2300      	movs	r3, #0
 8001da2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da4:	f04f 32ff 	mov.w	r2, #4294967295
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	43da      	mvns	r2, r3
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	401a      	ands	r2, r3
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001db8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc2:	43d9      	mvns	r1, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc8:	4313      	orrs	r3, r2
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3724      	adds	r7, #36	@ 0x24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
	...

08001dd8 <SysTick_Config>:
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3b01      	subs	r3, #1
 8001de4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001de8:	d301      	bcc.n	8001dee <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001dea:	2301      	movs	r3, #1
 8001dec:	e00f      	b.n	8001e0e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dee:	4a0a      	ldr	r2, [pc, #40]	@ (8001e18 <SysTick_Config+0x40>)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3b01      	subs	r3, #1
 8001df4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001df6:	210f      	movs	r1, #15
 8001df8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dfc:	f7ff ff8e 	bl	8001d1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e00:	4b05      	ldr	r3, [pc, #20]	@ (8001e18 <SysTick_Config+0x40>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e06:	4b04      	ldr	r3, [pc, #16]	@ (8001e18 <SysTick_Config+0x40>)
 8001e08:	2207      	movs	r2, #7
 8001e0a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	e000e010 	.word	0xe000e010

08001e1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f7ff ff29 	bl	8001c7c <__NVIC_SetPriorityGrouping>
}
 8001e2a:	bf00      	nop
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b086      	sub	sp, #24
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	4603      	mov	r3, r0
 8001e3a:	60b9      	str	r1, [r7, #8]
 8001e3c:	607a      	str	r2, [r7, #4]
 8001e3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e40:	2300      	movs	r3, #0
 8001e42:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e44:	f7ff ff3e 	bl	8001cc4 <__NVIC_GetPriorityGrouping>
 8001e48:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	68b9      	ldr	r1, [r7, #8]
 8001e4e:	6978      	ldr	r0, [r7, #20]
 8001e50:	f7ff ff8e 	bl	8001d70 <NVIC_EncodePriority>
 8001e54:	4602      	mov	r2, r0
 8001e56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e5a:	4611      	mov	r1, r2
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff ff5d 	bl	8001d1c <__NVIC_SetPriority>
}
 8001e62:	bf00      	nop
 8001e64:	3718      	adds	r7, #24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b082      	sub	sp, #8
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	4603      	mov	r3, r0
 8001e72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff ff31 	bl	8001ce0 <__NVIC_EnableIRQ>
}
 8001e7e:	bf00      	nop
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b082      	sub	sp, #8
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7ff ffa2 	bl	8001dd8 <SysTick_Config>
 8001e94:	4603      	mov	r3, r0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
	...

08001ea0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b087      	sub	sp, #28
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eae:	e17f      	b.n	80021b0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	2101      	movs	r1, #1
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	f000 8171 	beq.w	80021aa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f003 0303 	and.w	r3, r3, #3
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d005      	beq.n	8001ee0 <HAL_GPIO_Init+0x40>
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f003 0303 	and.w	r3, r3, #3
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d130      	bne.n	8001f42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	2203      	movs	r2, #3
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	68da      	ldr	r2, [r3, #12]
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f16:	2201      	movs	r2, #1
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	4013      	ands	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	091b      	lsrs	r3, r3, #4
 8001f2c:	f003 0201 	and.w	r2, r3, #1
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f003 0303 	and.w	r3, r3, #3
 8001f4a:	2b03      	cmp	r3, #3
 8001f4c:	d118      	bne.n	8001f80 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001f54:	2201      	movs	r2, #1
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	4013      	ands	r3, r2
 8001f62:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	08db      	lsrs	r3, r3, #3
 8001f6a:	f003 0201 	and.w	r2, r3, #1
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	693a      	ldr	r2, [r7, #16]
 8001f7e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f003 0303 	and.w	r3, r3, #3
 8001f88:	2b03      	cmp	r3, #3
 8001f8a:	d017      	beq.n	8001fbc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	2203      	movs	r2, #3
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	689a      	ldr	r2, [r3, #8]
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	693a      	ldr	r2, [r7, #16]
 8001fba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f003 0303 	and.w	r3, r3, #3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d123      	bne.n	8002010 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	08da      	lsrs	r2, r3, #3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3208      	adds	r2, #8
 8001fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	f003 0307 	and.w	r3, r3, #7
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	220f      	movs	r2, #15
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	691a      	ldr	r2, [r3, #16]
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	08da      	lsrs	r2, r3, #3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	3208      	adds	r2, #8
 800200a:	6939      	ldr	r1, [r7, #16]
 800200c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	2203      	movs	r2, #3
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	4013      	ands	r3, r2
 8002026:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f003 0203 	and.w	r2, r3, #3
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	693a      	ldr	r2, [r7, #16]
 800203a:	4313      	orrs	r3, r2
 800203c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	693a      	ldr	r2, [r7, #16]
 8002042:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800204c:	2b00      	cmp	r3, #0
 800204e:	f000 80ac 	beq.w	80021aa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002052:	4b5f      	ldr	r3, [pc, #380]	@ (80021d0 <HAL_GPIO_Init+0x330>)
 8002054:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002056:	4a5e      	ldr	r2, [pc, #376]	@ (80021d0 <HAL_GPIO_Init+0x330>)
 8002058:	f043 0301 	orr.w	r3, r3, #1
 800205c:	6613      	str	r3, [r2, #96]	@ 0x60
 800205e:	4b5c      	ldr	r3, [pc, #368]	@ (80021d0 <HAL_GPIO_Init+0x330>)
 8002060:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	60bb      	str	r3, [r7, #8]
 8002068:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800206a:	4a5a      	ldr	r2, [pc, #360]	@ (80021d4 <HAL_GPIO_Init+0x334>)
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	089b      	lsrs	r3, r3, #2
 8002070:	3302      	adds	r3, #2
 8002072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002076:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	f003 0303 	and.w	r3, r3, #3
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	220f      	movs	r2, #15
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	43db      	mvns	r3, r3
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	4013      	ands	r3, r2
 800208c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002094:	d025      	beq.n	80020e2 <HAL_GPIO_Init+0x242>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a4f      	ldr	r2, [pc, #316]	@ (80021d8 <HAL_GPIO_Init+0x338>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d01f      	beq.n	80020de <HAL_GPIO_Init+0x23e>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a4e      	ldr	r2, [pc, #312]	@ (80021dc <HAL_GPIO_Init+0x33c>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d019      	beq.n	80020da <HAL_GPIO_Init+0x23a>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a4d      	ldr	r2, [pc, #308]	@ (80021e0 <HAL_GPIO_Init+0x340>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d013      	beq.n	80020d6 <HAL_GPIO_Init+0x236>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a4c      	ldr	r2, [pc, #304]	@ (80021e4 <HAL_GPIO_Init+0x344>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d00d      	beq.n	80020d2 <HAL_GPIO_Init+0x232>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a4b      	ldr	r2, [pc, #300]	@ (80021e8 <HAL_GPIO_Init+0x348>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d007      	beq.n	80020ce <HAL_GPIO_Init+0x22e>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a4a      	ldr	r2, [pc, #296]	@ (80021ec <HAL_GPIO_Init+0x34c>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d101      	bne.n	80020ca <HAL_GPIO_Init+0x22a>
 80020c6:	2306      	movs	r3, #6
 80020c8:	e00c      	b.n	80020e4 <HAL_GPIO_Init+0x244>
 80020ca:	2307      	movs	r3, #7
 80020cc:	e00a      	b.n	80020e4 <HAL_GPIO_Init+0x244>
 80020ce:	2305      	movs	r3, #5
 80020d0:	e008      	b.n	80020e4 <HAL_GPIO_Init+0x244>
 80020d2:	2304      	movs	r3, #4
 80020d4:	e006      	b.n	80020e4 <HAL_GPIO_Init+0x244>
 80020d6:	2303      	movs	r3, #3
 80020d8:	e004      	b.n	80020e4 <HAL_GPIO_Init+0x244>
 80020da:	2302      	movs	r3, #2
 80020dc:	e002      	b.n	80020e4 <HAL_GPIO_Init+0x244>
 80020de:	2301      	movs	r3, #1
 80020e0:	e000      	b.n	80020e4 <HAL_GPIO_Init+0x244>
 80020e2:	2300      	movs	r3, #0
 80020e4:	697a      	ldr	r2, [r7, #20]
 80020e6:	f002 0203 	and.w	r2, r2, #3
 80020ea:	0092      	lsls	r2, r2, #2
 80020ec:	4093      	lsls	r3, r2
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020f4:	4937      	ldr	r1, [pc, #220]	@ (80021d4 <HAL_GPIO_Init+0x334>)
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	089b      	lsrs	r3, r3, #2
 80020fa:	3302      	adds	r3, #2
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002102:	4b3b      	ldr	r3, [pc, #236]	@ (80021f0 <HAL_GPIO_Init+0x350>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	43db      	mvns	r3, r3
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	4013      	ands	r3, r2
 8002110:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d003      	beq.n	8002126 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	4313      	orrs	r3, r2
 8002124:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002126:	4a32      	ldr	r2, [pc, #200]	@ (80021f0 <HAL_GPIO_Init+0x350>)
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800212c:	4b30      	ldr	r3, [pc, #192]	@ (80021f0 <HAL_GPIO_Init+0x350>)
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	43db      	mvns	r3, r3
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	4013      	ands	r3, r2
 800213a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d003      	beq.n	8002150 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002148:	693a      	ldr	r2, [r7, #16]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	4313      	orrs	r3, r2
 800214e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002150:	4a27      	ldr	r2, [pc, #156]	@ (80021f0 <HAL_GPIO_Init+0x350>)
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002156:	4b26      	ldr	r3, [pc, #152]	@ (80021f0 <HAL_GPIO_Init+0x350>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	43db      	mvns	r3, r3
 8002160:	693a      	ldr	r2, [r7, #16]
 8002162:	4013      	ands	r3, r2
 8002164:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	4313      	orrs	r3, r2
 8002178:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800217a:	4a1d      	ldr	r2, [pc, #116]	@ (80021f0 <HAL_GPIO_Init+0x350>)
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002180:	4b1b      	ldr	r3, [pc, #108]	@ (80021f0 <HAL_GPIO_Init+0x350>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	43db      	mvns	r3, r3
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	4013      	ands	r3, r2
 800218e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d003      	beq.n	80021a4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800219c:	693a      	ldr	r2, [r7, #16]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80021a4:	4a12      	ldr	r2, [pc, #72]	@ (80021f0 <HAL_GPIO_Init+0x350>)
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	3301      	adds	r3, #1
 80021ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	fa22 f303 	lsr.w	r3, r2, r3
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	f47f ae78 	bne.w	8001eb0 <HAL_GPIO_Init+0x10>
  }
}
 80021c0:	bf00      	nop
 80021c2:	bf00      	nop
 80021c4:	371c      	adds	r7, #28
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	40021000 	.word	0x40021000
 80021d4:	40010000 	.word	0x40010000
 80021d8:	48000400 	.word	0x48000400
 80021dc:	48000800 	.word	0x48000800
 80021e0:	48000c00 	.word	0x48000c00
 80021e4:	48001000 	.word	0x48001000
 80021e8:	48001400 	.word	0x48001400
 80021ec:	48001800 	.word	0x48001800
 80021f0:	40010400 	.word	0x40010400

080021f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	460b      	mov	r3, r1
 80021fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	691a      	ldr	r2, [r3, #16]
 8002204:	887b      	ldrh	r3, [r7, #2]
 8002206:	4013      	ands	r3, r2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d002      	beq.n	8002212 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800220c:	2301      	movs	r3, #1
 800220e:	73fb      	strb	r3, [r7, #15]
 8002210:	e001      	b.n	8002216 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002212:	2300      	movs	r3, #0
 8002214:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002216:	7bfb      	ldrb	r3, [r7, #15]
}
 8002218:	4618      	mov	r0, r3
 800221a:	3714      	adds	r7, #20
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	460b      	mov	r3, r1
 800222e:	807b      	strh	r3, [r7, #2]
 8002230:	4613      	mov	r3, r2
 8002232:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002234:	787b      	ldrb	r3, [r7, #1]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d003      	beq.n	8002242 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800223a:	887a      	ldrh	r2, [r7, #2]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002240:	e002      	b.n	8002248 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002242:	887a      	ldrh	r2, [r7, #2]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	4603      	mov	r3, r0
 800225c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800225e:	4b08      	ldr	r3, [pc, #32]	@ (8002280 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002260:	695a      	ldr	r2, [r3, #20]
 8002262:	88fb      	ldrh	r3, [r7, #6]
 8002264:	4013      	ands	r3, r2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d006      	beq.n	8002278 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800226a:	4a05      	ldr	r2, [pc, #20]	@ (8002280 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800226c:	88fb      	ldrh	r3, [r7, #6]
 800226e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002270:	88fb      	ldrh	r3, [r7, #6]
 8002272:	4618      	mov	r0, r3
 8002274:	f000 f806 	bl	8002284 <HAL_GPIO_EXTI_Callback>
  }
}
 8002278:	bf00      	nop
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40010400 	.word	0x40010400

08002284 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	4603      	mov	r3, r0
 800228c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800228e:	bf00      	nop
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
	...

0800229c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80022a0:	4b04      	ldr	r3, [pc, #16]	@ (80022b4 <HAL_PWREx_GetVoltageRange+0x18>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	40007000 	.word	0x40007000

080022b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022c6:	d130      	bne.n	800232a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80022c8:	4b23      	ldr	r3, [pc, #140]	@ (8002358 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80022d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022d4:	d038      	beq.n	8002348 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80022d6:	4b20      	ldr	r3, [pc, #128]	@ (8002358 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80022de:	4a1e      	ldr	r2, [pc, #120]	@ (8002358 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022e0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022e4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80022e6:	4b1d      	ldr	r3, [pc, #116]	@ (800235c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2232      	movs	r2, #50	@ 0x32
 80022ec:	fb02 f303 	mul.w	r3, r2, r3
 80022f0:	4a1b      	ldr	r2, [pc, #108]	@ (8002360 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80022f2:	fba2 2303 	umull	r2, r3, r2, r3
 80022f6:	0c9b      	lsrs	r3, r3, #18
 80022f8:	3301      	adds	r3, #1
 80022fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022fc:	e002      	b.n	8002304 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	3b01      	subs	r3, #1
 8002302:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002304:	4b14      	ldr	r3, [pc, #80]	@ (8002358 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002306:	695b      	ldr	r3, [r3, #20]
 8002308:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800230c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002310:	d102      	bne.n	8002318 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d1f2      	bne.n	80022fe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002318:	4b0f      	ldr	r3, [pc, #60]	@ (8002358 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800231a:	695b      	ldr	r3, [r3, #20]
 800231c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002320:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002324:	d110      	bne.n	8002348 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e00f      	b.n	800234a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800232a:	4b0b      	ldr	r3, [pc, #44]	@ (8002358 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002332:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002336:	d007      	beq.n	8002348 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002338:	4b07      	ldr	r3, [pc, #28]	@ (8002358 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002340:	4a05      	ldr	r2, [pc, #20]	@ (8002358 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002342:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002346:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3714      	adds	r7, #20
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	40007000 	.word	0x40007000
 800235c:	20000150 	.word	0x20000150
 8002360:	431bde83 	.word	0x431bde83

08002364 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	4603      	mov	r3, r0
 800236c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameter */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP2);
 800236e:	4b11      	ldr	r3, [pc, #68]	@ (80023b4 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f023 0307 	bic.w	r3, r3, #7
 8002376:	4a0f      	ldr	r2, [pc, #60]	@ (80023b4 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8002378:	f043 0302 	orr.w	r3, r3, #2
 800237c:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800237e:	4b0e      	ldr	r3, [pc, #56]	@ (80023b8 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	4a0d      	ldr	r2, [pc, #52]	@ (80023b8 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8002384:	f043 0304 	orr.w	r3, r3, #4
 8002388:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800238a:	79fb      	ldrb	r3, [r7, #7]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d101      	bne.n	8002394 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002390:	bf30      	wfi
 8002392:	e002      	b.n	800239a <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002394:	bf40      	sev
    __WFE();
 8002396:	bf20      	wfe
    __WFE();
 8002398:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800239a:	4b07      	ldr	r3, [pc, #28]	@ (80023b8 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	4a06      	ldr	r2, [pc, #24]	@ (80023b8 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 80023a0:	f023 0304 	bic.w	r3, r3, #4
 80023a4:	6113      	str	r3, [r2, #16]
}
 80023a6:	bf00      	nop
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	40007000 	.word	0x40007000
 80023b8:	e000ed00 	.word	0xe000ed00

080023bc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b088      	sub	sp, #32
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e3ca      	b.n	8002b64 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023ce:	4b97      	ldr	r3, [pc, #604]	@ (800262c <HAL_RCC_OscConfig+0x270>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f003 030c 	and.w	r3, r3, #12
 80023d6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023d8:	4b94      	ldr	r3, [pc, #592]	@ (800262c <HAL_RCC_OscConfig+0x270>)
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	f003 0303 	and.w	r3, r3, #3
 80023e0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0310 	and.w	r3, r3, #16
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f000 80e4 	beq.w	80025b8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d007      	beq.n	8002406 <HAL_RCC_OscConfig+0x4a>
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	2b0c      	cmp	r3, #12
 80023fa:	f040 808b 	bne.w	8002514 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	2b01      	cmp	r3, #1
 8002402:	f040 8087 	bne.w	8002514 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002406:	4b89      	ldr	r3, [pc, #548]	@ (800262c <HAL_RCC_OscConfig+0x270>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d005      	beq.n	800241e <HAL_RCC_OscConfig+0x62>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e3a2      	b.n	8002b64 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a1a      	ldr	r2, [r3, #32]
 8002422:	4b82      	ldr	r3, [pc, #520]	@ (800262c <HAL_RCC_OscConfig+0x270>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0308 	and.w	r3, r3, #8
 800242a:	2b00      	cmp	r3, #0
 800242c:	d004      	beq.n	8002438 <HAL_RCC_OscConfig+0x7c>
 800242e:	4b7f      	ldr	r3, [pc, #508]	@ (800262c <HAL_RCC_OscConfig+0x270>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002436:	e005      	b.n	8002444 <HAL_RCC_OscConfig+0x88>
 8002438:	4b7c      	ldr	r3, [pc, #496]	@ (800262c <HAL_RCC_OscConfig+0x270>)
 800243a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800243e:	091b      	lsrs	r3, r3, #4
 8002440:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002444:	4293      	cmp	r3, r2
 8002446:	d223      	bcs.n	8002490 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a1b      	ldr	r3, [r3, #32]
 800244c:	4618      	mov	r0, r3
 800244e:	f000 fd1d 	bl	8002e8c <RCC_SetFlashLatencyFromMSIRange>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e383      	b.n	8002b64 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800245c:	4b73      	ldr	r3, [pc, #460]	@ (800262c <HAL_RCC_OscConfig+0x270>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a72      	ldr	r2, [pc, #456]	@ (800262c <HAL_RCC_OscConfig+0x270>)
 8002462:	f043 0308 	orr.w	r3, r3, #8
 8002466:	6013      	str	r3, [r2, #0]
 8002468:	4b70      	ldr	r3, [pc, #448]	@ (800262c <HAL_RCC_OscConfig+0x270>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a1b      	ldr	r3, [r3, #32]
 8002474:	496d      	ldr	r1, [pc, #436]	@ (800262c <HAL_RCC_OscConfig+0x270>)
 8002476:	4313      	orrs	r3, r2
 8002478:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800247a:	4b6c      	ldr	r3, [pc, #432]	@ (800262c <HAL_RCC_OscConfig+0x270>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	69db      	ldr	r3, [r3, #28]
 8002486:	021b      	lsls	r3, r3, #8
 8002488:	4968      	ldr	r1, [pc, #416]	@ (800262c <HAL_RCC_OscConfig+0x270>)
 800248a:	4313      	orrs	r3, r2
 800248c:	604b      	str	r3, [r1, #4]
 800248e:	e025      	b.n	80024dc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002490:	4b66      	ldr	r3, [pc, #408]	@ (800262c <HAL_RCC_OscConfig+0x270>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a65      	ldr	r2, [pc, #404]	@ (800262c <HAL_RCC_OscConfig+0x270>)
 8002496:	f043 0308 	orr.w	r3, r3, #8
 800249a:	6013      	str	r3, [r2, #0]
 800249c:	4b63      	ldr	r3, [pc, #396]	@ (800262c <HAL_RCC_OscConfig+0x270>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a1b      	ldr	r3, [r3, #32]
 80024a8:	4960      	ldr	r1, [pc, #384]	@ (800262c <HAL_RCC_OscConfig+0x270>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024ae:	4b5f      	ldr	r3, [pc, #380]	@ (800262c <HAL_RCC_OscConfig+0x270>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	69db      	ldr	r3, [r3, #28]
 80024ba:	021b      	lsls	r3, r3, #8
 80024bc:	495b      	ldr	r1, [pc, #364]	@ (800262c <HAL_RCC_OscConfig+0x270>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d109      	bne.n	80024dc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a1b      	ldr	r3, [r3, #32]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f000 fcdd 	bl	8002e8c <RCC_SetFlashLatencyFromMSIRange>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e343      	b.n	8002b64 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024dc:	f000 fc4a 	bl	8002d74 <HAL_RCC_GetSysClockFreq>
 80024e0:	4602      	mov	r2, r0
 80024e2:	4b52      	ldr	r3, [pc, #328]	@ (800262c <HAL_RCC_OscConfig+0x270>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	091b      	lsrs	r3, r3, #4
 80024e8:	f003 030f 	and.w	r3, r3, #15
 80024ec:	4950      	ldr	r1, [pc, #320]	@ (8002630 <HAL_RCC_OscConfig+0x274>)
 80024ee:	5ccb      	ldrb	r3, [r1, r3]
 80024f0:	f003 031f 	and.w	r3, r3, #31
 80024f4:	fa22 f303 	lsr.w	r3, r2, r3
 80024f8:	4a4e      	ldr	r2, [pc, #312]	@ (8002634 <HAL_RCC_OscConfig+0x278>)
 80024fa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80024fc:	4b4e      	ldr	r3, [pc, #312]	@ (8002638 <HAL_RCC_OscConfig+0x27c>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4618      	mov	r0, r3
 8002502:	f7ff fb1b 	bl	8001b3c <HAL_InitTick>
 8002506:	4603      	mov	r3, r0
 8002508:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800250a:	7bfb      	ldrb	r3, [r7, #15]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d052      	beq.n	80025b6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002510:	7bfb      	ldrb	r3, [r7, #15]
 8002512:	e327      	b.n	8002b64 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d032      	beq.n	8002582 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800251c:	4b43      	ldr	r3, [pc, #268]	@ (800262c <HAL_RCC_OscConfig+0x270>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a42      	ldr	r2, [pc, #264]	@ (800262c <HAL_RCC_OscConfig+0x270>)
 8002522:	f043 0301 	orr.w	r3, r3, #1
 8002526:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002528:	f7ff fb58 	bl	8001bdc <HAL_GetTick>
 800252c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800252e:	e008      	b.n	8002542 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002530:	f7ff fb54 	bl	8001bdc <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b02      	cmp	r3, #2
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e310      	b.n	8002b64 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002542:	4b3a      	ldr	r3, [pc, #232]	@ (800262c <HAL_RCC_OscConfig+0x270>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d0f0      	beq.n	8002530 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800254e:	4b37      	ldr	r3, [pc, #220]	@ (800262c <HAL_RCC_OscConfig+0x270>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a36      	ldr	r2, [pc, #216]	@ (800262c <HAL_RCC_OscConfig+0x270>)
 8002554:	f043 0308 	orr.w	r3, r3, #8
 8002558:	6013      	str	r3, [r2, #0]
 800255a:	4b34      	ldr	r3, [pc, #208]	@ (800262c <HAL_RCC_OscConfig+0x270>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a1b      	ldr	r3, [r3, #32]
 8002566:	4931      	ldr	r1, [pc, #196]	@ (800262c <HAL_RCC_OscConfig+0x270>)
 8002568:	4313      	orrs	r3, r2
 800256a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800256c:	4b2f      	ldr	r3, [pc, #188]	@ (800262c <HAL_RCC_OscConfig+0x270>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	69db      	ldr	r3, [r3, #28]
 8002578:	021b      	lsls	r3, r3, #8
 800257a:	492c      	ldr	r1, [pc, #176]	@ (800262c <HAL_RCC_OscConfig+0x270>)
 800257c:	4313      	orrs	r3, r2
 800257e:	604b      	str	r3, [r1, #4]
 8002580:	e01a      	b.n	80025b8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002582:	4b2a      	ldr	r3, [pc, #168]	@ (800262c <HAL_RCC_OscConfig+0x270>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a29      	ldr	r2, [pc, #164]	@ (800262c <HAL_RCC_OscConfig+0x270>)
 8002588:	f023 0301 	bic.w	r3, r3, #1
 800258c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800258e:	f7ff fb25 	bl	8001bdc <HAL_GetTick>
 8002592:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002594:	e008      	b.n	80025a8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002596:	f7ff fb21 	bl	8001bdc <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e2dd      	b.n	8002b64 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025a8:	4b20      	ldr	r3, [pc, #128]	@ (800262c <HAL_RCC_OscConfig+0x270>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d1f0      	bne.n	8002596 <HAL_RCC_OscConfig+0x1da>
 80025b4:	e000      	b.n	80025b8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025b6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d074      	beq.n	80026ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	2b08      	cmp	r3, #8
 80025c8:	d005      	beq.n	80025d6 <HAL_RCC_OscConfig+0x21a>
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	2b0c      	cmp	r3, #12
 80025ce:	d10e      	bne.n	80025ee <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	2b03      	cmp	r3, #3
 80025d4:	d10b      	bne.n	80025ee <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d6:	4b15      	ldr	r3, [pc, #84]	@ (800262c <HAL_RCC_OscConfig+0x270>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d064      	beq.n	80026ac <HAL_RCC_OscConfig+0x2f0>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d160      	bne.n	80026ac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e2ba      	b.n	8002b64 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025f6:	d106      	bne.n	8002606 <HAL_RCC_OscConfig+0x24a>
 80025f8:	4b0c      	ldr	r3, [pc, #48]	@ (800262c <HAL_RCC_OscConfig+0x270>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a0b      	ldr	r2, [pc, #44]	@ (800262c <HAL_RCC_OscConfig+0x270>)
 80025fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002602:	6013      	str	r3, [r2, #0]
 8002604:	e026      	b.n	8002654 <HAL_RCC_OscConfig+0x298>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800260e:	d115      	bne.n	800263c <HAL_RCC_OscConfig+0x280>
 8002610:	4b06      	ldr	r3, [pc, #24]	@ (800262c <HAL_RCC_OscConfig+0x270>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a05      	ldr	r2, [pc, #20]	@ (800262c <HAL_RCC_OscConfig+0x270>)
 8002616:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800261a:	6013      	str	r3, [r2, #0]
 800261c:	4b03      	ldr	r3, [pc, #12]	@ (800262c <HAL_RCC_OscConfig+0x270>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a02      	ldr	r2, [pc, #8]	@ (800262c <HAL_RCC_OscConfig+0x270>)
 8002622:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002626:	6013      	str	r3, [r2, #0]
 8002628:	e014      	b.n	8002654 <HAL_RCC_OscConfig+0x298>
 800262a:	bf00      	nop
 800262c:	40021000 	.word	0x40021000
 8002630:	08004ed4 	.word	0x08004ed4
 8002634:	20000150 	.word	0x20000150
 8002638:	20000154 	.word	0x20000154
 800263c:	4ba0      	ldr	r3, [pc, #640]	@ (80028c0 <HAL_RCC_OscConfig+0x504>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a9f      	ldr	r2, [pc, #636]	@ (80028c0 <HAL_RCC_OscConfig+0x504>)
 8002642:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002646:	6013      	str	r3, [r2, #0]
 8002648:	4b9d      	ldr	r3, [pc, #628]	@ (80028c0 <HAL_RCC_OscConfig+0x504>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a9c      	ldr	r2, [pc, #624]	@ (80028c0 <HAL_RCC_OscConfig+0x504>)
 800264e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002652:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d013      	beq.n	8002684 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800265c:	f7ff fabe 	bl	8001bdc <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002664:	f7ff faba 	bl	8001bdc <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b64      	cmp	r3, #100	@ 0x64
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e276      	b.n	8002b64 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002676:	4b92      	ldr	r3, [pc, #584]	@ (80028c0 <HAL_RCC_OscConfig+0x504>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d0f0      	beq.n	8002664 <HAL_RCC_OscConfig+0x2a8>
 8002682:	e014      	b.n	80026ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002684:	f7ff faaa 	bl	8001bdc <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800268c:	f7ff faa6 	bl	8001bdc <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b64      	cmp	r3, #100	@ 0x64
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e262      	b.n	8002b64 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800269e:	4b88      	ldr	r3, [pc, #544]	@ (80028c0 <HAL_RCC_OscConfig+0x504>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1f0      	bne.n	800268c <HAL_RCC_OscConfig+0x2d0>
 80026aa:	e000      	b.n	80026ae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d060      	beq.n	800277c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	2b04      	cmp	r3, #4
 80026be:	d005      	beq.n	80026cc <HAL_RCC_OscConfig+0x310>
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	2b0c      	cmp	r3, #12
 80026c4:	d119      	bne.n	80026fa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d116      	bne.n	80026fa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026cc:	4b7c      	ldr	r3, [pc, #496]	@ (80028c0 <HAL_RCC_OscConfig+0x504>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d005      	beq.n	80026e4 <HAL_RCC_OscConfig+0x328>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d101      	bne.n	80026e4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e23f      	b.n	8002b64 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026e4:	4b76      	ldr	r3, [pc, #472]	@ (80028c0 <HAL_RCC_OscConfig+0x504>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	691b      	ldr	r3, [r3, #16]
 80026f0:	061b      	lsls	r3, r3, #24
 80026f2:	4973      	ldr	r1, [pc, #460]	@ (80028c0 <HAL_RCC_OscConfig+0x504>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026f8:	e040      	b.n	800277c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d023      	beq.n	800274a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002702:	4b6f      	ldr	r3, [pc, #444]	@ (80028c0 <HAL_RCC_OscConfig+0x504>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a6e      	ldr	r2, [pc, #440]	@ (80028c0 <HAL_RCC_OscConfig+0x504>)
 8002708:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800270c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800270e:	f7ff fa65 	bl	8001bdc <HAL_GetTick>
 8002712:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002714:	e008      	b.n	8002728 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002716:	f7ff fa61 	bl	8001bdc <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d901      	bls.n	8002728 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e21d      	b.n	8002b64 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002728:	4b65      	ldr	r3, [pc, #404]	@ (80028c0 <HAL_RCC_OscConfig+0x504>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002730:	2b00      	cmp	r3, #0
 8002732:	d0f0      	beq.n	8002716 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002734:	4b62      	ldr	r3, [pc, #392]	@ (80028c0 <HAL_RCC_OscConfig+0x504>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	061b      	lsls	r3, r3, #24
 8002742:	495f      	ldr	r1, [pc, #380]	@ (80028c0 <HAL_RCC_OscConfig+0x504>)
 8002744:	4313      	orrs	r3, r2
 8002746:	604b      	str	r3, [r1, #4]
 8002748:	e018      	b.n	800277c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800274a:	4b5d      	ldr	r3, [pc, #372]	@ (80028c0 <HAL_RCC_OscConfig+0x504>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a5c      	ldr	r2, [pc, #368]	@ (80028c0 <HAL_RCC_OscConfig+0x504>)
 8002750:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002754:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002756:	f7ff fa41 	bl	8001bdc <HAL_GetTick>
 800275a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800275c:	e008      	b.n	8002770 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800275e:	f7ff fa3d 	bl	8001bdc <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d901      	bls.n	8002770 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e1f9      	b.n	8002b64 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002770:	4b53      	ldr	r3, [pc, #332]	@ (80028c0 <HAL_RCC_OscConfig+0x504>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1f0      	bne.n	800275e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0308 	and.w	r3, r3, #8
 8002784:	2b00      	cmp	r3, #0
 8002786:	d03c      	beq.n	8002802 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	695b      	ldr	r3, [r3, #20]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d01c      	beq.n	80027ca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002790:	4b4b      	ldr	r3, [pc, #300]	@ (80028c0 <HAL_RCC_OscConfig+0x504>)
 8002792:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002796:	4a4a      	ldr	r2, [pc, #296]	@ (80028c0 <HAL_RCC_OscConfig+0x504>)
 8002798:	f043 0301 	orr.w	r3, r3, #1
 800279c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a0:	f7ff fa1c 	bl	8001bdc <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027a8:	f7ff fa18 	bl	8001bdc <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e1d4      	b.n	8002b64 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027ba:	4b41      	ldr	r3, [pc, #260]	@ (80028c0 <HAL_RCC_OscConfig+0x504>)
 80027bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027c0:	f003 0302 	and.w	r3, r3, #2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d0ef      	beq.n	80027a8 <HAL_RCC_OscConfig+0x3ec>
 80027c8:	e01b      	b.n	8002802 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027ca:	4b3d      	ldr	r3, [pc, #244]	@ (80028c0 <HAL_RCC_OscConfig+0x504>)
 80027cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027d0:	4a3b      	ldr	r2, [pc, #236]	@ (80028c0 <HAL_RCC_OscConfig+0x504>)
 80027d2:	f023 0301 	bic.w	r3, r3, #1
 80027d6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027da:	f7ff f9ff 	bl	8001bdc <HAL_GetTick>
 80027de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027e0:	e008      	b.n	80027f4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027e2:	f7ff f9fb 	bl	8001bdc <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d901      	bls.n	80027f4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e1b7      	b.n	8002b64 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027f4:	4b32      	ldr	r3, [pc, #200]	@ (80028c0 <HAL_RCC_OscConfig+0x504>)
 80027f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1ef      	bne.n	80027e2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0304 	and.w	r3, r3, #4
 800280a:	2b00      	cmp	r3, #0
 800280c:	f000 80a6 	beq.w	800295c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002810:	2300      	movs	r3, #0
 8002812:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002814:	4b2a      	ldr	r3, [pc, #168]	@ (80028c0 <HAL_RCC_OscConfig+0x504>)
 8002816:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002818:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d10d      	bne.n	800283c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002820:	4b27      	ldr	r3, [pc, #156]	@ (80028c0 <HAL_RCC_OscConfig+0x504>)
 8002822:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002824:	4a26      	ldr	r2, [pc, #152]	@ (80028c0 <HAL_RCC_OscConfig+0x504>)
 8002826:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800282a:	6593      	str	r3, [r2, #88]	@ 0x58
 800282c:	4b24      	ldr	r3, [pc, #144]	@ (80028c0 <HAL_RCC_OscConfig+0x504>)
 800282e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002830:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002834:	60bb      	str	r3, [r7, #8]
 8002836:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002838:	2301      	movs	r3, #1
 800283a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800283c:	4b21      	ldr	r3, [pc, #132]	@ (80028c4 <HAL_RCC_OscConfig+0x508>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002844:	2b00      	cmp	r3, #0
 8002846:	d118      	bne.n	800287a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002848:	4b1e      	ldr	r3, [pc, #120]	@ (80028c4 <HAL_RCC_OscConfig+0x508>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a1d      	ldr	r2, [pc, #116]	@ (80028c4 <HAL_RCC_OscConfig+0x508>)
 800284e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002852:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002854:	f7ff f9c2 	bl	8001bdc <HAL_GetTick>
 8002858:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800285a:	e008      	b.n	800286e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800285c:	f7ff f9be 	bl	8001bdc <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e17a      	b.n	8002b64 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800286e:	4b15      	ldr	r3, [pc, #84]	@ (80028c4 <HAL_RCC_OscConfig+0x508>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002876:	2b00      	cmp	r3, #0
 8002878:	d0f0      	beq.n	800285c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d108      	bne.n	8002894 <HAL_RCC_OscConfig+0x4d8>
 8002882:	4b0f      	ldr	r3, [pc, #60]	@ (80028c0 <HAL_RCC_OscConfig+0x504>)
 8002884:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002888:	4a0d      	ldr	r2, [pc, #52]	@ (80028c0 <HAL_RCC_OscConfig+0x504>)
 800288a:	f043 0301 	orr.w	r3, r3, #1
 800288e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002892:	e029      	b.n	80028e8 <HAL_RCC_OscConfig+0x52c>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	2b05      	cmp	r3, #5
 800289a:	d115      	bne.n	80028c8 <HAL_RCC_OscConfig+0x50c>
 800289c:	4b08      	ldr	r3, [pc, #32]	@ (80028c0 <HAL_RCC_OscConfig+0x504>)
 800289e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028a2:	4a07      	ldr	r2, [pc, #28]	@ (80028c0 <HAL_RCC_OscConfig+0x504>)
 80028a4:	f043 0304 	orr.w	r3, r3, #4
 80028a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80028ac:	4b04      	ldr	r3, [pc, #16]	@ (80028c0 <HAL_RCC_OscConfig+0x504>)
 80028ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028b2:	4a03      	ldr	r2, [pc, #12]	@ (80028c0 <HAL_RCC_OscConfig+0x504>)
 80028b4:	f043 0301 	orr.w	r3, r3, #1
 80028b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80028bc:	e014      	b.n	80028e8 <HAL_RCC_OscConfig+0x52c>
 80028be:	bf00      	nop
 80028c0:	40021000 	.word	0x40021000
 80028c4:	40007000 	.word	0x40007000
 80028c8:	4b9c      	ldr	r3, [pc, #624]	@ (8002b3c <HAL_RCC_OscConfig+0x780>)
 80028ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028ce:	4a9b      	ldr	r2, [pc, #620]	@ (8002b3c <HAL_RCC_OscConfig+0x780>)
 80028d0:	f023 0301 	bic.w	r3, r3, #1
 80028d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80028d8:	4b98      	ldr	r3, [pc, #608]	@ (8002b3c <HAL_RCC_OscConfig+0x780>)
 80028da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028de:	4a97      	ldr	r2, [pc, #604]	@ (8002b3c <HAL_RCC_OscConfig+0x780>)
 80028e0:	f023 0304 	bic.w	r3, r3, #4
 80028e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d016      	beq.n	800291e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f0:	f7ff f974 	bl	8001bdc <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028f6:	e00a      	b.n	800290e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028f8:	f7ff f970 	bl	8001bdc <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002906:	4293      	cmp	r3, r2
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e12a      	b.n	8002b64 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800290e:	4b8b      	ldr	r3, [pc, #556]	@ (8002b3c <HAL_RCC_OscConfig+0x780>)
 8002910:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	2b00      	cmp	r3, #0
 800291a:	d0ed      	beq.n	80028f8 <HAL_RCC_OscConfig+0x53c>
 800291c:	e015      	b.n	800294a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800291e:	f7ff f95d 	bl	8001bdc <HAL_GetTick>
 8002922:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002924:	e00a      	b.n	800293c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002926:	f7ff f959 	bl	8001bdc <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002934:	4293      	cmp	r3, r2
 8002936:	d901      	bls.n	800293c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e113      	b.n	8002b64 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800293c:	4b7f      	ldr	r3, [pc, #508]	@ (8002b3c <HAL_RCC_OscConfig+0x780>)
 800293e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1ed      	bne.n	8002926 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800294a:	7ffb      	ldrb	r3, [r7, #31]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d105      	bne.n	800295c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002950:	4b7a      	ldr	r3, [pc, #488]	@ (8002b3c <HAL_RCC_OscConfig+0x780>)
 8002952:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002954:	4a79      	ldr	r2, [pc, #484]	@ (8002b3c <HAL_RCC_OscConfig+0x780>)
 8002956:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800295a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002960:	2b00      	cmp	r3, #0
 8002962:	f000 80fe 	beq.w	8002b62 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800296a:	2b02      	cmp	r3, #2
 800296c:	f040 80d0 	bne.w	8002b10 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002970:	4b72      	ldr	r3, [pc, #456]	@ (8002b3c <HAL_RCC_OscConfig+0x780>)
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	f003 0203 	and.w	r2, r3, #3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002980:	429a      	cmp	r2, r3
 8002982:	d130      	bne.n	80029e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298e:	3b01      	subs	r3, #1
 8002990:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002992:	429a      	cmp	r2, r3
 8002994:	d127      	bne.n	80029e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029a0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d11f      	bne.n	80029e6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80029b0:	2a07      	cmp	r2, #7
 80029b2:	bf14      	ite	ne
 80029b4:	2201      	movne	r2, #1
 80029b6:	2200      	moveq	r2, #0
 80029b8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d113      	bne.n	80029e6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029c8:	085b      	lsrs	r3, r3, #1
 80029ca:	3b01      	subs	r3, #1
 80029cc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d109      	bne.n	80029e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029dc:	085b      	lsrs	r3, r3, #1
 80029de:	3b01      	subs	r3, #1
 80029e0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d06e      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	2b0c      	cmp	r3, #12
 80029ea:	d069      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80029ec:	4b53      	ldr	r3, [pc, #332]	@ (8002b3c <HAL_RCC_OscConfig+0x780>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d105      	bne.n	8002a04 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80029f8:	4b50      	ldr	r3, [pc, #320]	@ (8002b3c <HAL_RCC_OscConfig+0x780>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e0ad      	b.n	8002b64 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002a08:	4b4c      	ldr	r3, [pc, #304]	@ (8002b3c <HAL_RCC_OscConfig+0x780>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a4b      	ldr	r2, [pc, #300]	@ (8002b3c <HAL_RCC_OscConfig+0x780>)
 8002a0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a12:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a14:	f7ff f8e2 	bl	8001bdc <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a1c:	f7ff f8de 	bl	8001bdc <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e09a      	b.n	8002b64 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a2e:	4b43      	ldr	r3, [pc, #268]	@ (8002b3c <HAL_RCC_OscConfig+0x780>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1f0      	bne.n	8002a1c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a3a:	4b40      	ldr	r3, [pc, #256]	@ (8002b3c <HAL_RCC_OscConfig+0x780>)
 8002a3c:	68da      	ldr	r2, [r3, #12]
 8002a3e:	4b40      	ldr	r3, [pc, #256]	@ (8002b40 <HAL_RCC_OscConfig+0x784>)
 8002a40:	4013      	ands	r3, r2
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002a4a:	3a01      	subs	r2, #1
 8002a4c:	0112      	lsls	r2, r2, #4
 8002a4e:	4311      	orrs	r1, r2
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002a54:	0212      	lsls	r2, r2, #8
 8002a56:	4311      	orrs	r1, r2
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002a5c:	0852      	lsrs	r2, r2, #1
 8002a5e:	3a01      	subs	r2, #1
 8002a60:	0552      	lsls	r2, r2, #21
 8002a62:	4311      	orrs	r1, r2
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002a68:	0852      	lsrs	r2, r2, #1
 8002a6a:	3a01      	subs	r2, #1
 8002a6c:	0652      	lsls	r2, r2, #25
 8002a6e:	4311      	orrs	r1, r2
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002a74:	0912      	lsrs	r2, r2, #4
 8002a76:	0452      	lsls	r2, r2, #17
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	4930      	ldr	r1, [pc, #192]	@ (8002b3c <HAL_RCC_OscConfig+0x780>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a80:	4b2e      	ldr	r3, [pc, #184]	@ (8002b3c <HAL_RCC_OscConfig+0x780>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a2d      	ldr	r2, [pc, #180]	@ (8002b3c <HAL_RCC_OscConfig+0x780>)
 8002a86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a8a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a8c:	4b2b      	ldr	r3, [pc, #172]	@ (8002b3c <HAL_RCC_OscConfig+0x780>)
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	4a2a      	ldr	r2, [pc, #168]	@ (8002b3c <HAL_RCC_OscConfig+0x780>)
 8002a92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a96:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a98:	f7ff f8a0 	bl	8001bdc <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aa0:	f7ff f89c 	bl	8001bdc <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e058      	b.n	8002b64 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ab2:	4b22      	ldr	r3, [pc, #136]	@ (8002b3c <HAL_RCC_OscConfig+0x780>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d0f0      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002abe:	e050      	b.n	8002b62 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e04f      	b.n	8002b64 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ac4:	4b1d      	ldr	r3, [pc, #116]	@ (8002b3c <HAL_RCC_OscConfig+0x780>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d148      	bne.n	8002b62 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002ad0:	4b1a      	ldr	r3, [pc, #104]	@ (8002b3c <HAL_RCC_OscConfig+0x780>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a19      	ldr	r2, [pc, #100]	@ (8002b3c <HAL_RCC_OscConfig+0x780>)
 8002ad6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ada:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002adc:	4b17      	ldr	r3, [pc, #92]	@ (8002b3c <HAL_RCC_OscConfig+0x780>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	4a16      	ldr	r2, [pc, #88]	@ (8002b3c <HAL_RCC_OscConfig+0x780>)
 8002ae2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ae6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ae8:	f7ff f878 	bl	8001bdc <HAL_GetTick>
 8002aec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aee:	e008      	b.n	8002b02 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002af0:	f7ff f874 	bl	8001bdc <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e030      	b.n	8002b64 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b02:	4b0e      	ldr	r3, [pc, #56]	@ (8002b3c <HAL_RCC_OscConfig+0x780>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d0f0      	beq.n	8002af0 <HAL_RCC_OscConfig+0x734>
 8002b0e:	e028      	b.n	8002b62 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	2b0c      	cmp	r3, #12
 8002b14:	d023      	beq.n	8002b5e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b16:	4b09      	ldr	r3, [pc, #36]	@ (8002b3c <HAL_RCC_OscConfig+0x780>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a08      	ldr	r2, [pc, #32]	@ (8002b3c <HAL_RCC_OscConfig+0x780>)
 8002b1c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b22:	f7ff f85b 	bl	8001bdc <HAL_GetTick>
 8002b26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b28:	e00c      	b.n	8002b44 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b2a:	f7ff f857 	bl	8001bdc <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d905      	bls.n	8002b44 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e013      	b.n	8002b64 <HAL_RCC_OscConfig+0x7a8>
 8002b3c:	40021000 	.word	0x40021000
 8002b40:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b44:	4b09      	ldr	r3, [pc, #36]	@ (8002b6c <HAL_RCC_OscConfig+0x7b0>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d1ec      	bne.n	8002b2a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002b50:	4b06      	ldr	r3, [pc, #24]	@ (8002b6c <HAL_RCC_OscConfig+0x7b0>)
 8002b52:	68da      	ldr	r2, [r3, #12]
 8002b54:	4905      	ldr	r1, [pc, #20]	@ (8002b6c <HAL_RCC_OscConfig+0x7b0>)
 8002b56:	4b06      	ldr	r3, [pc, #24]	@ (8002b70 <HAL_RCC_OscConfig+0x7b4>)
 8002b58:	4013      	ands	r3, r2
 8002b5a:	60cb      	str	r3, [r1, #12]
 8002b5c:	e001      	b.n	8002b62 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e000      	b.n	8002b64 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3720      	adds	r7, #32
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	feeefffc 	.word	0xfeeefffc

08002b74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d101      	bne.n	8002b88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e0e7      	b.n	8002d58 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b88:	4b75      	ldr	r3, [pc, #468]	@ (8002d60 <HAL_RCC_ClockConfig+0x1ec>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0307 	and.w	r3, r3, #7
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d910      	bls.n	8002bb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b96:	4b72      	ldr	r3, [pc, #456]	@ (8002d60 <HAL_RCC_ClockConfig+0x1ec>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f023 0207 	bic.w	r2, r3, #7
 8002b9e:	4970      	ldr	r1, [pc, #448]	@ (8002d60 <HAL_RCC_ClockConfig+0x1ec>)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ba6:	4b6e      	ldr	r3, [pc, #440]	@ (8002d60 <HAL_RCC_ClockConfig+0x1ec>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0307 	and.w	r3, r3, #7
 8002bae:	683a      	ldr	r2, [r7, #0]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d001      	beq.n	8002bb8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e0cf      	b.n	8002d58 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d010      	beq.n	8002be6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689a      	ldr	r2, [r3, #8]
 8002bc8:	4b66      	ldr	r3, [pc, #408]	@ (8002d64 <HAL_RCC_ClockConfig+0x1f0>)
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d908      	bls.n	8002be6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bd4:	4b63      	ldr	r3, [pc, #396]	@ (8002d64 <HAL_RCC_ClockConfig+0x1f0>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	4960      	ldr	r1, [pc, #384]	@ (8002d64 <HAL_RCC_ClockConfig+0x1f0>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d04c      	beq.n	8002c8c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	2b03      	cmp	r3, #3
 8002bf8:	d107      	bne.n	8002c0a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bfa:	4b5a      	ldr	r3, [pc, #360]	@ (8002d64 <HAL_RCC_ClockConfig+0x1f0>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d121      	bne.n	8002c4a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e0a6      	b.n	8002d58 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d107      	bne.n	8002c22 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c12:	4b54      	ldr	r3, [pc, #336]	@ (8002d64 <HAL_RCC_ClockConfig+0x1f0>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d115      	bne.n	8002c4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e09a      	b.n	8002d58 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d107      	bne.n	8002c3a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c2a:	4b4e      	ldr	r3, [pc, #312]	@ (8002d64 <HAL_RCC_ClockConfig+0x1f0>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d109      	bne.n	8002c4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e08e      	b.n	8002d58 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c3a:	4b4a      	ldr	r3, [pc, #296]	@ (8002d64 <HAL_RCC_ClockConfig+0x1f0>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e086      	b.n	8002d58 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c4a:	4b46      	ldr	r3, [pc, #280]	@ (8002d64 <HAL_RCC_ClockConfig+0x1f0>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f023 0203 	bic.w	r2, r3, #3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	4943      	ldr	r1, [pc, #268]	@ (8002d64 <HAL_RCC_ClockConfig+0x1f0>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c5c:	f7fe ffbe 	bl	8001bdc <HAL_GetTick>
 8002c60:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c62:	e00a      	b.n	8002c7a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c64:	f7fe ffba 	bl	8001bdc <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e06e      	b.n	8002d58 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c7a:	4b3a      	ldr	r3, [pc, #232]	@ (8002d64 <HAL_RCC_ClockConfig+0x1f0>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f003 020c 	and.w	r2, r3, #12
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d1eb      	bne.n	8002c64 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d010      	beq.n	8002cba <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	4b31      	ldr	r3, [pc, #196]	@ (8002d64 <HAL_RCC_ClockConfig+0x1f0>)
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d208      	bcs.n	8002cba <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ca8:	4b2e      	ldr	r3, [pc, #184]	@ (8002d64 <HAL_RCC_ClockConfig+0x1f0>)
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	492b      	ldr	r1, [pc, #172]	@ (8002d64 <HAL_RCC_ClockConfig+0x1f0>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cba:	4b29      	ldr	r3, [pc, #164]	@ (8002d60 <HAL_RCC_ClockConfig+0x1ec>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0307 	and.w	r3, r3, #7
 8002cc2:	683a      	ldr	r2, [r7, #0]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d210      	bcs.n	8002cea <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cc8:	4b25      	ldr	r3, [pc, #148]	@ (8002d60 <HAL_RCC_ClockConfig+0x1ec>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f023 0207 	bic.w	r2, r3, #7
 8002cd0:	4923      	ldr	r1, [pc, #140]	@ (8002d60 <HAL_RCC_ClockConfig+0x1ec>)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cd8:	4b21      	ldr	r3, [pc, #132]	@ (8002d60 <HAL_RCC_ClockConfig+0x1ec>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0307 	and.w	r3, r3, #7
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d001      	beq.n	8002cea <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e036      	b.n	8002d58 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0304 	and.w	r3, r3, #4
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d008      	beq.n	8002d08 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cf6:	4b1b      	ldr	r3, [pc, #108]	@ (8002d64 <HAL_RCC_ClockConfig+0x1f0>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	4918      	ldr	r1, [pc, #96]	@ (8002d64 <HAL_RCC_ClockConfig+0x1f0>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0308 	and.w	r3, r3, #8
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d009      	beq.n	8002d28 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d14:	4b13      	ldr	r3, [pc, #76]	@ (8002d64 <HAL_RCC_ClockConfig+0x1f0>)
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	00db      	lsls	r3, r3, #3
 8002d22:	4910      	ldr	r1, [pc, #64]	@ (8002d64 <HAL_RCC_ClockConfig+0x1f0>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d28:	f000 f824 	bl	8002d74 <HAL_RCC_GetSysClockFreq>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8002d64 <HAL_RCC_ClockConfig+0x1f0>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	091b      	lsrs	r3, r3, #4
 8002d34:	f003 030f 	and.w	r3, r3, #15
 8002d38:	490b      	ldr	r1, [pc, #44]	@ (8002d68 <HAL_RCC_ClockConfig+0x1f4>)
 8002d3a:	5ccb      	ldrb	r3, [r1, r3]
 8002d3c:	f003 031f 	and.w	r3, r3, #31
 8002d40:	fa22 f303 	lsr.w	r3, r2, r3
 8002d44:	4a09      	ldr	r2, [pc, #36]	@ (8002d6c <HAL_RCC_ClockConfig+0x1f8>)
 8002d46:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d48:	4b09      	ldr	r3, [pc, #36]	@ (8002d70 <HAL_RCC_ClockConfig+0x1fc>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7fe fef5 	bl	8001b3c <HAL_InitTick>
 8002d52:	4603      	mov	r3, r0
 8002d54:	72fb      	strb	r3, [r7, #11]

  return status;
 8002d56:	7afb      	ldrb	r3, [r7, #11]
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3710      	adds	r7, #16
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	40022000 	.word	0x40022000
 8002d64:	40021000 	.word	0x40021000
 8002d68:	08004ed4 	.word	0x08004ed4
 8002d6c:	20000150 	.word	0x20000150
 8002d70:	20000154 	.word	0x20000154

08002d74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b089      	sub	sp, #36	@ 0x24
 8002d78:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	61fb      	str	r3, [r7, #28]
 8002d7e:	2300      	movs	r3, #0
 8002d80:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d82:	4b3e      	ldr	r3, [pc, #248]	@ (8002e7c <HAL_RCC_GetSysClockFreq+0x108>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f003 030c 	and.w	r3, r3, #12
 8002d8a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d8c:	4b3b      	ldr	r3, [pc, #236]	@ (8002e7c <HAL_RCC_GetSysClockFreq+0x108>)
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	f003 0303 	and.w	r3, r3, #3
 8002d94:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d005      	beq.n	8002da8 <HAL_RCC_GetSysClockFreq+0x34>
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	2b0c      	cmp	r3, #12
 8002da0:	d121      	bne.n	8002de6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d11e      	bne.n	8002de6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002da8:	4b34      	ldr	r3, [pc, #208]	@ (8002e7c <HAL_RCC_GetSysClockFreq+0x108>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0308 	and.w	r3, r3, #8
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d107      	bne.n	8002dc4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002db4:	4b31      	ldr	r3, [pc, #196]	@ (8002e7c <HAL_RCC_GetSysClockFreq+0x108>)
 8002db6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dba:	0a1b      	lsrs	r3, r3, #8
 8002dbc:	f003 030f 	and.w	r3, r3, #15
 8002dc0:	61fb      	str	r3, [r7, #28]
 8002dc2:	e005      	b.n	8002dd0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002dc4:	4b2d      	ldr	r3, [pc, #180]	@ (8002e7c <HAL_RCC_GetSysClockFreq+0x108>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	091b      	lsrs	r3, r3, #4
 8002dca:	f003 030f 	and.w	r3, r3, #15
 8002dce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002dd0:	4a2b      	ldr	r2, [pc, #172]	@ (8002e80 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dd8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d10d      	bne.n	8002dfc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002de4:	e00a      	b.n	8002dfc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	2b04      	cmp	r3, #4
 8002dea:	d102      	bne.n	8002df2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002dec:	4b25      	ldr	r3, [pc, #148]	@ (8002e84 <HAL_RCC_GetSysClockFreq+0x110>)
 8002dee:	61bb      	str	r3, [r7, #24]
 8002df0:	e004      	b.n	8002dfc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	2b08      	cmp	r3, #8
 8002df6:	d101      	bne.n	8002dfc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002df8:	4b23      	ldr	r3, [pc, #140]	@ (8002e88 <HAL_RCC_GetSysClockFreq+0x114>)
 8002dfa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	2b0c      	cmp	r3, #12
 8002e00:	d134      	bne.n	8002e6c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e02:	4b1e      	ldr	r3, [pc, #120]	@ (8002e7c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	f003 0303 	and.w	r3, r3, #3
 8002e0a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d003      	beq.n	8002e1a <HAL_RCC_GetSysClockFreq+0xa6>
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	2b03      	cmp	r3, #3
 8002e16:	d003      	beq.n	8002e20 <HAL_RCC_GetSysClockFreq+0xac>
 8002e18:	e005      	b.n	8002e26 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002e1a:	4b1a      	ldr	r3, [pc, #104]	@ (8002e84 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e1c:	617b      	str	r3, [r7, #20]
      break;
 8002e1e:	e005      	b.n	8002e2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002e20:	4b19      	ldr	r3, [pc, #100]	@ (8002e88 <HAL_RCC_GetSysClockFreq+0x114>)
 8002e22:	617b      	str	r3, [r7, #20]
      break;
 8002e24:	e002      	b.n	8002e2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	617b      	str	r3, [r7, #20]
      break;
 8002e2a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e2c:	4b13      	ldr	r3, [pc, #76]	@ (8002e7c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	091b      	lsrs	r3, r3, #4
 8002e32:	f003 0307 	and.w	r3, r3, #7
 8002e36:	3301      	adds	r3, #1
 8002e38:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e3a:	4b10      	ldr	r3, [pc, #64]	@ (8002e7c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	0a1b      	lsrs	r3, r3, #8
 8002e40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e44:	697a      	ldr	r2, [r7, #20]
 8002e46:	fb03 f202 	mul.w	r2, r3, r2
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e50:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e52:	4b0a      	ldr	r3, [pc, #40]	@ (8002e7c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	0e5b      	lsrs	r3, r3, #25
 8002e58:	f003 0303 	and.w	r3, r3, #3
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	005b      	lsls	r3, r3, #1
 8002e60:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e6a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002e6c:	69bb      	ldr	r3, [r7, #24]
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3724      	adds	r7, #36	@ 0x24
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	40021000 	.word	0x40021000
 8002e80:	08004ee4 	.word	0x08004ee4
 8002e84:	00f42400 	.word	0x00f42400
 8002e88:	007a1200 	.word	0x007a1200

08002e8c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002e94:	2300      	movs	r3, #0
 8002e96:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002e98:	4b2a      	ldr	r3, [pc, #168]	@ (8002f44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d003      	beq.n	8002eac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002ea4:	f7ff f9fa 	bl	800229c <HAL_PWREx_GetVoltageRange>
 8002ea8:	6178      	str	r0, [r7, #20]
 8002eaa:	e014      	b.n	8002ed6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002eac:	4b25      	ldr	r3, [pc, #148]	@ (8002f44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eb0:	4a24      	ldr	r2, [pc, #144]	@ (8002f44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002eb6:	6593      	str	r3, [r2, #88]	@ 0x58
 8002eb8:	4b22      	ldr	r3, [pc, #136]	@ (8002f44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ebc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ec0:	60fb      	str	r3, [r7, #12]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002ec4:	f7ff f9ea 	bl	800229c <HAL_PWREx_GetVoltageRange>
 8002ec8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002eca:	4b1e      	ldr	r3, [pc, #120]	@ (8002f44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ece:	4a1d      	ldr	r2, [pc, #116]	@ (8002f44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ed0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ed4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002edc:	d10b      	bne.n	8002ef6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2b80      	cmp	r3, #128	@ 0x80
 8002ee2:	d919      	bls.n	8002f18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2ba0      	cmp	r3, #160	@ 0xa0
 8002ee8:	d902      	bls.n	8002ef0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002eea:	2302      	movs	r3, #2
 8002eec:	613b      	str	r3, [r7, #16]
 8002eee:	e013      	b.n	8002f18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	613b      	str	r3, [r7, #16]
 8002ef4:	e010      	b.n	8002f18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2b80      	cmp	r3, #128	@ 0x80
 8002efa:	d902      	bls.n	8002f02 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002efc:	2303      	movs	r3, #3
 8002efe:	613b      	str	r3, [r7, #16]
 8002f00:	e00a      	b.n	8002f18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2b80      	cmp	r3, #128	@ 0x80
 8002f06:	d102      	bne.n	8002f0e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f08:	2302      	movs	r3, #2
 8002f0a:	613b      	str	r3, [r7, #16]
 8002f0c:	e004      	b.n	8002f18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2b70      	cmp	r3, #112	@ 0x70
 8002f12:	d101      	bne.n	8002f18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f14:	2301      	movs	r3, #1
 8002f16:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f18:	4b0b      	ldr	r3, [pc, #44]	@ (8002f48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f023 0207 	bic.w	r2, r3, #7
 8002f20:	4909      	ldr	r1, [pc, #36]	@ (8002f48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002f28:	4b07      	ldr	r3, [pc, #28]	@ (8002f48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0307 	and.w	r3, r3, #7
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d001      	beq.n	8002f3a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e000      	b.n	8002f3c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3718      	adds	r7, #24
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	40021000 	.word	0x40021000
 8002f48:	40022000 	.word	0x40022000

08002f4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e095      	b.n	800308a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d108      	bne.n	8002f78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f6e:	d009      	beq.n	8002f84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	61da      	str	r2, [r3, #28]
 8002f76:	e005      	b.n	8002f84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d106      	bne.n	8002fa4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7fe fb94 	bl	80016cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2202      	movs	r2, #2
 8002fa8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002fba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002fc4:	d902      	bls.n	8002fcc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	60fb      	str	r3, [r7, #12]
 8002fca:	e002      	b.n	8002fd2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002fcc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002fd0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002fda:	d007      	beq.n	8002fec <HAL_SPI_Init+0xa0>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002fe4:	d002      	beq.n	8002fec <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002ffc:	431a      	orrs	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	431a      	orrs	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	695b      	ldr	r3, [r3, #20]
 800300c:	f003 0301 	and.w	r3, r3, #1
 8003010:	431a      	orrs	r2, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800301a:	431a      	orrs	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	69db      	ldr	r3, [r3, #28]
 8003020:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003024:	431a      	orrs	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a1b      	ldr	r3, [r3, #32]
 800302a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800302e:	ea42 0103 	orr.w	r1, r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003036:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	430a      	orrs	r2, r1
 8003040:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	0c1b      	lsrs	r3, r3, #16
 8003048:	f003 0204 	and.w	r2, r3, #4
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003050:	f003 0310 	and.w	r3, r3, #16
 8003054:	431a      	orrs	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800305a:	f003 0308 	and.w	r3, r3, #8
 800305e:	431a      	orrs	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003068:	ea42 0103 	orr.w	r1, r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	430a      	orrs	r2, r1
 8003078:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3710      	adds	r7, #16
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b088      	sub	sp, #32
 8003096:	af00      	add	r7, sp, #0
 8003098:	60f8      	str	r0, [r7, #12]
 800309a:	60b9      	str	r1, [r7, #8]
 800309c:	603b      	str	r3, [r7, #0]
 800309e:	4613      	mov	r3, r2
 80030a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80030a2:	2300      	movs	r3, #0
 80030a4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d101      	bne.n	80030b4 <HAL_SPI_Transmit+0x22>
 80030b0:	2302      	movs	r3, #2
 80030b2:	e15f      	b.n	8003374 <HAL_SPI_Transmit+0x2e2>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030bc:	f7fe fd8e 	bl	8001bdc <HAL_GetTick>
 80030c0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80030c2:	88fb      	ldrh	r3, [r7, #6]
 80030c4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d002      	beq.n	80030d8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80030d2:	2302      	movs	r3, #2
 80030d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80030d6:	e148      	b.n	800336a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d002      	beq.n	80030e4 <HAL_SPI_Transmit+0x52>
 80030de:	88fb      	ldrh	r3, [r7, #6]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d102      	bne.n	80030ea <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80030e8:	e13f      	b.n	800336a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2203      	movs	r2, #3
 80030ee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	68ba      	ldr	r2, [r7, #8]
 80030fc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	88fa      	ldrh	r2, [r7, #6]
 8003102:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	88fa      	ldrh	r2, [r7, #6]
 8003108:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2200      	movs	r2, #0
 8003124:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003134:	d10f      	bne.n	8003156 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003144:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003154:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003160:	2b40      	cmp	r3, #64	@ 0x40
 8003162:	d007      	beq.n	8003174 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003172:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800317c:	d94f      	bls.n	800321e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d002      	beq.n	800318c <HAL_SPI_Transmit+0xfa>
 8003186:	8afb      	ldrh	r3, [r7, #22]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d142      	bne.n	8003212 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003190:	881a      	ldrh	r2, [r3, #0]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800319c:	1c9a      	adds	r2, r3, #2
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	3b01      	subs	r3, #1
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80031b0:	e02f      	b.n	8003212 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d112      	bne.n	80031e6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031c4:	881a      	ldrh	r2, [r3, #0]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031d0:	1c9a      	adds	r2, r3, #2
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031da:	b29b      	uxth	r3, r3
 80031dc:	3b01      	subs	r3, #1
 80031de:	b29a      	uxth	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80031e4:	e015      	b.n	8003212 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031e6:	f7fe fcf9 	bl	8001bdc <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	683a      	ldr	r2, [r7, #0]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d803      	bhi.n	80031fe <HAL_SPI_Transmit+0x16c>
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031fc:	d102      	bne.n	8003204 <HAL_SPI_Transmit+0x172>
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d106      	bne.n	8003212 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003210:	e0ab      	b.n	800336a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003216:	b29b      	uxth	r3, r3
 8003218:	2b00      	cmp	r3, #0
 800321a:	d1ca      	bne.n	80031b2 <HAL_SPI_Transmit+0x120>
 800321c:	e080      	b.n	8003320 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d002      	beq.n	800322c <HAL_SPI_Transmit+0x19a>
 8003226:	8afb      	ldrh	r3, [r7, #22]
 8003228:	2b01      	cmp	r3, #1
 800322a:	d174      	bne.n	8003316 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003230:	b29b      	uxth	r3, r3
 8003232:	2b01      	cmp	r3, #1
 8003234:	d912      	bls.n	800325c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800323a:	881a      	ldrh	r2, [r3, #0]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003246:	1c9a      	adds	r2, r3, #2
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003250:	b29b      	uxth	r3, r3
 8003252:	3b02      	subs	r3, #2
 8003254:	b29a      	uxth	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800325a:	e05c      	b.n	8003316 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	330c      	adds	r3, #12
 8003266:	7812      	ldrb	r2, [r2, #0]
 8003268:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800326e:	1c5a      	adds	r2, r3, #1
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003278:	b29b      	uxth	r3, r3
 800327a:	3b01      	subs	r3, #1
 800327c:	b29a      	uxth	r2, r3
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003282:	e048      	b.n	8003316 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b02      	cmp	r3, #2
 8003290:	d12b      	bne.n	80032ea <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003296:	b29b      	uxth	r3, r3
 8003298:	2b01      	cmp	r3, #1
 800329a:	d912      	bls.n	80032c2 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032a0:	881a      	ldrh	r2, [r3, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032ac:	1c9a      	adds	r2, r3, #2
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	3b02      	subs	r3, #2
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80032c0:	e029      	b.n	8003316 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	330c      	adds	r3, #12
 80032cc:	7812      	ldrb	r2, [r2, #0]
 80032ce:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032d4:	1c5a      	adds	r2, r3, #1
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032de:	b29b      	uxth	r3, r3
 80032e0:	3b01      	subs	r3, #1
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80032e8:	e015      	b.n	8003316 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032ea:	f7fe fc77 	bl	8001bdc <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	683a      	ldr	r2, [r7, #0]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d803      	bhi.n	8003302 <HAL_SPI_Transmit+0x270>
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003300:	d102      	bne.n	8003308 <HAL_SPI_Transmit+0x276>
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d106      	bne.n	8003316 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003314:	e029      	b.n	800336a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800331a:	b29b      	uxth	r3, r3
 800331c:	2b00      	cmp	r3, #0
 800331e:	d1b1      	bne.n	8003284 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	6839      	ldr	r1, [r7, #0]
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	f000 fb69 	bl	80039fc <SPI_EndRxTxTransaction>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d002      	beq.n	8003336 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2220      	movs	r2, #32
 8003334:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d10a      	bne.n	8003354 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800333e:	2300      	movs	r3, #0
 8003340:	613b      	str	r3, [r7, #16]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	613b      	str	r3, [r7, #16]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	613b      	str	r3, [r7, #16]
 8003352:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003358:	2b00      	cmp	r3, #0
 800335a:	d002      	beq.n	8003362 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	77fb      	strb	r3, [r7, #31]
 8003360:	e003      	b.n	800336a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2201      	movs	r2, #1
 8003366:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003372:	7ffb      	ldrb	r3, [r7, #31]
}
 8003374:	4618      	mov	r0, r3
 8003376:	3720      	adds	r7, #32
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b08a      	sub	sp, #40	@ 0x28
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	607a      	str	r2, [r7, #4]
 8003388:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800338a:	2301      	movs	r3, #1
 800338c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800338e:	2300      	movs	r3, #0
 8003390:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800339a:	2b01      	cmp	r3, #1
 800339c:	d101      	bne.n	80033a2 <HAL_SPI_TransmitReceive+0x26>
 800339e:	2302      	movs	r3, #2
 80033a0:	e20a      	b.n	80037b8 <HAL_SPI_TransmitReceive+0x43c>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2201      	movs	r2, #1
 80033a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033aa:	f7fe fc17 	bl	8001bdc <HAL_GetTick>
 80033ae:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80033b6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80033be:	887b      	ldrh	r3, [r7, #2]
 80033c0:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80033c2:	887b      	ldrh	r3, [r7, #2]
 80033c4:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80033c6:	7efb      	ldrb	r3, [r7, #27]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d00e      	beq.n	80033ea <HAL_SPI_TransmitReceive+0x6e>
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80033d2:	d106      	bne.n	80033e2 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d102      	bne.n	80033e2 <HAL_SPI_TransmitReceive+0x66>
 80033dc:	7efb      	ldrb	r3, [r7, #27]
 80033de:	2b04      	cmp	r3, #4
 80033e0:	d003      	beq.n	80033ea <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80033e2:	2302      	movs	r3, #2
 80033e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80033e8:	e1e0      	b.n	80037ac <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d005      	beq.n	80033fc <HAL_SPI_TransmitReceive+0x80>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d002      	beq.n	80033fc <HAL_SPI_TransmitReceive+0x80>
 80033f6:	887b      	ldrh	r3, [r7, #2]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d103      	bne.n	8003404 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003402:	e1d3      	b.n	80037ac <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b04      	cmp	r3, #4
 800340e:	d003      	beq.n	8003418 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2205      	movs	r2, #5
 8003414:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	887a      	ldrh	r2, [r7, #2]
 8003428:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	887a      	ldrh	r2, [r7, #2]
 8003430:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	68ba      	ldr	r2, [r7, #8]
 8003438:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	887a      	ldrh	r2, [r7, #2]
 800343e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	887a      	ldrh	r2, [r7, #2]
 8003444:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2200      	movs	r2, #0
 800344a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800345a:	d802      	bhi.n	8003462 <HAL_SPI_TransmitReceive+0xe6>
 800345c:	8a3b      	ldrh	r3, [r7, #16]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d908      	bls.n	8003474 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	685a      	ldr	r2, [r3, #4]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003470:	605a      	str	r2, [r3, #4]
 8003472:	e007      	b.n	8003484 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	685a      	ldr	r2, [r3, #4]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003482:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800348e:	2b40      	cmp	r3, #64	@ 0x40
 8003490:	d007      	beq.n	80034a2 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80034a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80034aa:	f240 8081 	bls.w	80035b0 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d002      	beq.n	80034bc <HAL_SPI_TransmitReceive+0x140>
 80034b6:	8a7b      	ldrh	r3, [r7, #18]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d16d      	bne.n	8003598 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034c0:	881a      	ldrh	r2, [r3, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034cc:	1c9a      	adds	r2, r3, #2
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	3b01      	subs	r3, #1
 80034da:	b29a      	uxth	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034e0:	e05a      	b.n	8003598 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f003 0302 	and.w	r3, r3, #2
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d11b      	bne.n	8003528 <HAL_SPI_TransmitReceive+0x1ac>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d016      	beq.n	8003528 <HAL_SPI_TransmitReceive+0x1ac>
 80034fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d113      	bne.n	8003528 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003504:	881a      	ldrh	r2, [r3, #0]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003510:	1c9a      	adds	r2, r3, #2
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800351a:	b29b      	uxth	r3, r3
 800351c:	3b01      	subs	r3, #1
 800351e:	b29a      	uxth	r2, r3
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003524:	2300      	movs	r3, #0
 8003526:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b01      	cmp	r3, #1
 8003534:	d11c      	bne.n	8003570 <HAL_SPI_TransmitReceive+0x1f4>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800353c:	b29b      	uxth	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d016      	beq.n	8003570 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68da      	ldr	r2, [r3, #12]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800354c:	b292      	uxth	r2, r2
 800354e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003554:	1c9a      	adds	r2, r3, #2
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003560:	b29b      	uxth	r3, r3
 8003562:	3b01      	subs	r3, #1
 8003564:	b29a      	uxth	r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800356c:	2301      	movs	r3, #1
 800356e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003570:	f7fe fb34 	bl	8001bdc <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800357c:	429a      	cmp	r2, r3
 800357e:	d80b      	bhi.n	8003598 <HAL_SPI_TransmitReceive+0x21c>
 8003580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003586:	d007      	beq.n	8003598 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2201      	movs	r2, #1
 8003592:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003596:	e109      	b.n	80037ac <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800359c:	b29b      	uxth	r3, r3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d19f      	bne.n	80034e2 <HAL_SPI_TransmitReceive+0x166>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d199      	bne.n	80034e2 <HAL_SPI_TransmitReceive+0x166>
 80035ae:	e0e3      	b.n	8003778 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d003      	beq.n	80035c0 <HAL_SPI_TransmitReceive+0x244>
 80035b8:	8a7b      	ldrh	r3, [r7, #18]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	f040 80cf 	bne.w	800375e <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d912      	bls.n	80035f0 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035ce:	881a      	ldrh	r2, [r3, #0]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035da:	1c9a      	adds	r2, r3, #2
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	3b02      	subs	r3, #2
 80035e8:	b29a      	uxth	r2, r3
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80035ee:	e0b6      	b.n	800375e <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	330c      	adds	r3, #12
 80035fa:	7812      	ldrb	r2, [r2, #0]
 80035fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003602:	1c5a      	adds	r2, r3, #1
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800360c:	b29b      	uxth	r3, r3
 800360e:	3b01      	subs	r3, #1
 8003610:	b29a      	uxth	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003616:	e0a2      	b.n	800375e <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b02      	cmp	r3, #2
 8003624:	d134      	bne.n	8003690 <HAL_SPI_TransmitReceive+0x314>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800362a:	b29b      	uxth	r3, r3
 800362c:	2b00      	cmp	r3, #0
 800362e:	d02f      	beq.n	8003690 <HAL_SPI_TransmitReceive+0x314>
 8003630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003632:	2b01      	cmp	r3, #1
 8003634:	d12c      	bne.n	8003690 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800363a:	b29b      	uxth	r3, r3
 800363c:	2b01      	cmp	r3, #1
 800363e:	d912      	bls.n	8003666 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003644:	881a      	ldrh	r2, [r3, #0]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003650:	1c9a      	adds	r2, r3, #2
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800365a:	b29b      	uxth	r3, r3
 800365c:	3b02      	subs	r3, #2
 800365e:	b29a      	uxth	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003664:	e012      	b.n	800368c <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	330c      	adds	r3, #12
 8003670:	7812      	ldrb	r2, [r2, #0]
 8003672:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003678:	1c5a      	adds	r2, r3, #1
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003682:	b29b      	uxth	r3, r3
 8003684:	3b01      	subs	r3, #1
 8003686:	b29a      	uxth	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800368c:	2300      	movs	r3, #0
 800368e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	2b01      	cmp	r3, #1
 800369c:	d148      	bne.n	8003730 <HAL_SPI_TransmitReceive+0x3b4>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d042      	beq.n	8003730 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d923      	bls.n	80036fe <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68da      	ldr	r2, [r3, #12]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c0:	b292      	uxth	r2, r2
 80036c2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c8:	1c9a      	adds	r2, r3, #2
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	3b02      	subs	r3, #2
 80036d8:	b29a      	uxth	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d81f      	bhi.n	800372c <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	685a      	ldr	r2, [r3, #4]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80036fa:	605a      	str	r2, [r3, #4]
 80036fc:	e016      	b.n	800372c <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f103 020c 	add.w	r2, r3, #12
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800370a:	7812      	ldrb	r2, [r2, #0]
 800370c:	b2d2      	uxtb	r2, r2
 800370e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003714:	1c5a      	adds	r2, r3, #1
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003720:	b29b      	uxth	r3, r3
 8003722:	3b01      	subs	r3, #1
 8003724:	b29a      	uxth	r2, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800372c:	2301      	movs	r3, #1
 800372e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003730:	f7fe fa54 	bl	8001bdc <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800373c:	429a      	cmp	r2, r3
 800373e:	d803      	bhi.n	8003748 <HAL_SPI_TransmitReceive+0x3cc>
 8003740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003746:	d102      	bne.n	800374e <HAL_SPI_TransmitReceive+0x3d2>
 8003748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800374a:	2b00      	cmp	r3, #0
 800374c:	d107      	bne.n	800375e <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800375c:	e026      	b.n	80037ac <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003762:	b29b      	uxth	r3, r3
 8003764:	2b00      	cmp	r3, #0
 8003766:	f47f af57 	bne.w	8003618 <HAL_SPI_TransmitReceive+0x29c>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003770:	b29b      	uxth	r3, r3
 8003772:	2b00      	cmp	r3, #0
 8003774:	f47f af50 	bne.w	8003618 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003778:	69fa      	ldr	r2, [r7, #28]
 800377a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800377c:	68f8      	ldr	r0, [r7, #12]
 800377e:	f000 f93d 	bl	80039fc <SPI_EndRxTxTransaction>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d005      	beq.n	8003794 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2220      	movs	r2, #32
 8003792:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003798:	2b00      	cmp	r3, #0
 800379a:	d003      	beq.n	80037a4 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037a2:	e003      	b.n	80037ac <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80037b4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3728      	adds	r7, #40	@ 0x28
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b088      	sub	sp, #32
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	603b      	str	r3, [r7, #0]
 80037cc:	4613      	mov	r3, r2
 80037ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80037d0:	f7fe fa04 	bl	8001bdc <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037d8:	1a9b      	subs	r3, r3, r2
 80037da:	683a      	ldr	r2, [r7, #0]
 80037dc:	4413      	add	r3, r2
 80037de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80037e0:	f7fe f9fc 	bl	8001bdc <HAL_GetTick>
 80037e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80037e6:	4b39      	ldr	r3, [pc, #228]	@ (80038cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	015b      	lsls	r3, r3, #5
 80037ec:	0d1b      	lsrs	r3, r3, #20
 80037ee:	69fa      	ldr	r2, [r7, #28]
 80037f0:	fb02 f303 	mul.w	r3, r2, r3
 80037f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037f6:	e054      	b.n	80038a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037fe:	d050      	beq.n	80038a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003800:	f7fe f9ec 	bl	8001bdc <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	69fa      	ldr	r2, [r7, #28]
 800380c:	429a      	cmp	r2, r3
 800380e:	d902      	bls.n	8003816 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d13d      	bne.n	8003892 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	685a      	ldr	r2, [r3, #4]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003824:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800382e:	d111      	bne.n	8003854 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003838:	d004      	beq.n	8003844 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003842:	d107      	bne.n	8003854 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003852:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003858:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800385c:	d10f      	bne.n	800387e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800386c:	601a      	str	r2, [r3, #0]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800387c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e017      	b.n	80038c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d101      	bne.n	800389c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003898:	2300      	movs	r3, #0
 800389a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	3b01      	subs	r3, #1
 80038a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	689a      	ldr	r2, [r3, #8]
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	4013      	ands	r3, r2
 80038ac:	68ba      	ldr	r2, [r7, #8]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	bf0c      	ite	eq
 80038b2:	2301      	moveq	r3, #1
 80038b4:	2300      	movne	r3, #0
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	461a      	mov	r2, r3
 80038ba:	79fb      	ldrb	r3, [r7, #7]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d19b      	bne.n	80037f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3720      	adds	r7, #32
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	20000150 	.word	0x20000150

080038d0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b08a      	sub	sp, #40	@ 0x28
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607a      	str	r2, [r7, #4]
 80038dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80038de:	2300      	movs	r3, #0
 80038e0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80038e2:	f7fe f97b 	bl	8001bdc <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ea:	1a9b      	subs	r3, r3, r2
 80038ec:	683a      	ldr	r2, [r7, #0]
 80038ee:	4413      	add	r3, r2
 80038f0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80038f2:	f7fe f973 	bl	8001bdc <HAL_GetTick>
 80038f6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	330c      	adds	r3, #12
 80038fe:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003900:	4b3d      	ldr	r3, [pc, #244]	@ (80039f8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	4613      	mov	r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	4413      	add	r3, r2
 800390a:	00da      	lsls	r2, r3, #3
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	0d1b      	lsrs	r3, r3, #20
 8003910:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003912:	fb02 f303 	mul.w	r3, r2, r3
 8003916:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003918:	e060      	b.n	80039dc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003920:	d107      	bne.n	8003932 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d104      	bne.n	8003932 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	b2db      	uxtb	r3, r3
 800392e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003930:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003938:	d050      	beq.n	80039dc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800393a:	f7fe f94f 	bl	8001bdc <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	6a3b      	ldr	r3, [r7, #32]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003946:	429a      	cmp	r2, r3
 8003948:	d902      	bls.n	8003950 <SPI_WaitFifoStateUntilTimeout+0x80>
 800394a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800394c:	2b00      	cmp	r3, #0
 800394e:	d13d      	bne.n	80039cc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	685a      	ldr	r2, [r3, #4]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800395e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003968:	d111      	bne.n	800398e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003972:	d004      	beq.n	800397e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800397c:	d107      	bne.n	800398e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800398c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003992:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003996:	d10f      	bne.n	80039b8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80039a6:	601a      	str	r2, [r3, #0]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80039b6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e010      	b.n	80039ee <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d101      	bne.n	80039d6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80039d2:	2300      	movs	r3, #0
 80039d4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	3b01      	subs	r3, #1
 80039da:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	689a      	ldr	r2, [r3, #8]
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	4013      	ands	r3, r2
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d196      	bne.n	800391a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3728      	adds	r7, #40	@ 0x28
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	20000150 	.word	0x20000150

080039fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b086      	sub	sp, #24
 8003a00:	af02      	add	r7, sp, #8
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	9300      	str	r3, [sp, #0]
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f7ff ff5b 	bl	80038d0 <SPI_WaitFifoStateUntilTimeout>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d007      	beq.n	8003a30 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a24:	f043 0220 	orr.w	r2, r3, #32
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e027      	b.n	8003a80 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	9300      	str	r3, [sp, #0]
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	2200      	movs	r2, #0
 8003a38:	2180      	movs	r1, #128	@ 0x80
 8003a3a:	68f8      	ldr	r0, [r7, #12]
 8003a3c:	f7ff fec0 	bl	80037c0 <SPI_WaitFlagStateUntilTimeout>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d007      	beq.n	8003a56 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a4a:	f043 0220 	orr.w	r2, r3, #32
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e014      	b.n	8003a80 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	9300      	str	r3, [sp, #0]
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003a62:	68f8      	ldr	r0, [r7, #12]
 8003a64:	f7ff ff34 	bl	80038d0 <SPI_WaitFifoStateUntilTimeout>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d007      	beq.n	8003a7e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a72:	f043 0220 	orr.w	r2, r3, #32
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e000      	b.n	8003a80 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3710      	adds	r7, #16
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <malloc>:
 8003a88:	4b02      	ldr	r3, [pc, #8]	@ (8003a94 <malloc+0xc>)
 8003a8a:	4601      	mov	r1, r0
 8003a8c:	6818      	ldr	r0, [r3, #0]
 8003a8e:	f000 b82d 	b.w	8003aec <_malloc_r>
 8003a92:	bf00      	nop
 8003a94:	20000168 	.word	0x20000168

08003a98 <free>:
 8003a98:	4b02      	ldr	r3, [pc, #8]	@ (8003aa4 <free+0xc>)
 8003a9a:	4601      	mov	r1, r0
 8003a9c:	6818      	ldr	r0, [r3, #0]
 8003a9e:	f000 bb89 	b.w	80041b4 <_free_r>
 8003aa2:	bf00      	nop
 8003aa4:	20000168 	.word	0x20000168

08003aa8 <sbrk_aligned>:
 8003aa8:	b570      	push	{r4, r5, r6, lr}
 8003aaa:	4e0f      	ldr	r6, [pc, #60]	@ (8003ae8 <sbrk_aligned+0x40>)
 8003aac:	460c      	mov	r4, r1
 8003aae:	6831      	ldr	r1, [r6, #0]
 8003ab0:	4605      	mov	r5, r0
 8003ab2:	b911      	cbnz	r1, 8003aba <sbrk_aligned+0x12>
 8003ab4:	f000 fb20 	bl	80040f8 <_sbrk_r>
 8003ab8:	6030      	str	r0, [r6, #0]
 8003aba:	4621      	mov	r1, r4
 8003abc:	4628      	mov	r0, r5
 8003abe:	f000 fb1b 	bl	80040f8 <_sbrk_r>
 8003ac2:	1c43      	adds	r3, r0, #1
 8003ac4:	d103      	bne.n	8003ace <sbrk_aligned+0x26>
 8003ac6:	f04f 34ff 	mov.w	r4, #4294967295
 8003aca:	4620      	mov	r0, r4
 8003acc:	bd70      	pop	{r4, r5, r6, pc}
 8003ace:	1cc4      	adds	r4, r0, #3
 8003ad0:	f024 0403 	bic.w	r4, r4, #3
 8003ad4:	42a0      	cmp	r0, r4
 8003ad6:	d0f8      	beq.n	8003aca <sbrk_aligned+0x22>
 8003ad8:	1a21      	subs	r1, r4, r0
 8003ada:	4628      	mov	r0, r5
 8003adc:	f000 fb0c 	bl	80040f8 <_sbrk_r>
 8003ae0:	3001      	adds	r0, #1
 8003ae2:	d1f2      	bne.n	8003aca <sbrk_aligned+0x22>
 8003ae4:	e7ef      	b.n	8003ac6 <sbrk_aligned+0x1e>
 8003ae6:	bf00      	nop
 8003ae8:	2000036c 	.word	0x2000036c

08003aec <_malloc_r>:
 8003aec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003af0:	1ccd      	adds	r5, r1, #3
 8003af2:	f025 0503 	bic.w	r5, r5, #3
 8003af6:	3508      	adds	r5, #8
 8003af8:	2d0c      	cmp	r5, #12
 8003afa:	bf38      	it	cc
 8003afc:	250c      	movcc	r5, #12
 8003afe:	2d00      	cmp	r5, #0
 8003b00:	4606      	mov	r6, r0
 8003b02:	db01      	blt.n	8003b08 <_malloc_r+0x1c>
 8003b04:	42a9      	cmp	r1, r5
 8003b06:	d904      	bls.n	8003b12 <_malloc_r+0x26>
 8003b08:	230c      	movs	r3, #12
 8003b0a:	6033      	str	r3, [r6, #0]
 8003b0c:	2000      	movs	r0, #0
 8003b0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003be8 <_malloc_r+0xfc>
 8003b16:	f000 f869 	bl	8003bec <__malloc_lock>
 8003b1a:	f8d8 3000 	ldr.w	r3, [r8]
 8003b1e:	461c      	mov	r4, r3
 8003b20:	bb44      	cbnz	r4, 8003b74 <_malloc_r+0x88>
 8003b22:	4629      	mov	r1, r5
 8003b24:	4630      	mov	r0, r6
 8003b26:	f7ff ffbf 	bl	8003aa8 <sbrk_aligned>
 8003b2a:	1c43      	adds	r3, r0, #1
 8003b2c:	4604      	mov	r4, r0
 8003b2e:	d158      	bne.n	8003be2 <_malloc_r+0xf6>
 8003b30:	f8d8 4000 	ldr.w	r4, [r8]
 8003b34:	4627      	mov	r7, r4
 8003b36:	2f00      	cmp	r7, #0
 8003b38:	d143      	bne.n	8003bc2 <_malloc_r+0xd6>
 8003b3a:	2c00      	cmp	r4, #0
 8003b3c:	d04b      	beq.n	8003bd6 <_malloc_r+0xea>
 8003b3e:	6823      	ldr	r3, [r4, #0]
 8003b40:	4639      	mov	r1, r7
 8003b42:	4630      	mov	r0, r6
 8003b44:	eb04 0903 	add.w	r9, r4, r3
 8003b48:	f000 fad6 	bl	80040f8 <_sbrk_r>
 8003b4c:	4581      	cmp	r9, r0
 8003b4e:	d142      	bne.n	8003bd6 <_malloc_r+0xea>
 8003b50:	6821      	ldr	r1, [r4, #0]
 8003b52:	1a6d      	subs	r5, r5, r1
 8003b54:	4629      	mov	r1, r5
 8003b56:	4630      	mov	r0, r6
 8003b58:	f7ff ffa6 	bl	8003aa8 <sbrk_aligned>
 8003b5c:	3001      	adds	r0, #1
 8003b5e:	d03a      	beq.n	8003bd6 <_malloc_r+0xea>
 8003b60:	6823      	ldr	r3, [r4, #0]
 8003b62:	442b      	add	r3, r5
 8003b64:	6023      	str	r3, [r4, #0]
 8003b66:	f8d8 3000 	ldr.w	r3, [r8]
 8003b6a:	685a      	ldr	r2, [r3, #4]
 8003b6c:	bb62      	cbnz	r2, 8003bc8 <_malloc_r+0xdc>
 8003b6e:	f8c8 7000 	str.w	r7, [r8]
 8003b72:	e00f      	b.n	8003b94 <_malloc_r+0xa8>
 8003b74:	6822      	ldr	r2, [r4, #0]
 8003b76:	1b52      	subs	r2, r2, r5
 8003b78:	d420      	bmi.n	8003bbc <_malloc_r+0xd0>
 8003b7a:	2a0b      	cmp	r2, #11
 8003b7c:	d917      	bls.n	8003bae <_malloc_r+0xc2>
 8003b7e:	1961      	adds	r1, r4, r5
 8003b80:	42a3      	cmp	r3, r4
 8003b82:	6025      	str	r5, [r4, #0]
 8003b84:	bf18      	it	ne
 8003b86:	6059      	strne	r1, [r3, #4]
 8003b88:	6863      	ldr	r3, [r4, #4]
 8003b8a:	bf08      	it	eq
 8003b8c:	f8c8 1000 	streq.w	r1, [r8]
 8003b90:	5162      	str	r2, [r4, r5]
 8003b92:	604b      	str	r3, [r1, #4]
 8003b94:	4630      	mov	r0, r6
 8003b96:	f000 f82f 	bl	8003bf8 <__malloc_unlock>
 8003b9a:	f104 000b 	add.w	r0, r4, #11
 8003b9e:	1d23      	adds	r3, r4, #4
 8003ba0:	f020 0007 	bic.w	r0, r0, #7
 8003ba4:	1ac2      	subs	r2, r0, r3
 8003ba6:	bf1c      	itt	ne
 8003ba8:	1a1b      	subne	r3, r3, r0
 8003baa:	50a3      	strne	r3, [r4, r2]
 8003bac:	e7af      	b.n	8003b0e <_malloc_r+0x22>
 8003bae:	6862      	ldr	r2, [r4, #4]
 8003bb0:	42a3      	cmp	r3, r4
 8003bb2:	bf0c      	ite	eq
 8003bb4:	f8c8 2000 	streq.w	r2, [r8]
 8003bb8:	605a      	strne	r2, [r3, #4]
 8003bba:	e7eb      	b.n	8003b94 <_malloc_r+0xa8>
 8003bbc:	4623      	mov	r3, r4
 8003bbe:	6864      	ldr	r4, [r4, #4]
 8003bc0:	e7ae      	b.n	8003b20 <_malloc_r+0x34>
 8003bc2:	463c      	mov	r4, r7
 8003bc4:	687f      	ldr	r7, [r7, #4]
 8003bc6:	e7b6      	b.n	8003b36 <_malloc_r+0x4a>
 8003bc8:	461a      	mov	r2, r3
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	42a3      	cmp	r3, r4
 8003bce:	d1fb      	bne.n	8003bc8 <_malloc_r+0xdc>
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	6053      	str	r3, [r2, #4]
 8003bd4:	e7de      	b.n	8003b94 <_malloc_r+0xa8>
 8003bd6:	230c      	movs	r3, #12
 8003bd8:	6033      	str	r3, [r6, #0]
 8003bda:	4630      	mov	r0, r6
 8003bdc:	f000 f80c 	bl	8003bf8 <__malloc_unlock>
 8003be0:	e794      	b.n	8003b0c <_malloc_r+0x20>
 8003be2:	6005      	str	r5, [r0, #0]
 8003be4:	e7d6      	b.n	8003b94 <_malloc_r+0xa8>
 8003be6:	bf00      	nop
 8003be8:	20000370 	.word	0x20000370

08003bec <__malloc_lock>:
 8003bec:	4801      	ldr	r0, [pc, #4]	@ (8003bf4 <__malloc_lock+0x8>)
 8003bee:	f000 bad0 	b.w	8004192 <__retarget_lock_acquire_recursive>
 8003bf2:	bf00      	nop
 8003bf4:	200004b4 	.word	0x200004b4

08003bf8 <__malloc_unlock>:
 8003bf8:	4801      	ldr	r0, [pc, #4]	@ (8003c00 <__malloc_unlock+0x8>)
 8003bfa:	f000 bacb 	b.w	8004194 <__retarget_lock_release_recursive>
 8003bfe:	bf00      	nop
 8003c00:	200004b4 	.word	0x200004b4

08003c04 <std>:
 8003c04:	2300      	movs	r3, #0
 8003c06:	b510      	push	{r4, lr}
 8003c08:	4604      	mov	r4, r0
 8003c0a:	e9c0 3300 	strd	r3, r3, [r0]
 8003c0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003c12:	6083      	str	r3, [r0, #8]
 8003c14:	8181      	strh	r1, [r0, #12]
 8003c16:	6643      	str	r3, [r0, #100]	@ 0x64
 8003c18:	81c2      	strh	r2, [r0, #14]
 8003c1a:	6183      	str	r3, [r0, #24]
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	2208      	movs	r2, #8
 8003c20:	305c      	adds	r0, #92	@ 0x5c
 8003c22:	f000 fa2d 	bl	8004080 <memset>
 8003c26:	4b0d      	ldr	r3, [pc, #52]	@ (8003c5c <std+0x58>)
 8003c28:	6263      	str	r3, [r4, #36]	@ 0x24
 8003c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8003c60 <std+0x5c>)
 8003c2c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8003c64 <std+0x60>)
 8003c30:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003c32:	4b0d      	ldr	r3, [pc, #52]	@ (8003c68 <std+0x64>)
 8003c34:	6323      	str	r3, [r4, #48]	@ 0x30
 8003c36:	4b0d      	ldr	r3, [pc, #52]	@ (8003c6c <std+0x68>)
 8003c38:	6224      	str	r4, [r4, #32]
 8003c3a:	429c      	cmp	r4, r3
 8003c3c:	d006      	beq.n	8003c4c <std+0x48>
 8003c3e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003c42:	4294      	cmp	r4, r2
 8003c44:	d002      	beq.n	8003c4c <std+0x48>
 8003c46:	33d0      	adds	r3, #208	@ 0xd0
 8003c48:	429c      	cmp	r4, r3
 8003c4a:	d105      	bne.n	8003c58 <std+0x54>
 8003c4c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c54:	f000 ba9c 	b.w	8004190 <__retarget_lock_init_recursive>
 8003c58:	bd10      	pop	{r4, pc}
 8003c5a:	bf00      	nop
 8003c5c:	08003ed1 	.word	0x08003ed1
 8003c60:	08003ef3 	.word	0x08003ef3
 8003c64:	08003f2b 	.word	0x08003f2b
 8003c68:	08003f4f 	.word	0x08003f4f
 8003c6c:	20000374 	.word	0x20000374

08003c70 <stdio_exit_handler>:
 8003c70:	4a02      	ldr	r2, [pc, #8]	@ (8003c7c <stdio_exit_handler+0xc>)
 8003c72:	4903      	ldr	r1, [pc, #12]	@ (8003c80 <stdio_exit_handler+0x10>)
 8003c74:	4803      	ldr	r0, [pc, #12]	@ (8003c84 <stdio_exit_handler+0x14>)
 8003c76:	f000 b869 	b.w	8003d4c <_fwalk_sglue>
 8003c7a:	bf00      	nop
 8003c7c:	2000015c 	.word	0x2000015c
 8003c80:	08004ba1 	.word	0x08004ba1
 8003c84:	2000016c 	.word	0x2000016c

08003c88 <cleanup_stdio>:
 8003c88:	6841      	ldr	r1, [r0, #4]
 8003c8a:	4b0c      	ldr	r3, [pc, #48]	@ (8003cbc <cleanup_stdio+0x34>)
 8003c8c:	4299      	cmp	r1, r3
 8003c8e:	b510      	push	{r4, lr}
 8003c90:	4604      	mov	r4, r0
 8003c92:	d001      	beq.n	8003c98 <cleanup_stdio+0x10>
 8003c94:	f000 ff84 	bl	8004ba0 <_fflush_r>
 8003c98:	68a1      	ldr	r1, [r4, #8]
 8003c9a:	4b09      	ldr	r3, [pc, #36]	@ (8003cc0 <cleanup_stdio+0x38>)
 8003c9c:	4299      	cmp	r1, r3
 8003c9e:	d002      	beq.n	8003ca6 <cleanup_stdio+0x1e>
 8003ca0:	4620      	mov	r0, r4
 8003ca2:	f000 ff7d 	bl	8004ba0 <_fflush_r>
 8003ca6:	68e1      	ldr	r1, [r4, #12]
 8003ca8:	4b06      	ldr	r3, [pc, #24]	@ (8003cc4 <cleanup_stdio+0x3c>)
 8003caa:	4299      	cmp	r1, r3
 8003cac:	d004      	beq.n	8003cb8 <cleanup_stdio+0x30>
 8003cae:	4620      	mov	r0, r4
 8003cb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cb4:	f000 bf74 	b.w	8004ba0 <_fflush_r>
 8003cb8:	bd10      	pop	{r4, pc}
 8003cba:	bf00      	nop
 8003cbc:	20000374 	.word	0x20000374
 8003cc0:	200003dc 	.word	0x200003dc
 8003cc4:	20000444 	.word	0x20000444

08003cc8 <global_stdio_init.part.0>:
 8003cc8:	b510      	push	{r4, lr}
 8003cca:	4b0b      	ldr	r3, [pc, #44]	@ (8003cf8 <global_stdio_init.part.0+0x30>)
 8003ccc:	4c0b      	ldr	r4, [pc, #44]	@ (8003cfc <global_stdio_init.part.0+0x34>)
 8003cce:	4a0c      	ldr	r2, [pc, #48]	@ (8003d00 <global_stdio_init.part.0+0x38>)
 8003cd0:	601a      	str	r2, [r3, #0]
 8003cd2:	4620      	mov	r0, r4
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	2104      	movs	r1, #4
 8003cd8:	f7ff ff94 	bl	8003c04 <std>
 8003cdc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	2109      	movs	r1, #9
 8003ce4:	f7ff ff8e 	bl	8003c04 <std>
 8003ce8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003cec:	2202      	movs	r2, #2
 8003cee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cf2:	2112      	movs	r1, #18
 8003cf4:	f7ff bf86 	b.w	8003c04 <std>
 8003cf8:	200004ac 	.word	0x200004ac
 8003cfc:	20000374 	.word	0x20000374
 8003d00:	08003c71 	.word	0x08003c71

08003d04 <__sfp_lock_acquire>:
 8003d04:	4801      	ldr	r0, [pc, #4]	@ (8003d0c <__sfp_lock_acquire+0x8>)
 8003d06:	f000 ba44 	b.w	8004192 <__retarget_lock_acquire_recursive>
 8003d0a:	bf00      	nop
 8003d0c:	200004b5 	.word	0x200004b5

08003d10 <__sfp_lock_release>:
 8003d10:	4801      	ldr	r0, [pc, #4]	@ (8003d18 <__sfp_lock_release+0x8>)
 8003d12:	f000 ba3f 	b.w	8004194 <__retarget_lock_release_recursive>
 8003d16:	bf00      	nop
 8003d18:	200004b5 	.word	0x200004b5

08003d1c <__sinit>:
 8003d1c:	b510      	push	{r4, lr}
 8003d1e:	4604      	mov	r4, r0
 8003d20:	f7ff fff0 	bl	8003d04 <__sfp_lock_acquire>
 8003d24:	6a23      	ldr	r3, [r4, #32]
 8003d26:	b11b      	cbz	r3, 8003d30 <__sinit+0x14>
 8003d28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d2c:	f7ff bff0 	b.w	8003d10 <__sfp_lock_release>
 8003d30:	4b04      	ldr	r3, [pc, #16]	@ (8003d44 <__sinit+0x28>)
 8003d32:	6223      	str	r3, [r4, #32]
 8003d34:	4b04      	ldr	r3, [pc, #16]	@ (8003d48 <__sinit+0x2c>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d1f5      	bne.n	8003d28 <__sinit+0xc>
 8003d3c:	f7ff ffc4 	bl	8003cc8 <global_stdio_init.part.0>
 8003d40:	e7f2      	b.n	8003d28 <__sinit+0xc>
 8003d42:	bf00      	nop
 8003d44:	08003c89 	.word	0x08003c89
 8003d48:	200004ac 	.word	0x200004ac

08003d4c <_fwalk_sglue>:
 8003d4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d50:	4607      	mov	r7, r0
 8003d52:	4688      	mov	r8, r1
 8003d54:	4614      	mov	r4, r2
 8003d56:	2600      	movs	r6, #0
 8003d58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003d5c:	f1b9 0901 	subs.w	r9, r9, #1
 8003d60:	d505      	bpl.n	8003d6e <_fwalk_sglue+0x22>
 8003d62:	6824      	ldr	r4, [r4, #0]
 8003d64:	2c00      	cmp	r4, #0
 8003d66:	d1f7      	bne.n	8003d58 <_fwalk_sglue+0xc>
 8003d68:	4630      	mov	r0, r6
 8003d6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d6e:	89ab      	ldrh	r3, [r5, #12]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d907      	bls.n	8003d84 <_fwalk_sglue+0x38>
 8003d74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d78:	3301      	adds	r3, #1
 8003d7a:	d003      	beq.n	8003d84 <_fwalk_sglue+0x38>
 8003d7c:	4629      	mov	r1, r5
 8003d7e:	4638      	mov	r0, r7
 8003d80:	47c0      	blx	r8
 8003d82:	4306      	orrs	r6, r0
 8003d84:	3568      	adds	r5, #104	@ 0x68
 8003d86:	e7e9      	b.n	8003d5c <_fwalk_sglue+0x10>

08003d88 <iprintf>:
 8003d88:	b40f      	push	{r0, r1, r2, r3}
 8003d8a:	b507      	push	{r0, r1, r2, lr}
 8003d8c:	4906      	ldr	r1, [pc, #24]	@ (8003da8 <iprintf+0x20>)
 8003d8e:	ab04      	add	r3, sp, #16
 8003d90:	6808      	ldr	r0, [r1, #0]
 8003d92:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d96:	6881      	ldr	r1, [r0, #8]
 8003d98:	9301      	str	r3, [sp, #4]
 8003d9a:	f000 fbd7 	bl	800454c <_vfiprintf_r>
 8003d9e:	b003      	add	sp, #12
 8003da0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003da4:	b004      	add	sp, #16
 8003da6:	4770      	bx	lr
 8003da8:	20000168 	.word	0x20000168

08003dac <_puts_r>:
 8003dac:	6a03      	ldr	r3, [r0, #32]
 8003dae:	b570      	push	{r4, r5, r6, lr}
 8003db0:	6884      	ldr	r4, [r0, #8]
 8003db2:	4605      	mov	r5, r0
 8003db4:	460e      	mov	r6, r1
 8003db6:	b90b      	cbnz	r3, 8003dbc <_puts_r+0x10>
 8003db8:	f7ff ffb0 	bl	8003d1c <__sinit>
 8003dbc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003dbe:	07db      	lsls	r3, r3, #31
 8003dc0:	d405      	bmi.n	8003dce <_puts_r+0x22>
 8003dc2:	89a3      	ldrh	r3, [r4, #12]
 8003dc4:	0598      	lsls	r0, r3, #22
 8003dc6:	d402      	bmi.n	8003dce <_puts_r+0x22>
 8003dc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003dca:	f000 f9e2 	bl	8004192 <__retarget_lock_acquire_recursive>
 8003dce:	89a3      	ldrh	r3, [r4, #12]
 8003dd0:	0719      	lsls	r1, r3, #28
 8003dd2:	d502      	bpl.n	8003dda <_puts_r+0x2e>
 8003dd4:	6923      	ldr	r3, [r4, #16]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d135      	bne.n	8003e46 <_puts_r+0x9a>
 8003dda:	4621      	mov	r1, r4
 8003ddc:	4628      	mov	r0, r5
 8003dde:	f000 f8f9 	bl	8003fd4 <__swsetup_r>
 8003de2:	b380      	cbz	r0, 8003e46 <_puts_r+0x9a>
 8003de4:	f04f 35ff 	mov.w	r5, #4294967295
 8003de8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003dea:	07da      	lsls	r2, r3, #31
 8003dec:	d405      	bmi.n	8003dfa <_puts_r+0x4e>
 8003dee:	89a3      	ldrh	r3, [r4, #12]
 8003df0:	059b      	lsls	r3, r3, #22
 8003df2:	d402      	bmi.n	8003dfa <_puts_r+0x4e>
 8003df4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003df6:	f000 f9cd 	bl	8004194 <__retarget_lock_release_recursive>
 8003dfa:	4628      	mov	r0, r5
 8003dfc:	bd70      	pop	{r4, r5, r6, pc}
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	da04      	bge.n	8003e0c <_puts_r+0x60>
 8003e02:	69a2      	ldr	r2, [r4, #24]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	dc17      	bgt.n	8003e38 <_puts_r+0x8c>
 8003e08:	290a      	cmp	r1, #10
 8003e0a:	d015      	beq.n	8003e38 <_puts_r+0x8c>
 8003e0c:	6823      	ldr	r3, [r4, #0]
 8003e0e:	1c5a      	adds	r2, r3, #1
 8003e10:	6022      	str	r2, [r4, #0]
 8003e12:	7019      	strb	r1, [r3, #0]
 8003e14:	68a3      	ldr	r3, [r4, #8]
 8003e16:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	60a3      	str	r3, [r4, #8]
 8003e1e:	2900      	cmp	r1, #0
 8003e20:	d1ed      	bne.n	8003dfe <_puts_r+0x52>
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	da11      	bge.n	8003e4a <_puts_r+0x9e>
 8003e26:	4622      	mov	r2, r4
 8003e28:	210a      	movs	r1, #10
 8003e2a:	4628      	mov	r0, r5
 8003e2c:	f000 f893 	bl	8003f56 <__swbuf_r>
 8003e30:	3001      	adds	r0, #1
 8003e32:	d0d7      	beq.n	8003de4 <_puts_r+0x38>
 8003e34:	250a      	movs	r5, #10
 8003e36:	e7d7      	b.n	8003de8 <_puts_r+0x3c>
 8003e38:	4622      	mov	r2, r4
 8003e3a:	4628      	mov	r0, r5
 8003e3c:	f000 f88b 	bl	8003f56 <__swbuf_r>
 8003e40:	3001      	adds	r0, #1
 8003e42:	d1e7      	bne.n	8003e14 <_puts_r+0x68>
 8003e44:	e7ce      	b.n	8003de4 <_puts_r+0x38>
 8003e46:	3e01      	subs	r6, #1
 8003e48:	e7e4      	b.n	8003e14 <_puts_r+0x68>
 8003e4a:	6823      	ldr	r3, [r4, #0]
 8003e4c:	1c5a      	adds	r2, r3, #1
 8003e4e:	6022      	str	r2, [r4, #0]
 8003e50:	220a      	movs	r2, #10
 8003e52:	701a      	strb	r2, [r3, #0]
 8003e54:	e7ee      	b.n	8003e34 <_puts_r+0x88>
	...

08003e58 <puts>:
 8003e58:	4b02      	ldr	r3, [pc, #8]	@ (8003e64 <puts+0xc>)
 8003e5a:	4601      	mov	r1, r0
 8003e5c:	6818      	ldr	r0, [r3, #0]
 8003e5e:	f7ff bfa5 	b.w	8003dac <_puts_r>
 8003e62:	bf00      	nop
 8003e64:	20000168 	.word	0x20000168

08003e68 <sniprintf>:
 8003e68:	b40c      	push	{r2, r3}
 8003e6a:	b530      	push	{r4, r5, lr}
 8003e6c:	4b17      	ldr	r3, [pc, #92]	@ (8003ecc <sniprintf+0x64>)
 8003e6e:	1e0c      	subs	r4, r1, #0
 8003e70:	681d      	ldr	r5, [r3, #0]
 8003e72:	b09d      	sub	sp, #116	@ 0x74
 8003e74:	da08      	bge.n	8003e88 <sniprintf+0x20>
 8003e76:	238b      	movs	r3, #139	@ 0x8b
 8003e78:	602b      	str	r3, [r5, #0]
 8003e7a:	f04f 30ff 	mov.w	r0, #4294967295
 8003e7e:	b01d      	add	sp, #116	@ 0x74
 8003e80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003e84:	b002      	add	sp, #8
 8003e86:	4770      	bx	lr
 8003e88:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003e8c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003e90:	bf14      	ite	ne
 8003e92:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003e96:	4623      	moveq	r3, r4
 8003e98:	9304      	str	r3, [sp, #16]
 8003e9a:	9307      	str	r3, [sp, #28]
 8003e9c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003ea0:	9002      	str	r0, [sp, #8]
 8003ea2:	9006      	str	r0, [sp, #24]
 8003ea4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003ea8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003eaa:	ab21      	add	r3, sp, #132	@ 0x84
 8003eac:	a902      	add	r1, sp, #8
 8003eae:	4628      	mov	r0, r5
 8003eb0:	9301      	str	r3, [sp, #4]
 8003eb2:	f000 fa25 	bl	8004300 <_svfiprintf_r>
 8003eb6:	1c43      	adds	r3, r0, #1
 8003eb8:	bfbc      	itt	lt
 8003eba:	238b      	movlt	r3, #139	@ 0x8b
 8003ebc:	602b      	strlt	r3, [r5, #0]
 8003ebe:	2c00      	cmp	r4, #0
 8003ec0:	d0dd      	beq.n	8003e7e <sniprintf+0x16>
 8003ec2:	9b02      	ldr	r3, [sp, #8]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	701a      	strb	r2, [r3, #0]
 8003ec8:	e7d9      	b.n	8003e7e <sniprintf+0x16>
 8003eca:	bf00      	nop
 8003ecc:	20000168 	.word	0x20000168

08003ed0 <__sread>:
 8003ed0:	b510      	push	{r4, lr}
 8003ed2:	460c      	mov	r4, r1
 8003ed4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ed8:	f000 f8fc 	bl	80040d4 <_read_r>
 8003edc:	2800      	cmp	r0, #0
 8003ede:	bfab      	itete	ge
 8003ee0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003ee2:	89a3      	ldrhlt	r3, [r4, #12]
 8003ee4:	181b      	addge	r3, r3, r0
 8003ee6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003eea:	bfac      	ite	ge
 8003eec:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003eee:	81a3      	strhlt	r3, [r4, #12]
 8003ef0:	bd10      	pop	{r4, pc}

08003ef2 <__swrite>:
 8003ef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ef6:	461f      	mov	r7, r3
 8003ef8:	898b      	ldrh	r3, [r1, #12]
 8003efa:	05db      	lsls	r3, r3, #23
 8003efc:	4605      	mov	r5, r0
 8003efe:	460c      	mov	r4, r1
 8003f00:	4616      	mov	r6, r2
 8003f02:	d505      	bpl.n	8003f10 <__swrite+0x1e>
 8003f04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f08:	2302      	movs	r3, #2
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f000 f8d0 	bl	80040b0 <_lseek_r>
 8003f10:	89a3      	ldrh	r3, [r4, #12]
 8003f12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f16:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f1a:	81a3      	strh	r3, [r4, #12]
 8003f1c:	4632      	mov	r2, r6
 8003f1e:	463b      	mov	r3, r7
 8003f20:	4628      	mov	r0, r5
 8003f22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f26:	f000 b8f7 	b.w	8004118 <_write_r>

08003f2a <__sseek>:
 8003f2a:	b510      	push	{r4, lr}
 8003f2c:	460c      	mov	r4, r1
 8003f2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f32:	f000 f8bd 	bl	80040b0 <_lseek_r>
 8003f36:	1c43      	adds	r3, r0, #1
 8003f38:	89a3      	ldrh	r3, [r4, #12]
 8003f3a:	bf15      	itete	ne
 8003f3c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003f3e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003f42:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003f46:	81a3      	strheq	r3, [r4, #12]
 8003f48:	bf18      	it	ne
 8003f4a:	81a3      	strhne	r3, [r4, #12]
 8003f4c:	bd10      	pop	{r4, pc}

08003f4e <__sclose>:
 8003f4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f52:	f000 b89d 	b.w	8004090 <_close_r>

08003f56 <__swbuf_r>:
 8003f56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f58:	460e      	mov	r6, r1
 8003f5a:	4614      	mov	r4, r2
 8003f5c:	4605      	mov	r5, r0
 8003f5e:	b118      	cbz	r0, 8003f68 <__swbuf_r+0x12>
 8003f60:	6a03      	ldr	r3, [r0, #32]
 8003f62:	b90b      	cbnz	r3, 8003f68 <__swbuf_r+0x12>
 8003f64:	f7ff feda 	bl	8003d1c <__sinit>
 8003f68:	69a3      	ldr	r3, [r4, #24]
 8003f6a:	60a3      	str	r3, [r4, #8]
 8003f6c:	89a3      	ldrh	r3, [r4, #12]
 8003f6e:	071a      	lsls	r2, r3, #28
 8003f70:	d501      	bpl.n	8003f76 <__swbuf_r+0x20>
 8003f72:	6923      	ldr	r3, [r4, #16]
 8003f74:	b943      	cbnz	r3, 8003f88 <__swbuf_r+0x32>
 8003f76:	4621      	mov	r1, r4
 8003f78:	4628      	mov	r0, r5
 8003f7a:	f000 f82b 	bl	8003fd4 <__swsetup_r>
 8003f7e:	b118      	cbz	r0, 8003f88 <__swbuf_r+0x32>
 8003f80:	f04f 37ff 	mov.w	r7, #4294967295
 8003f84:	4638      	mov	r0, r7
 8003f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f88:	6823      	ldr	r3, [r4, #0]
 8003f8a:	6922      	ldr	r2, [r4, #16]
 8003f8c:	1a98      	subs	r0, r3, r2
 8003f8e:	6963      	ldr	r3, [r4, #20]
 8003f90:	b2f6      	uxtb	r6, r6
 8003f92:	4283      	cmp	r3, r0
 8003f94:	4637      	mov	r7, r6
 8003f96:	dc05      	bgt.n	8003fa4 <__swbuf_r+0x4e>
 8003f98:	4621      	mov	r1, r4
 8003f9a:	4628      	mov	r0, r5
 8003f9c:	f000 fe00 	bl	8004ba0 <_fflush_r>
 8003fa0:	2800      	cmp	r0, #0
 8003fa2:	d1ed      	bne.n	8003f80 <__swbuf_r+0x2a>
 8003fa4:	68a3      	ldr	r3, [r4, #8]
 8003fa6:	3b01      	subs	r3, #1
 8003fa8:	60a3      	str	r3, [r4, #8]
 8003faa:	6823      	ldr	r3, [r4, #0]
 8003fac:	1c5a      	adds	r2, r3, #1
 8003fae:	6022      	str	r2, [r4, #0]
 8003fb0:	701e      	strb	r6, [r3, #0]
 8003fb2:	6962      	ldr	r2, [r4, #20]
 8003fb4:	1c43      	adds	r3, r0, #1
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d004      	beq.n	8003fc4 <__swbuf_r+0x6e>
 8003fba:	89a3      	ldrh	r3, [r4, #12]
 8003fbc:	07db      	lsls	r3, r3, #31
 8003fbe:	d5e1      	bpl.n	8003f84 <__swbuf_r+0x2e>
 8003fc0:	2e0a      	cmp	r6, #10
 8003fc2:	d1df      	bne.n	8003f84 <__swbuf_r+0x2e>
 8003fc4:	4621      	mov	r1, r4
 8003fc6:	4628      	mov	r0, r5
 8003fc8:	f000 fdea 	bl	8004ba0 <_fflush_r>
 8003fcc:	2800      	cmp	r0, #0
 8003fce:	d0d9      	beq.n	8003f84 <__swbuf_r+0x2e>
 8003fd0:	e7d6      	b.n	8003f80 <__swbuf_r+0x2a>
	...

08003fd4 <__swsetup_r>:
 8003fd4:	b538      	push	{r3, r4, r5, lr}
 8003fd6:	4b29      	ldr	r3, [pc, #164]	@ (800407c <__swsetup_r+0xa8>)
 8003fd8:	4605      	mov	r5, r0
 8003fda:	6818      	ldr	r0, [r3, #0]
 8003fdc:	460c      	mov	r4, r1
 8003fde:	b118      	cbz	r0, 8003fe8 <__swsetup_r+0x14>
 8003fe0:	6a03      	ldr	r3, [r0, #32]
 8003fe2:	b90b      	cbnz	r3, 8003fe8 <__swsetup_r+0x14>
 8003fe4:	f7ff fe9a 	bl	8003d1c <__sinit>
 8003fe8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fec:	0719      	lsls	r1, r3, #28
 8003fee:	d422      	bmi.n	8004036 <__swsetup_r+0x62>
 8003ff0:	06da      	lsls	r2, r3, #27
 8003ff2:	d407      	bmi.n	8004004 <__swsetup_r+0x30>
 8003ff4:	2209      	movs	r2, #9
 8003ff6:	602a      	str	r2, [r5, #0]
 8003ff8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ffc:	81a3      	strh	r3, [r4, #12]
 8003ffe:	f04f 30ff 	mov.w	r0, #4294967295
 8004002:	e033      	b.n	800406c <__swsetup_r+0x98>
 8004004:	0758      	lsls	r0, r3, #29
 8004006:	d512      	bpl.n	800402e <__swsetup_r+0x5a>
 8004008:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800400a:	b141      	cbz	r1, 800401e <__swsetup_r+0x4a>
 800400c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004010:	4299      	cmp	r1, r3
 8004012:	d002      	beq.n	800401a <__swsetup_r+0x46>
 8004014:	4628      	mov	r0, r5
 8004016:	f000 f8cd 	bl	80041b4 <_free_r>
 800401a:	2300      	movs	r3, #0
 800401c:	6363      	str	r3, [r4, #52]	@ 0x34
 800401e:	89a3      	ldrh	r3, [r4, #12]
 8004020:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004024:	81a3      	strh	r3, [r4, #12]
 8004026:	2300      	movs	r3, #0
 8004028:	6063      	str	r3, [r4, #4]
 800402a:	6923      	ldr	r3, [r4, #16]
 800402c:	6023      	str	r3, [r4, #0]
 800402e:	89a3      	ldrh	r3, [r4, #12]
 8004030:	f043 0308 	orr.w	r3, r3, #8
 8004034:	81a3      	strh	r3, [r4, #12]
 8004036:	6923      	ldr	r3, [r4, #16]
 8004038:	b94b      	cbnz	r3, 800404e <__swsetup_r+0x7a>
 800403a:	89a3      	ldrh	r3, [r4, #12]
 800403c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004040:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004044:	d003      	beq.n	800404e <__swsetup_r+0x7a>
 8004046:	4621      	mov	r1, r4
 8004048:	4628      	mov	r0, r5
 800404a:	f000 fdf7 	bl	8004c3c <__smakebuf_r>
 800404e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004052:	f013 0201 	ands.w	r2, r3, #1
 8004056:	d00a      	beq.n	800406e <__swsetup_r+0x9a>
 8004058:	2200      	movs	r2, #0
 800405a:	60a2      	str	r2, [r4, #8]
 800405c:	6962      	ldr	r2, [r4, #20]
 800405e:	4252      	negs	r2, r2
 8004060:	61a2      	str	r2, [r4, #24]
 8004062:	6922      	ldr	r2, [r4, #16]
 8004064:	b942      	cbnz	r2, 8004078 <__swsetup_r+0xa4>
 8004066:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800406a:	d1c5      	bne.n	8003ff8 <__swsetup_r+0x24>
 800406c:	bd38      	pop	{r3, r4, r5, pc}
 800406e:	0799      	lsls	r1, r3, #30
 8004070:	bf58      	it	pl
 8004072:	6962      	ldrpl	r2, [r4, #20]
 8004074:	60a2      	str	r2, [r4, #8]
 8004076:	e7f4      	b.n	8004062 <__swsetup_r+0x8e>
 8004078:	2000      	movs	r0, #0
 800407a:	e7f7      	b.n	800406c <__swsetup_r+0x98>
 800407c:	20000168 	.word	0x20000168

08004080 <memset>:
 8004080:	4402      	add	r2, r0
 8004082:	4603      	mov	r3, r0
 8004084:	4293      	cmp	r3, r2
 8004086:	d100      	bne.n	800408a <memset+0xa>
 8004088:	4770      	bx	lr
 800408a:	f803 1b01 	strb.w	r1, [r3], #1
 800408e:	e7f9      	b.n	8004084 <memset+0x4>

08004090 <_close_r>:
 8004090:	b538      	push	{r3, r4, r5, lr}
 8004092:	4d06      	ldr	r5, [pc, #24]	@ (80040ac <_close_r+0x1c>)
 8004094:	2300      	movs	r3, #0
 8004096:	4604      	mov	r4, r0
 8004098:	4608      	mov	r0, r1
 800409a:	602b      	str	r3, [r5, #0]
 800409c:	f7fd fbe0 	bl	8001860 <_close>
 80040a0:	1c43      	adds	r3, r0, #1
 80040a2:	d102      	bne.n	80040aa <_close_r+0x1a>
 80040a4:	682b      	ldr	r3, [r5, #0]
 80040a6:	b103      	cbz	r3, 80040aa <_close_r+0x1a>
 80040a8:	6023      	str	r3, [r4, #0]
 80040aa:	bd38      	pop	{r3, r4, r5, pc}
 80040ac:	200004b0 	.word	0x200004b0

080040b0 <_lseek_r>:
 80040b0:	b538      	push	{r3, r4, r5, lr}
 80040b2:	4d07      	ldr	r5, [pc, #28]	@ (80040d0 <_lseek_r+0x20>)
 80040b4:	4604      	mov	r4, r0
 80040b6:	4608      	mov	r0, r1
 80040b8:	4611      	mov	r1, r2
 80040ba:	2200      	movs	r2, #0
 80040bc:	602a      	str	r2, [r5, #0]
 80040be:	461a      	mov	r2, r3
 80040c0:	f7fd fbf5 	bl	80018ae <_lseek>
 80040c4:	1c43      	adds	r3, r0, #1
 80040c6:	d102      	bne.n	80040ce <_lseek_r+0x1e>
 80040c8:	682b      	ldr	r3, [r5, #0]
 80040ca:	b103      	cbz	r3, 80040ce <_lseek_r+0x1e>
 80040cc:	6023      	str	r3, [r4, #0]
 80040ce:	bd38      	pop	{r3, r4, r5, pc}
 80040d0:	200004b0 	.word	0x200004b0

080040d4 <_read_r>:
 80040d4:	b538      	push	{r3, r4, r5, lr}
 80040d6:	4d07      	ldr	r5, [pc, #28]	@ (80040f4 <_read_r+0x20>)
 80040d8:	4604      	mov	r4, r0
 80040da:	4608      	mov	r0, r1
 80040dc:	4611      	mov	r1, r2
 80040de:	2200      	movs	r2, #0
 80040e0:	602a      	str	r2, [r5, #0]
 80040e2:	461a      	mov	r2, r3
 80040e4:	f7fd fb72 	bl	80017cc <_read>
 80040e8:	1c43      	adds	r3, r0, #1
 80040ea:	d102      	bne.n	80040f2 <_read_r+0x1e>
 80040ec:	682b      	ldr	r3, [r5, #0]
 80040ee:	b103      	cbz	r3, 80040f2 <_read_r+0x1e>
 80040f0:	6023      	str	r3, [r4, #0]
 80040f2:	bd38      	pop	{r3, r4, r5, pc}
 80040f4:	200004b0 	.word	0x200004b0

080040f8 <_sbrk_r>:
 80040f8:	b538      	push	{r3, r4, r5, lr}
 80040fa:	4d06      	ldr	r5, [pc, #24]	@ (8004114 <_sbrk_r+0x1c>)
 80040fc:	2300      	movs	r3, #0
 80040fe:	4604      	mov	r4, r0
 8004100:	4608      	mov	r0, r1
 8004102:	602b      	str	r3, [r5, #0]
 8004104:	f7fd fb80 	bl	8001808 <_sbrk>
 8004108:	1c43      	adds	r3, r0, #1
 800410a:	d102      	bne.n	8004112 <_sbrk_r+0x1a>
 800410c:	682b      	ldr	r3, [r5, #0]
 800410e:	b103      	cbz	r3, 8004112 <_sbrk_r+0x1a>
 8004110:	6023      	str	r3, [r4, #0]
 8004112:	bd38      	pop	{r3, r4, r5, pc}
 8004114:	200004b0 	.word	0x200004b0

08004118 <_write_r>:
 8004118:	b538      	push	{r3, r4, r5, lr}
 800411a:	4d07      	ldr	r5, [pc, #28]	@ (8004138 <_write_r+0x20>)
 800411c:	4604      	mov	r4, r0
 800411e:	4608      	mov	r0, r1
 8004120:	4611      	mov	r1, r2
 8004122:	2200      	movs	r2, #0
 8004124:	602a      	str	r2, [r5, #0]
 8004126:	461a      	mov	r2, r3
 8004128:	f7fc ff11 	bl	8000f4e <_write>
 800412c:	1c43      	adds	r3, r0, #1
 800412e:	d102      	bne.n	8004136 <_write_r+0x1e>
 8004130:	682b      	ldr	r3, [r5, #0]
 8004132:	b103      	cbz	r3, 8004136 <_write_r+0x1e>
 8004134:	6023      	str	r3, [r4, #0]
 8004136:	bd38      	pop	{r3, r4, r5, pc}
 8004138:	200004b0 	.word	0x200004b0

0800413c <__errno>:
 800413c:	4b01      	ldr	r3, [pc, #4]	@ (8004144 <__errno+0x8>)
 800413e:	6818      	ldr	r0, [r3, #0]
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	20000168 	.word	0x20000168

08004148 <__libc_init_array>:
 8004148:	b570      	push	{r4, r5, r6, lr}
 800414a:	4d0d      	ldr	r5, [pc, #52]	@ (8004180 <__libc_init_array+0x38>)
 800414c:	4c0d      	ldr	r4, [pc, #52]	@ (8004184 <__libc_init_array+0x3c>)
 800414e:	1b64      	subs	r4, r4, r5
 8004150:	10a4      	asrs	r4, r4, #2
 8004152:	2600      	movs	r6, #0
 8004154:	42a6      	cmp	r6, r4
 8004156:	d109      	bne.n	800416c <__libc_init_array+0x24>
 8004158:	4d0b      	ldr	r5, [pc, #44]	@ (8004188 <__libc_init_array+0x40>)
 800415a:	4c0c      	ldr	r4, [pc, #48]	@ (800418c <__libc_init_array+0x44>)
 800415c:	f000 fe1c 	bl	8004d98 <_init>
 8004160:	1b64      	subs	r4, r4, r5
 8004162:	10a4      	asrs	r4, r4, #2
 8004164:	2600      	movs	r6, #0
 8004166:	42a6      	cmp	r6, r4
 8004168:	d105      	bne.n	8004176 <__libc_init_array+0x2e>
 800416a:	bd70      	pop	{r4, r5, r6, pc}
 800416c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004170:	4798      	blx	r3
 8004172:	3601      	adds	r6, #1
 8004174:	e7ee      	b.n	8004154 <__libc_init_array+0xc>
 8004176:	f855 3b04 	ldr.w	r3, [r5], #4
 800417a:	4798      	blx	r3
 800417c:	3601      	adds	r6, #1
 800417e:	e7f2      	b.n	8004166 <__libc_init_array+0x1e>
 8004180:	08004f50 	.word	0x08004f50
 8004184:	08004f50 	.word	0x08004f50
 8004188:	08004f50 	.word	0x08004f50
 800418c:	08004f54 	.word	0x08004f54

08004190 <__retarget_lock_init_recursive>:
 8004190:	4770      	bx	lr

08004192 <__retarget_lock_acquire_recursive>:
 8004192:	4770      	bx	lr

08004194 <__retarget_lock_release_recursive>:
 8004194:	4770      	bx	lr

08004196 <memcpy>:
 8004196:	440a      	add	r2, r1
 8004198:	4291      	cmp	r1, r2
 800419a:	f100 33ff 	add.w	r3, r0, #4294967295
 800419e:	d100      	bne.n	80041a2 <memcpy+0xc>
 80041a0:	4770      	bx	lr
 80041a2:	b510      	push	{r4, lr}
 80041a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80041ac:	4291      	cmp	r1, r2
 80041ae:	d1f9      	bne.n	80041a4 <memcpy+0xe>
 80041b0:	bd10      	pop	{r4, pc}
	...

080041b4 <_free_r>:
 80041b4:	b538      	push	{r3, r4, r5, lr}
 80041b6:	4605      	mov	r5, r0
 80041b8:	2900      	cmp	r1, #0
 80041ba:	d041      	beq.n	8004240 <_free_r+0x8c>
 80041bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041c0:	1f0c      	subs	r4, r1, #4
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	bfb8      	it	lt
 80041c6:	18e4      	addlt	r4, r4, r3
 80041c8:	f7ff fd10 	bl	8003bec <__malloc_lock>
 80041cc:	4a1d      	ldr	r2, [pc, #116]	@ (8004244 <_free_r+0x90>)
 80041ce:	6813      	ldr	r3, [r2, #0]
 80041d0:	b933      	cbnz	r3, 80041e0 <_free_r+0x2c>
 80041d2:	6063      	str	r3, [r4, #4]
 80041d4:	6014      	str	r4, [r2, #0]
 80041d6:	4628      	mov	r0, r5
 80041d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041dc:	f7ff bd0c 	b.w	8003bf8 <__malloc_unlock>
 80041e0:	42a3      	cmp	r3, r4
 80041e2:	d908      	bls.n	80041f6 <_free_r+0x42>
 80041e4:	6820      	ldr	r0, [r4, #0]
 80041e6:	1821      	adds	r1, r4, r0
 80041e8:	428b      	cmp	r3, r1
 80041ea:	bf01      	itttt	eq
 80041ec:	6819      	ldreq	r1, [r3, #0]
 80041ee:	685b      	ldreq	r3, [r3, #4]
 80041f0:	1809      	addeq	r1, r1, r0
 80041f2:	6021      	streq	r1, [r4, #0]
 80041f4:	e7ed      	b.n	80041d2 <_free_r+0x1e>
 80041f6:	461a      	mov	r2, r3
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	b10b      	cbz	r3, 8004200 <_free_r+0x4c>
 80041fc:	42a3      	cmp	r3, r4
 80041fe:	d9fa      	bls.n	80041f6 <_free_r+0x42>
 8004200:	6811      	ldr	r1, [r2, #0]
 8004202:	1850      	adds	r0, r2, r1
 8004204:	42a0      	cmp	r0, r4
 8004206:	d10b      	bne.n	8004220 <_free_r+0x6c>
 8004208:	6820      	ldr	r0, [r4, #0]
 800420a:	4401      	add	r1, r0
 800420c:	1850      	adds	r0, r2, r1
 800420e:	4283      	cmp	r3, r0
 8004210:	6011      	str	r1, [r2, #0]
 8004212:	d1e0      	bne.n	80041d6 <_free_r+0x22>
 8004214:	6818      	ldr	r0, [r3, #0]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	6053      	str	r3, [r2, #4]
 800421a:	4408      	add	r0, r1
 800421c:	6010      	str	r0, [r2, #0]
 800421e:	e7da      	b.n	80041d6 <_free_r+0x22>
 8004220:	d902      	bls.n	8004228 <_free_r+0x74>
 8004222:	230c      	movs	r3, #12
 8004224:	602b      	str	r3, [r5, #0]
 8004226:	e7d6      	b.n	80041d6 <_free_r+0x22>
 8004228:	6820      	ldr	r0, [r4, #0]
 800422a:	1821      	adds	r1, r4, r0
 800422c:	428b      	cmp	r3, r1
 800422e:	bf04      	itt	eq
 8004230:	6819      	ldreq	r1, [r3, #0]
 8004232:	685b      	ldreq	r3, [r3, #4]
 8004234:	6063      	str	r3, [r4, #4]
 8004236:	bf04      	itt	eq
 8004238:	1809      	addeq	r1, r1, r0
 800423a:	6021      	streq	r1, [r4, #0]
 800423c:	6054      	str	r4, [r2, #4]
 800423e:	e7ca      	b.n	80041d6 <_free_r+0x22>
 8004240:	bd38      	pop	{r3, r4, r5, pc}
 8004242:	bf00      	nop
 8004244:	20000370 	.word	0x20000370

08004248 <__ssputs_r>:
 8004248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800424c:	688e      	ldr	r6, [r1, #8]
 800424e:	461f      	mov	r7, r3
 8004250:	42be      	cmp	r6, r7
 8004252:	680b      	ldr	r3, [r1, #0]
 8004254:	4682      	mov	sl, r0
 8004256:	460c      	mov	r4, r1
 8004258:	4690      	mov	r8, r2
 800425a:	d82d      	bhi.n	80042b8 <__ssputs_r+0x70>
 800425c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004260:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004264:	d026      	beq.n	80042b4 <__ssputs_r+0x6c>
 8004266:	6965      	ldr	r5, [r4, #20]
 8004268:	6909      	ldr	r1, [r1, #16]
 800426a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800426e:	eba3 0901 	sub.w	r9, r3, r1
 8004272:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004276:	1c7b      	adds	r3, r7, #1
 8004278:	444b      	add	r3, r9
 800427a:	106d      	asrs	r5, r5, #1
 800427c:	429d      	cmp	r5, r3
 800427e:	bf38      	it	cc
 8004280:	461d      	movcc	r5, r3
 8004282:	0553      	lsls	r3, r2, #21
 8004284:	d527      	bpl.n	80042d6 <__ssputs_r+0x8e>
 8004286:	4629      	mov	r1, r5
 8004288:	f7ff fc30 	bl	8003aec <_malloc_r>
 800428c:	4606      	mov	r6, r0
 800428e:	b360      	cbz	r0, 80042ea <__ssputs_r+0xa2>
 8004290:	6921      	ldr	r1, [r4, #16]
 8004292:	464a      	mov	r2, r9
 8004294:	f7ff ff7f 	bl	8004196 <memcpy>
 8004298:	89a3      	ldrh	r3, [r4, #12]
 800429a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800429e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042a2:	81a3      	strh	r3, [r4, #12]
 80042a4:	6126      	str	r6, [r4, #16]
 80042a6:	6165      	str	r5, [r4, #20]
 80042a8:	444e      	add	r6, r9
 80042aa:	eba5 0509 	sub.w	r5, r5, r9
 80042ae:	6026      	str	r6, [r4, #0]
 80042b0:	60a5      	str	r5, [r4, #8]
 80042b2:	463e      	mov	r6, r7
 80042b4:	42be      	cmp	r6, r7
 80042b6:	d900      	bls.n	80042ba <__ssputs_r+0x72>
 80042b8:	463e      	mov	r6, r7
 80042ba:	6820      	ldr	r0, [r4, #0]
 80042bc:	4632      	mov	r2, r6
 80042be:	4641      	mov	r1, r8
 80042c0:	f000 fcf8 	bl	8004cb4 <memmove>
 80042c4:	68a3      	ldr	r3, [r4, #8]
 80042c6:	1b9b      	subs	r3, r3, r6
 80042c8:	60a3      	str	r3, [r4, #8]
 80042ca:	6823      	ldr	r3, [r4, #0]
 80042cc:	4433      	add	r3, r6
 80042ce:	6023      	str	r3, [r4, #0]
 80042d0:	2000      	movs	r0, #0
 80042d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042d6:	462a      	mov	r2, r5
 80042d8:	f000 fd28 	bl	8004d2c <_realloc_r>
 80042dc:	4606      	mov	r6, r0
 80042de:	2800      	cmp	r0, #0
 80042e0:	d1e0      	bne.n	80042a4 <__ssputs_r+0x5c>
 80042e2:	6921      	ldr	r1, [r4, #16]
 80042e4:	4650      	mov	r0, sl
 80042e6:	f7ff ff65 	bl	80041b4 <_free_r>
 80042ea:	230c      	movs	r3, #12
 80042ec:	f8ca 3000 	str.w	r3, [sl]
 80042f0:	89a3      	ldrh	r3, [r4, #12]
 80042f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80042f6:	81a3      	strh	r3, [r4, #12]
 80042f8:	f04f 30ff 	mov.w	r0, #4294967295
 80042fc:	e7e9      	b.n	80042d2 <__ssputs_r+0x8a>
	...

08004300 <_svfiprintf_r>:
 8004300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004304:	4698      	mov	r8, r3
 8004306:	898b      	ldrh	r3, [r1, #12]
 8004308:	061b      	lsls	r3, r3, #24
 800430a:	b09d      	sub	sp, #116	@ 0x74
 800430c:	4607      	mov	r7, r0
 800430e:	460d      	mov	r5, r1
 8004310:	4614      	mov	r4, r2
 8004312:	d510      	bpl.n	8004336 <_svfiprintf_r+0x36>
 8004314:	690b      	ldr	r3, [r1, #16]
 8004316:	b973      	cbnz	r3, 8004336 <_svfiprintf_r+0x36>
 8004318:	2140      	movs	r1, #64	@ 0x40
 800431a:	f7ff fbe7 	bl	8003aec <_malloc_r>
 800431e:	6028      	str	r0, [r5, #0]
 8004320:	6128      	str	r0, [r5, #16]
 8004322:	b930      	cbnz	r0, 8004332 <_svfiprintf_r+0x32>
 8004324:	230c      	movs	r3, #12
 8004326:	603b      	str	r3, [r7, #0]
 8004328:	f04f 30ff 	mov.w	r0, #4294967295
 800432c:	b01d      	add	sp, #116	@ 0x74
 800432e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004332:	2340      	movs	r3, #64	@ 0x40
 8004334:	616b      	str	r3, [r5, #20]
 8004336:	2300      	movs	r3, #0
 8004338:	9309      	str	r3, [sp, #36]	@ 0x24
 800433a:	2320      	movs	r3, #32
 800433c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004340:	f8cd 800c 	str.w	r8, [sp, #12]
 8004344:	2330      	movs	r3, #48	@ 0x30
 8004346:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80044e4 <_svfiprintf_r+0x1e4>
 800434a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800434e:	f04f 0901 	mov.w	r9, #1
 8004352:	4623      	mov	r3, r4
 8004354:	469a      	mov	sl, r3
 8004356:	f813 2b01 	ldrb.w	r2, [r3], #1
 800435a:	b10a      	cbz	r2, 8004360 <_svfiprintf_r+0x60>
 800435c:	2a25      	cmp	r2, #37	@ 0x25
 800435e:	d1f9      	bne.n	8004354 <_svfiprintf_r+0x54>
 8004360:	ebba 0b04 	subs.w	fp, sl, r4
 8004364:	d00b      	beq.n	800437e <_svfiprintf_r+0x7e>
 8004366:	465b      	mov	r3, fp
 8004368:	4622      	mov	r2, r4
 800436a:	4629      	mov	r1, r5
 800436c:	4638      	mov	r0, r7
 800436e:	f7ff ff6b 	bl	8004248 <__ssputs_r>
 8004372:	3001      	adds	r0, #1
 8004374:	f000 80a7 	beq.w	80044c6 <_svfiprintf_r+0x1c6>
 8004378:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800437a:	445a      	add	r2, fp
 800437c:	9209      	str	r2, [sp, #36]	@ 0x24
 800437e:	f89a 3000 	ldrb.w	r3, [sl]
 8004382:	2b00      	cmp	r3, #0
 8004384:	f000 809f 	beq.w	80044c6 <_svfiprintf_r+0x1c6>
 8004388:	2300      	movs	r3, #0
 800438a:	f04f 32ff 	mov.w	r2, #4294967295
 800438e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004392:	f10a 0a01 	add.w	sl, sl, #1
 8004396:	9304      	str	r3, [sp, #16]
 8004398:	9307      	str	r3, [sp, #28]
 800439a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800439e:	931a      	str	r3, [sp, #104]	@ 0x68
 80043a0:	4654      	mov	r4, sl
 80043a2:	2205      	movs	r2, #5
 80043a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043a8:	484e      	ldr	r0, [pc, #312]	@ (80044e4 <_svfiprintf_r+0x1e4>)
 80043aa:	f7fb ff19 	bl	80001e0 <memchr>
 80043ae:	9a04      	ldr	r2, [sp, #16]
 80043b0:	b9d8      	cbnz	r0, 80043ea <_svfiprintf_r+0xea>
 80043b2:	06d0      	lsls	r0, r2, #27
 80043b4:	bf44      	itt	mi
 80043b6:	2320      	movmi	r3, #32
 80043b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80043bc:	0711      	lsls	r1, r2, #28
 80043be:	bf44      	itt	mi
 80043c0:	232b      	movmi	r3, #43	@ 0x2b
 80043c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80043c6:	f89a 3000 	ldrb.w	r3, [sl]
 80043ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80043cc:	d015      	beq.n	80043fa <_svfiprintf_r+0xfa>
 80043ce:	9a07      	ldr	r2, [sp, #28]
 80043d0:	4654      	mov	r4, sl
 80043d2:	2000      	movs	r0, #0
 80043d4:	f04f 0c0a 	mov.w	ip, #10
 80043d8:	4621      	mov	r1, r4
 80043da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80043de:	3b30      	subs	r3, #48	@ 0x30
 80043e0:	2b09      	cmp	r3, #9
 80043e2:	d94b      	bls.n	800447c <_svfiprintf_r+0x17c>
 80043e4:	b1b0      	cbz	r0, 8004414 <_svfiprintf_r+0x114>
 80043e6:	9207      	str	r2, [sp, #28]
 80043e8:	e014      	b.n	8004414 <_svfiprintf_r+0x114>
 80043ea:	eba0 0308 	sub.w	r3, r0, r8
 80043ee:	fa09 f303 	lsl.w	r3, r9, r3
 80043f2:	4313      	orrs	r3, r2
 80043f4:	9304      	str	r3, [sp, #16]
 80043f6:	46a2      	mov	sl, r4
 80043f8:	e7d2      	b.n	80043a0 <_svfiprintf_r+0xa0>
 80043fa:	9b03      	ldr	r3, [sp, #12]
 80043fc:	1d19      	adds	r1, r3, #4
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	9103      	str	r1, [sp, #12]
 8004402:	2b00      	cmp	r3, #0
 8004404:	bfbb      	ittet	lt
 8004406:	425b      	neglt	r3, r3
 8004408:	f042 0202 	orrlt.w	r2, r2, #2
 800440c:	9307      	strge	r3, [sp, #28]
 800440e:	9307      	strlt	r3, [sp, #28]
 8004410:	bfb8      	it	lt
 8004412:	9204      	strlt	r2, [sp, #16]
 8004414:	7823      	ldrb	r3, [r4, #0]
 8004416:	2b2e      	cmp	r3, #46	@ 0x2e
 8004418:	d10a      	bne.n	8004430 <_svfiprintf_r+0x130>
 800441a:	7863      	ldrb	r3, [r4, #1]
 800441c:	2b2a      	cmp	r3, #42	@ 0x2a
 800441e:	d132      	bne.n	8004486 <_svfiprintf_r+0x186>
 8004420:	9b03      	ldr	r3, [sp, #12]
 8004422:	1d1a      	adds	r2, r3, #4
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	9203      	str	r2, [sp, #12]
 8004428:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800442c:	3402      	adds	r4, #2
 800442e:	9305      	str	r3, [sp, #20]
 8004430:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80044f4 <_svfiprintf_r+0x1f4>
 8004434:	7821      	ldrb	r1, [r4, #0]
 8004436:	2203      	movs	r2, #3
 8004438:	4650      	mov	r0, sl
 800443a:	f7fb fed1 	bl	80001e0 <memchr>
 800443e:	b138      	cbz	r0, 8004450 <_svfiprintf_r+0x150>
 8004440:	9b04      	ldr	r3, [sp, #16]
 8004442:	eba0 000a 	sub.w	r0, r0, sl
 8004446:	2240      	movs	r2, #64	@ 0x40
 8004448:	4082      	lsls	r2, r0
 800444a:	4313      	orrs	r3, r2
 800444c:	3401      	adds	r4, #1
 800444e:	9304      	str	r3, [sp, #16]
 8004450:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004454:	4824      	ldr	r0, [pc, #144]	@ (80044e8 <_svfiprintf_r+0x1e8>)
 8004456:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800445a:	2206      	movs	r2, #6
 800445c:	f7fb fec0 	bl	80001e0 <memchr>
 8004460:	2800      	cmp	r0, #0
 8004462:	d036      	beq.n	80044d2 <_svfiprintf_r+0x1d2>
 8004464:	4b21      	ldr	r3, [pc, #132]	@ (80044ec <_svfiprintf_r+0x1ec>)
 8004466:	bb1b      	cbnz	r3, 80044b0 <_svfiprintf_r+0x1b0>
 8004468:	9b03      	ldr	r3, [sp, #12]
 800446a:	3307      	adds	r3, #7
 800446c:	f023 0307 	bic.w	r3, r3, #7
 8004470:	3308      	adds	r3, #8
 8004472:	9303      	str	r3, [sp, #12]
 8004474:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004476:	4433      	add	r3, r6
 8004478:	9309      	str	r3, [sp, #36]	@ 0x24
 800447a:	e76a      	b.n	8004352 <_svfiprintf_r+0x52>
 800447c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004480:	460c      	mov	r4, r1
 8004482:	2001      	movs	r0, #1
 8004484:	e7a8      	b.n	80043d8 <_svfiprintf_r+0xd8>
 8004486:	2300      	movs	r3, #0
 8004488:	3401      	adds	r4, #1
 800448a:	9305      	str	r3, [sp, #20]
 800448c:	4619      	mov	r1, r3
 800448e:	f04f 0c0a 	mov.w	ip, #10
 8004492:	4620      	mov	r0, r4
 8004494:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004498:	3a30      	subs	r2, #48	@ 0x30
 800449a:	2a09      	cmp	r2, #9
 800449c:	d903      	bls.n	80044a6 <_svfiprintf_r+0x1a6>
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d0c6      	beq.n	8004430 <_svfiprintf_r+0x130>
 80044a2:	9105      	str	r1, [sp, #20]
 80044a4:	e7c4      	b.n	8004430 <_svfiprintf_r+0x130>
 80044a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80044aa:	4604      	mov	r4, r0
 80044ac:	2301      	movs	r3, #1
 80044ae:	e7f0      	b.n	8004492 <_svfiprintf_r+0x192>
 80044b0:	ab03      	add	r3, sp, #12
 80044b2:	9300      	str	r3, [sp, #0]
 80044b4:	462a      	mov	r2, r5
 80044b6:	4b0e      	ldr	r3, [pc, #56]	@ (80044f0 <_svfiprintf_r+0x1f0>)
 80044b8:	a904      	add	r1, sp, #16
 80044ba:	4638      	mov	r0, r7
 80044bc:	f3af 8000 	nop.w
 80044c0:	1c42      	adds	r2, r0, #1
 80044c2:	4606      	mov	r6, r0
 80044c4:	d1d6      	bne.n	8004474 <_svfiprintf_r+0x174>
 80044c6:	89ab      	ldrh	r3, [r5, #12]
 80044c8:	065b      	lsls	r3, r3, #25
 80044ca:	f53f af2d 	bmi.w	8004328 <_svfiprintf_r+0x28>
 80044ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80044d0:	e72c      	b.n	800432c <_svfiprintf_r+0x2c>
 80044d2:	ab03      	add	r3, sp, #12
 80044d4:	9300      	str	r3, [sp, #0]
 80044d6:	462a      	mov	r2, r5
 80044d8:	4b05      	ldr	r3, [pc, #20]	@ (80044f0 <_svfiprintf_r+0x1f0>)
 80044da:	a904      	add	r1, sp, #16
 80044dc:	4638      	mov	r0, r7
 80044de:	f000 f9bb 	bl	8004858 <_printf_i>
 80044e2:	e7ed      	b.n	80044c0 <_svfiprintf_r+0x1c0>
 80044e4:	08004f14 	.word	0x08004f14
 80044e8:	08004f1e 	.word	0x08004f1e
 80044ec:	00000000 	.word	0x00000000
 80044f0:	08004249 	.word	0x08004249
 80044f4:	08004f1a 	.word	0x08004f1a

080044f8 <__sfputc_r>:
 80044f8:	6893      	ldr	r3, [r2, #8]
 80044fa:	3b01      	subs	r3, #1
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	b410      	push	{r4}
 8004500:	6093      	str	r3, [r2, #8]
 8004502:	da08      	bge.n	8004516 <__sfputc_r+0x1e>
 8004504:	6994      	ldr	r4, [r2, #24]
 8004506:	42a3      	cmp	r3, r4
 8004508:	db01      	blt.n	800450e <__sfputc_r+0x16>
 800450a:	290a      	cmp	r1, #10
 800450c:	d103      	bne.n	8004516 <__sfputc_r+0x1e>
 800450e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004512:	f7ff bd20 	b.w	8003f56 <__swbuf_r>
 8004516:	6813      	ldr	r3, [r2, #0]
 8004518:	1c58      	adds	r0, r3, #1
 800451a:	6010      	str	r0, [r2, #0]
 800451c:	7019      	strb	r1, [r3, #0]
 800451e:	4608      	mov	r0, r1
 8004520:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004524:	4770      	bx	lr

08004526 <__sfputs_r>:
 8004526:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004528:	4606      	mov	r6, r0
 800452a:	460f      	mov	r7, r1
 800452c:	4614      	mov	r4, r2
 800452e:	18d5      	adds	r5, r2, r3
 8004530:	42ac      	cmp	r4, r5
 8004532:	d101      	bne.n	8004538 <__sfputs_r+0x12>
 8004534:	2000      	movs	r0, #0
 8004536:	e007      	b.n	8004548 <__sfputs_r+0x22>
 8004538:	f814 1b01 	ldrb.w	r1, [r4], #1
 800453c:	463a      	mov	r2, r7
 800453e:	4630      	mov	r0, r6
 8004540:	f7ff ffda 	bl	80044f8 <__sfputc_r>
 8004544:	1c43      	adds	r3, r0, #1
 8004546:	d1f3      	bne.n	8004530 <__sfputs_r+0xa>
 8004548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800454c <_vfiprintf_r>:
 800454c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004550:	460d      	mov	r5, r1
 8004552:	b09d      	sub	sp, #116	@ 0x74
 8004554:	4614      	mov	r4, r2
 8004556:	4698      	mov	r8, r3
 8004558:	4606      	mov	r6, r0
 800455a:	b118      	cbz	r0, 8004564 <_vfiprintf_r+0x18>
 800455c:	6a03      	ldr	r3, [r0, #32]
 800455e:	b90b      	cbnz	r3, 8004564 <_vfiprintf_r+0x18>
 8004560:	f7ff fbdc 	bl	8003d1c <__sinit>
 8004564:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004566:	07d9      	lsls	r1, r3, #31
 8004568:	d405      	bmi.n	8004576 <_vfiprintf_r+0x2a>
 800456a:	89ab      	ldrh	r3, [r5, #12]
 800456c:	059a      	lsls	r2, r3, #22
 800456e:	d402      	bmi.n	8004576 <_vfiprintf_r+0x2a>
 8004570:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004572:	f7ff fe0e 	bl	8004192 <__retarget_lock_acquire_recursive>
 8004576:	89ab      	ldrh	r3, [r5, #12]
 8004578:	071b      	lsls	r3, r3, #28
 800457a:	d501      	bpl.n	8004580 <_vfiprintf_r+0x34>
 800457c:	692b      	ldr	r3, [r5, #16]
 800457e:	b99b      	cbnz	r3, 80045a8 <_vfiprintf_r+0x5c>
 8004580:	4629      	mov	r1, r5
 8004582:	4630      	mov	r0, r6
 8004584:	f7ff fd26 	bl	8003fd4 <__swsetup_r>
 8004588:	b170      	cbz	r0, 80045a8 <_vfiprintf_r+0x5c>
 800458a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800458c:	07dc      	lsls	r4, r3, #31
 800458e:	d504      	bpl.n	800459a <_vfiprintf_r+0x4e>
 8004590:	f04f 30ff 	mov.w	r0, #4294967295
 8004594:	b01d      	add	sp, #116	@ 0x74
 8004596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800459a:	89ab      	ldrh	r3, [r5, #12]
 800459c:	0598      	lsls	r0, r3, #22
 800459e:	d4f7      	bmi.n	8004590 <_vfiprintf_r+0x44>
 80045a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80045a2:	f7ff fdf7 	bl	8004194 <__retarget_lock_release_recursive>
 80045a6:	e7f3      	b.n	8004590 <_vfiprintf_r+0x44>
 80045a8:	2300      	movs	r3, #0
 80045aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80045ac:	2320      	movs	r3, #32
 80045ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80045b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80045b6:	2330      	movs	r3, #48	@ 0x30
 80045b8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004768 <_vfiprintf_r+0x21c>
 80045bc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80045c0:	f04f 0901 	mov.w	r9, #1
 80045c4:	4623      	mov	r3, r4
 80045c6:	469a      	mov	sl, r3
 80045c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80045cc:	b10a      	cbz	r2, 80045d2 <_vfiprintf_r+0x86>
 80045ce:	2a25      	cmp	r2, #37	@ 0x25
 80045d0:	d1f9      	bne.n	80045c6 <_vfiprintf_r+0x7a>
 80045d2:	ebba 0b04 	subs.w	fp, sl, r4
 80045d6:	d00b      	beq.n	80045f0 <_vfiprintf_r+0xa4>
 80045d8:	465b      	mov	r3, fp
 80045da:	4622      	mov	r2, r4
 80045dc:	4629      	mov	r1, r5
 80045de:	4630      	mov	r0, r6
 80045e0:	f7ff ffa1 	bl	8004526 <__sfputs_r>
 80045e4:	3001      	adds	r0, #1
 80045e6:	f000 80a7 	beq.w	8004738 <_vfiprintf_r+0x1ec>
 80045ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80045ec:	445a      	add	r2, fp
 80045ee:	9209      	str	r2, [sp, #36]	@ 0x24
 80045f0:	f89a 3000 	ldrb.w	r3, [sl]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	f000 809f 	beq.w	8004738 <_vfiprintf_r+0x1ec>
 80045fa:	2300      	movs	r3, #0
 80045fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004600:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004604:	f10a 0a01 	add.w	sl, sl, #1
 8004608:	9304      	str	r3, [sp, #16]
 800460a:	9307      	str	r3, [sp, #28]
 800460c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004610:	931a      	str	r3, [sp, #104]	@ 0x68
 8004612:	4654      	mov	r4, sl
 8004614:	2205      	movs	r2, #5
 8004616:	f814 1b01 	ldrb.w	r1, [r4], #1
 800461a:	4853      	ldr	r0, [pc, #332]	@ (8004768 <_vfiprintf_r+0x21c>)
 800461c:	f7fb fde0 	bl	80001e0 <memchr>
 8004620:	9a04      	ldr	r2, [sp, #16]
 8004622:	b9d8      	cbnz	r0, 800465c <_vfiprintf_r+0x110>
 8004624:	06d1      	lsls	r1, r2, #27
 8004626:	bf44      	itt	mi
 8004628:	2320      	movmi	r3, #32
 800462a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800462e:	0713      	lsls	r3, r2, #28
 8004630:	bf44      	itt	mi
 8004632:	232b      	movmi	r3, #43	@ 0x2b
 8004634:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004638:	f89a 3000 	ldrb.w	r3, [sl]
 800463c:	2b2a      	cmp	r3, #42	@ 0x2a
 800463e:	d015      	beq.n	800466c <_vfiprintf_r+0x120>
 8004640:	9a07      	ldr	r2, [sp, #28]
 8004642:	4654      	mov	r4, sl
 8004644:	2000      	movs	r0, #0
 8004646:	f04f 0c0a 	mov.w	ip, #10
 800464a:	4621      	mov	r1, r4
 800464c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004650:	3b30      	subs	r3, #48	@ 0x30
 8004652:	2b09      	cmp	r3, #9
 8004654:	d94b      	bls.n	80046ee <_vfiprintf_r+0x1a2>
 8004656:	b1b0      	cbz	r0, 8004686 <_vfiprintf_r+0x13a>
 8004658:	9207      	str	r2, [sp, #28]
 800465a:	e014      	b.n	8004686 <_vfiprintf_r+0x13a>
 800465c:	eba0 0308 	sub.w	r3, r0, r8
 8004660:	fa09 f303 	lsl.w	r3, r9, r3
 8004664:	4313      	orrs	r3, r2
 8004666:	9304      	str	r3, [sp, #16]
 8004668:	46a2      	mov	sl, r4
 800466a:	e7d2      	b.n	8004612 <_vfiprintf_r+0xc6>
 800466c:	9b03      	ldr	r3, [sp, #12]
 800466e:	1d19      	adds	r1, r3, #4
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	9103      	str	r1, [sp, #12]
 8004674:	2b00      	cmp	r3, #0
 8004676:	bfbb      	ittet	lt
 8004678:	425b      	neglt	r3, r3
 800467a:	f042 0202 	orrlt.w	r2, r2, #2
 800467e:	9307      	strge	r3, [sp, #28]
 8004680:	9307      	strlt	r3, [sp, #28]
 8004682:	bfb8      	it	lt
 8004684:	9204      	strlt	r2, [sp, #16]
 8004686:	7823      	ldrb	r3, [r4, #0]
 8004688:	2b2e      	cmp	r3, #46	@ 0x2e
 800468a:	d10a      	bne.n	80046a2 <_vfiprintf_r+0x156>
 800468c:	7863      	ldrb	r3, [r4, #1]
 800468e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004690:	d132      	bne.n	80046f8 <_vfiprintf_r+0x1ac>
 8004692:	9b03      	ldr	r3, [sp, #12]
 8004694:	1d1a      	adds	r2, r3, #4
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	9203      	str	r2, [sp, #12]
 800469a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800469e:	3402      	adds	r4, #2
 80046a0:	9305      	str	r3, [sp, #20]
 80046a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004778 <_vfiprintf_r+0x22c>
 80046a6:	7821      	ldrb	r1, [r4, #0]
 80046a8:	2203      	movs	r2, #3
 80046aa:	4650      	mov	r0, sl
 80046ac:	f7fb fd98 	bl	80001e0 <memchr>
 80046b0:	b138      	cbz	r0, 80046c2 <_vfiprintf_r+0x176>
 80046b2:	9b04      	ldr	r3, [sp, #16]
 80046b4:	eba0 000a 	sub.w	r0, r0, sl
 80046b8:	2240      	movs	r2, #64	@ 0x40
 80046ba:	4082      	lsls	r2, r0
 80046bc:	4313      	orrs	r3, r2
 80046be:	3401      	adds	r4, #1
 80046c0:	9304      	str	r3, [sp, #16]
 80046c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046c6:	4829      	ldr	r0, [pc, #164]	@ (800476c <_vfiprintf_r+0x220>)
 80046c8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80046cc:	2206      	movs	r2, #6
 80046ce:	f7fb fd87 	bl	80001e0 <memchr>
 80046d2:	2800      	cmp	r0, #0
 80046d4:	d03f      	beq.n	8004756 <_vfiprintf_r+0x20a>
 80046d6:	4b26      	ldr	r3, [pc, #152]	@ (8004770 <_vfiprintf_r+0x224>)
 80046d8:	bb1b      	cbnz	r3, 8004722 <_vfiprintf_r+0x1d6>
 80046da:	9b03      	ldr	r3, [sp, #12]
 80046dc:	3307      	adds	r3, #7
 80046de:	f023 0307 	bic.w	r3, r3, #7
 80046e2:	3308      	adds	r3, #8
 80046e4:	9303      	str	r3, [sp, #12]
 80046e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80046e8:	443b      	add	r3, r7
 80046ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80046ec:	e76a      	b.n	80045c4 <_vfiprintf_r+0x78>
 80046ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80046f2:	460c      	mov	r4, r1
 80046f4:	2001      	movs	r0, #1
 80046f6:	e7a8      	b.n	800464a <_vfiprintf_r+0xfe>
 80046f8:	2300      	movs	r3, #0
 80046fa:	3401      	adds	r4, #1
 80046fc:	9305      	str	r3, [sp, #20]
 80046fe:	4619      	mov	r1, r3
 8004700:	f04f 0c0a 	mov.w	ip, #10
 8004704:	4620      	mov	r0, r4
 8004706:	f810 2b01 	ldrb.w	r2, [r0], #1
 800470a:	3a30      	subs	r2, #48	@ 0x30
 800470c:	2a09      	cmp	r2, #9
 800470e:	d903      	bls.n	8004718 <_vfiprintf_r+0x1cc>
 8004710:	2b00      	cmp	r3, #0
 8004712:	d0c6      	beq.n	80046a2 <_vfiprintf_r+0x156>
 8004714:	9105      	str	r1, [sp, #20]
 8004716:	e7c4      	b.n	80046a2 <_vfiprintf_r+0x156>
 8004718:	fb0c 2101 	mla	r1, ip, r1, r2
 800471c:	4604      	mov	r4, r0
 800471e:	2301      	movs	r3, #1
 8004720:	e7f0      	b.n	8004704 <_vfiprintf_r+0x1b8>
 8004722:	ab03      	add	r3, sp, #12
 8004724:	9300      	str	r3, [sp, #0]
 8004726:	462a      	mov	r2, r5
 8004728:	4b12      	ldr	r3, [pc, #72]	@ (8004774 <_vfiprintf_r+0x228>)
 800472a:	a904      	add	r1, sp, #16
 800472c:	4630      	mov	r0, r6
 800472e:	f3af 8000 	nop.w
 8004732:	4607      	mov	r7, r0
 8004734:	1c78      	adds	r0, r7, #1
 8004736:	d1d6      	bne.n	80046e6 <_vfiprintf_r+0x19a>
 8004738:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800473a:	07d9      	lsls	r1, r3, #31
 800473c:	d405      	bmi.n	800474a <_vfiprintf_r+0x1fe>
 800473e:	89ab      	ldrh	r3, [r5, #12]
 8004740:	059a      	lsls	r2, r3, #22
 8004742:	d402      	bmi.n	800474a <_vfiprintf_r+0x1fe>
 8004744:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004746:	f7ff fd25 	bl	8004194 <__retarget_lock_release_recursive>
 800474a:	89ab      	ldrh	r3, [r5, #12]
 800474c:	065b      	lsls	r3, r3, #25
 800474e:	f53f af1f 	bmi.w	8004590 <_vfiprintf_r+0x44>
 8004752:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004754:	e71e      	b.n	8004594 <_vfiprintf_r+0x48>
 8004756:	ab03      	add	r3, sp, #12
 8004758:	9300      	str	r3, [sp, #0]
 800475a:	462a      	mov	r2, r5
 800475c:	4b05      	ldr	r3, [pc, #20]	@ (8004774 <_vfiprintf_r+0x228>)
 800475e:	a904      	add	r1, sp, #16
 8004760:	4630      	mov	r0, r6
 8004762:	f000 f879 	bl	8004858 <_printf_i>
 8004766:	e7e4      	b.n	8004732 <_vfiprintf_r+0x1e6>
 8004768:	08004f14 	.word	0x08004f14
 800476c:	08004f1e 	.word	0x08004f1e
 8004770:	00000000 	.word	0x00000000
 8004774:	08004527 	.word	0x08004527
 8004778:	08004f1a 	.word	0x08004f1a

0800477c <_printf_common>:
 800477c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004780:	4616      	mov	r6, r2
 8004782:	4698      	mov	r8, r3
 8004784:	688a      	ldr	r2, [r1, #8]
 8004786:	690b      	ldr	r3, [r1, #16]
 8004788:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800478c:	4293      	cmp	r3, r2
 800478e:	bfb8      	it	lt
 8004790:	4613      	movlt	r3, r2
 8004792:	6033      	str	r3, [r6, #0]
 8004794:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004798:	4607      	mov	r7, r0
 800479a:	460c      	mov	r4, r1
 800479c:	b10a      	cbz	r2, 80047a2 <_printf_common+0x26>
 800479e:	3301      	adds	r3, #1
 80047a0:	6033      	str	r3, [r6, #0]
 80047a2:	6823      	ldr	r3, [r4, #0]
 80047a4:	0699      	lsls	r1, r3, #26
 80047a6:	bf42      	ittt	mi
 80047a8:	6833      	ldrmi	r3, [r6, #0]
 80047aa:	3302      	addmi	r3, #2
 80047ac:	6033      	strmi	r3, [r6, #0]
 80047ae:	6825      	ldr	r5, [r4, #0]
 80047b0:	f015 0506 	ands.w	r5, r5, #6
 80047b4:	d106      	bne.n	80047c4 <_printf_common+0x48>
 80047b6:	f104 0a19 	add.w	sl, r4, #25
 80047ba:	68e3      	ldr	r3, [r4, #12]
 80047bc:	6832      	ldr	r2, [r6, #0]
 80047be:	1a9b      	subs	r3, r3, r2
 80047c0:	42ab      	cmp	r3, r5
 80047c2:	dc26      	bgt.n	8004812 <_printf_common+0x96>
 80047c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80047c8:	6822      	ldr	r2, [r4, #0]
 80047ca:	3b00      	subs	r3, #0
 80047cc:	bf18      	it	ne
 80047ce:	2301      	movne	r3, #1
 80047d0:	0692      	lsls	r2, r2, #26
 80047d2:	d42b      	bmi.n	800482c <_printf_common+0xb0>
 80047d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80047d8:	4641      	mov	r1, r8
 80047da:	4638      	mov	r0, r7
 80047dc:	47c8      	blx	r9
 80047de:	3001      	adds	r0, #1
 80047e0:	d01e      	beq.n	8004820 <_printf_common+0xa4>
 80047e2:	6823      	ldr	r3, [r4, #0]
 80047e4:	6922      	ldr	r2, [r4, #16]
 80047e6:	f003 0306 	and.w	r3, r3, #6
 80047ea:	2b04      	cmp	r3, #4
 80047ec:	bf02      	ittt	eq
 80047ee:	68e5      	ldreq	r5, [r4, #12]
 80047f0:	6833      	ldreq	r3, [r6, #0]
 80047f2:	1aed      	subeq	r5, r5, r3
 80047f4:	68a3      	ldr	r3, [r4, #8]
 80047f6:	bf0c      	ite	eq
 80047f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80047fc:	2500      	movne	r5, #0
 80047fe:	4293      	cmp	r3, r2
 8004800:	bfc4      	itt	gt
 8004802:	1a9b      	subgt	r3, r3, r2
 8004804:	18ed      	addgt	r5, r5, r3
 8004806:	2600      	movs	r6, #0
 8004808:	341a      	adds	r4, #26
 800480a:	42b5      	cmp	r5, r6
 800480c:	d11a      	bne.n	8004844 <_printf_common+0xc8>
 800480e:	2000      	movs	r0, #0
 8004810:	e008      	b.n	8004824 <_printf_common+0xa8>
 8004812:	2301      	movs	r3, #1
 8004814:	4652      	mov	r2, sl
 8004816:	4641      	mov	r1, r8
 8004818:	4638      	mov	r0, r7
 800481a:	47c8      	blx	r9
 800481c:	3001      	adds	r0, #1
 800481e:	d103      	bne.n	8004828 <_printf_common+0xac>
 8004820:	f04f 30ff 	mov.w	r0, #4294967295
 8004824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004828:	3501      	adds	r5, #1
 800482a:	e7c6      	b.n	80047ba <_printf_common+0x3e>
 800482c:	18e1      	adds	r1, r4, r3
 800482e:	1c5a      	adds	r2, r3, #1
 8004830:	2030      	movs	r0, #48	@ 0x30
 8004832:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004836:	4422      	add	r2, r4
 8004838:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800483c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004840:	3302      	adds	r3, #2
 8004842:	e7c7      	b.n	80047d4 <_printf_common+0x58>
 8004844:	2301      	movs	r3, #1
 8004846:	4622      	mov	r2, r4
 8004848:	4641      	mov	r1, r8
 800484a:	4638      	mov	r0, r7
 800484c:	47c8      	blx	r9
 800484e:	3001      	adds	r0, #1
 8004850:	d0e6      	beq.n	8004820 <_printf_common+0xa4>
 8004852:	3601      	adds	r6, #1
 8004854:	e7d9      	b.n	800480a <_printf_common+0x8e>
	...

08004858 <_printf_i>:
 8004858:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800485c:	7e0f      	ldrb	r7, [r1, #24]
 800485e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004860:	2f78      	cmp	r7, #120	@ 0x78
 8004862:	4691      	mov	r9, r2
 8004864:	4680      	mov	r8, r0
 8004866:	460c      	mov	r4, r1
 8004868:	469a      	mov	sl, r3
 800486a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800486e:	d807      	bhi.n	8004880 <_printf_i+0x28>
 8004870:	2f62      	cmp	r7, #98	@ 0x62
 8004872:	d80a      	bhi.n	800488a <_printf_i+0x32>
 8004874:	2f00      	cmp	r7, #0
 8004876:	f000 80d2 	beq.w	8004a1e <_printf_i+0x1c6>
 800487a:	2f58      	cmp	r7, #88	@ 0x58
 800487c:	f000 80b9 	beq.w	80049f2 <_printf_i+0x19a>
 8004880:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004884:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004888:	e03a      	b.n	8004900 <_printf_i+0xa8>
 800488a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800488e:	2b15      	cmp	r3, #21
 8004890:	d8f6      	bhi.n	8004880 <_printf_i+0x28>
 8004892:	a101      	add	r1, pc, #4	@ (adr r1, 8004898 <_printf_i+0x40>)
 8004894:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004898:	080048f1 	.word	0x080048f1
 800489c:	08004905 	.word	0x08004905
 80048a0:	08004881 	.word	0x08004881
 80048a4:	08004881 	.word	0x08004881
 80048a8:	08004881 	.word	0x08004881
 80048ac:	08004881 	.word	0x08004881
 80048b0:	08004905 	.word	0x08004905
 80048b4:	08004881 	.word	0x08004881
 80048b8:	08004881 	.word	0x08004881
 80048bc:	08004881 	.word	0x08004881
 80048c0:	08004881 	.word	0x08004881
 80048c4:	08004a05 	.word	0x08004a05
 80048c8:	0800492f 	.word	0x0800492f
 80048cc:	080049bf 	.word	0x080049bf
 80048d0:	08004881 	.word	0x08004881
 80048d4:	08004881 	.word	0x08004881
 80048d8:	08004a27 	.word	0x08004a27
 80048dc:	08004881 	.word	0x08004881
 80048e0:	0800492f 	.word	0x0800492f
 80048e4:	08004881 	.word	0x08004881
 80048e8:	08004881 	.word	0x08004881
 80048ec:	080049c7 	.word	0x080049c7
 80048f0:	6833      	ldr	r3, [r6, #0]
 80048f2:	1d1a      	adds	r2, r3, #4
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	6032      	str	r2, [r6, #0]
 80048f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80048fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004900:	2301      	movs	r3, #1
 8004902:	e09d      	b.n	8004a40 <_printf_i+0x1e8>
 8004904:	6833      	ldr	r3, [r6, #0]
 8004906:	6820      	ldr	r0, [r4, #0]
 8004908:	1d19      	adds	r1, r3, #4
 800490a:	6031      	str	r1, [r6, #0]
 800490c:	0606      	lsls	r6, r0, #24
 800490e:	d501      	bpl.n	8004914 <_printf_i+0xbc>
 8004910:	681d      	ldr	r5, [r3, #0]
 8004912:	e003      	b.n	800491c <_printf_i+0xc4>
 8004914:	0645      	lsls	r5, r0, #25
 8004916:	d5fb      	bpl.n	8004910 <_printf_i+0xb8>
 8004918:	f9b3 5000 	ldrsh.w	r5, [r3]
 800491c:	2d00      	cmp	r5, #0
 800491e:	da03      	bge.n	8004928 <_printf_i+0xd0>
 8004920:	232d      	movs	r3, #45	@ 0x2d
 8004922:	426d      	negs	r5, r5
 8004924:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004928:	4859      	ldr	r0, [pc, #356]	@ (8004a90 <_printf_i+0x238>)
 800492a:	230a      	movs	r3, #10
 800492c:	e011      	b.n	8004952 <_printf_i+0xfa>
 800492e:	6821      	ldr	r1, [r4, #0]
 8004930:	6833      	ldr	r3, [r6, #0]
 8004932:	0608      	lsls	r0, r1, #24
 8004934:	f853 5b04 	ldr.w	r5, [r3], #4
 8004938:	d402      	bmi.n	8004940 <_printf_i+0xe8>
 800493a:	0649      	lsls	r1, r1, #25
 800493c:	bf48      	it	mi
 800493e:	b2ad      	uxthmi	r5, r5
 8004940:	2f6f      	cmp	r7, #111	@ 0x6f
 8004942:	4853      	ldr	r0, [pc, #332]	@ (8004a90 <_printf_i+0x238>)
 8004944:	6033      	str	r3, [r6, #0]
 8004946:	bf14      	ite	ne
 8004948:	230a      	movne	r3, #10
 800494a:	2308      	moveq	r3, #8
 800494c:	2100      	movs	r1, #0
 800494e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004952:	6866      	ldr	r6, [r4, #4]
 8004954:	60a6      	str	r6, [r4, #8]
 8004956:	2e00      	cmp	r6, #0
 8004958:	bfa2      	ittt	ge
 800495a:	6821      	ldrge	r1, [r4, #0]
 800495c:	f021 0104 	bicge.w	r1, r1, #4
 8004960:	6021      	strge	r1, [r4, #0]
 8004962:	b90d      	cbnz	r5, 8004968 <_printf_i+0x110>
 8004964:	2e00      	cmp	r6, #0
 8004966:	d04b      	beq.n	8004a00 <_printf_i+0x1a8>
 8004968:	4616      	mov	r6, r2
 800496a:	fbb5 f1f3 	udiv	r1, r5, r3
 800496e:	fb03 5711 	mls	r7, r3, r1, r5
 8004972:	5dc7      	ldrb	r7, [r0, r7]
 8004974:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004978:	462f      	mov	r7, r5
 800497a:	42bb      	cmp	r3, r7
 800497c:	460d      	mov	r5, r1
 800497e:	d9f4      	bls.n	800496a <_printf_i+0x112>
 8004980:	2b08      	cmp	r3, #8
 8004982:	d10b      	bne.n	800499c <_printf_i+0x144>
 8004984:	6823      	ldr	r3, [r4, #0]
 8004986:	07df      	lsls	r7, r3, #31
 8004988:	d508      	bpl.n	800499c <_printf_i+0x144>
 800498a:	6923      	ldr	r3, [r4, #16]
 800498c:	6861      	ldr	r1, [r4, #4]
 800498e:	4299      	cmp	r1, r3
 8004990:	bfde      	ittt	le
 8004992:	2330      	movle	r3, #48	@ 0x30
 8004994:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004998:	f106 36ff 	addle.w	r6, r6, #4294967295
 800499c:	1b92      	subs	r2, r2, r6
 800499e:	6122      	str	r2, [r4, #16]
 80049a0:	f8cd a000 	str.w	sl, [sp]
 80049a4:	464b      	mov	r3, r9
 80049a6:	aa03      	add	r2, sp, #12
 80049a8:	4621      	mov	r1, r4
 80049aa:	4640      	mov	r0, r8
 80049ac:	f7ff fee6 	bl	800477c <_printf_common>
 80049b0:	3001      	adds	r0, #1
 80049b2:	d14a      	bne.n	8004a4a <_printf_i+0x1f2>
 80049b4:	f04f 30ff 	mov.w	r0, #4294967295
 80049b8:	b004      	add	sp, #16
 80049ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049be:	6823      	ldr	r3, [r4, #0]
 80049c0:	f043 0320 	orr.w	r3, r3, #32
 80049c4:	6023      	str	r3, [r4, #0]
 80049c6:	4833      	ldr	r0, [pc, #204]	@ (8004a94 <_printf_i+0x23c>)
 80049c8:	2778      	movs	r7, #120	@ 0x78
 80049ca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80049ce:	6823      	ldr	r3, [r4, #0]
 80049d0:	6831      	ldr	r1, [r6, #0]
 80049d2:	061f      	lsls	r7, r3, #24
 80049d4:	f851 5b04 	ldr.w	r5, [r1], #4
 80049d8:	d402      	bmi.n	80049e0 <_printf_i+0x188>
 80049da:	065f      	lsls	r7, r3, #25
 80049dc:	bf48      	it	mi
 80049de:	b2ad      	uxthmi	r5, r5
 80049e0:	6031      	str	r1, [r6, #0]
 80049e2:	07d9      	lsls	r1, r3, #31
 80049e4:	bf44      	itt	mi
 80049e6:	f043 0320 	orrmi.w	r3, r3, #32
 80049ea:	6023      	strmi	r3, [r4, #0]
 80049ec:	b11d      	cbz	r5, 80049f6 <_printf_i+0x19e>
 80049ee:	2310      	movs	r3, #16
 80049f0:	e7ac      	b.n	800494c <_printf_i+0xf4>
 80049f2:	4827      	ldr	r0, [pc, #156]	@ (8004a90 <_printf_i+0x238>)
 80049f4:	e7e9      	b.n	80049ca <_printf_i+0x172>
 80049f6:	6823      	ldr	r3, [r4, #0]
 80049f8:	f023 0320 	bic.w	r3, r3, #32
 80049fc:	6023      	str	r3, [r4, #0]
 80049fe:	e7f6      	b.n	80049ee <_printf_i+0x196>
 8004a00:	4616      	mov	r6, r2
 8004a02:	e7bd      	b.n	8004980 <_printf_i+0x128>
 8004a04:	6833      	ldr	r3, [r6, #0]
 8004a06:	6825      	ldr	r5, [r4, #0]
 8004a08:	6961      	ldr	r1, [r4, #20]
 8004a0a:	1d18      	adds	r0, r3, #4
 8004a0c:	6030      	str	r0, [r6, #0]
 8004a0e:	062e      	lsls	r6, r5, #24
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	d501      	bpl.n	8004a18 <_printf_i+0x1c0>
 8004a14:	6019      	str	r1, [r3, #0]
 8004a16:	e002      	b.n	8004a1e <_printf_i+0x1c6>
 8004a18:	0668      	lsls	r0, r5, #25
 8004a1a:	d5fb      	bpl.n	8004a14 <_printf_i+0x1bc>
 8004a1c:	8019      	strh	r1, [r3, #0]
 8004a1e:	2300      	movs	r3, #0
 8004a20:	6123      	str	r3, [r4, #16]
 8004a22:	4616      	mov	r6, r2
 8004a24:	e7bc      	b.n	80049a0 <_printf_i+0x148>
 8004a26:	6833      	ldr	r3, [r6, #0]
 8004a28:	1d1a      	adds	r2, r3, #4
 8004a2a:	6032      	str	r2, [r6, #0]
 8004a2c:	681e      	ldr	r6, [r3, #0]
 8004a2e:	6862      	ldr	r2, [r4, #4]
 8004a30:	2100      	movs	r1, #0
 8004a32:	4630      	mov	r0, r6
 8004a34:	f7fb fbd4 	bl	80001e0 <memchr>
 8004a38:	b108      	cbz	r0, 8004a3e <_printf_i+0x1e6>
 8004a3a:	1b80      	subs	r0, r0, r6
 8004a3c:	6060      	str	r0, [r4, #4]
 8004a3e:	6863      	ldr	r3, [r4, #4]
 8004a40:	6123      	str	r3, [r4, #16]
 8004a42:	2300      	movs	r3, #0
 8004a44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a48:	e7aa      	b.n	80049a0 <_printf_i+0x148>
 8004a4a:	6923      	ldr	r3, [r4, #16]
 8004a4c:	4632      	mov	r2, r6
 8004a4e:	4649      	mov	r1, r9
 8004a50:	4640      	mov	r0, r8
 8004a52:	47d0      	blx	sl
 8004a54:	3001      	adds	r0, #1
 8004a56:	d0ad      	beq.n	80049b4 <_printf_i+0x15c>
 8004a58:	6823      	ldr	r3, [r4, #0]
 8004a5a:	079b      	lsls	r3, r3, #30
 8004a5c:	d413      	bmi.n	8004a86 <_printf_i+0x22e>
 8004a5e:	68e0      	ldr	r0, [r4, #12]
 8004a60:	9b03      	ldr	r3, [sp, #12]
 8004a62:	4298      	cmp	r0, r3
 8004a64:	bfb8      	it	lt
 8004a66:	4618      	movlt	r0, r3
 8004a68:	e7a6      	b.n	80049b8 <_printf_i+0x160>
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	4632      	mov	r2, r6
 8004a6e:	4649      	mov	r1, r9
 8004a70:	4640      	mov	r0, r8
 8004a72:	47d0      	blx	sl
 8004a74:	3001      	adds	r0, #1
 8004a76:	d09d      	beq.n	80049b4 <_printf_i+0x15c>
 8004a78:	3501      	adds	r5, #1
 8004a7a:	68e3      	ldr	r3, [r4, #12]
 8004a7c:	9903      	ldr	r1, [sp, #12]
 8004a7e:	1a5b      	subs	r3, r3, r1
 8004a80:	42ab      	cmp	r3, r5
 8004a82:	dcf2      	bgt.n	8004a6a <_printf_i+0x212>
 8004a84:	e7eb      	b.n	8004a5e <_printf_i+0x206>
 8004a86:	2500      	movs	r5, #0
 8004a88:	f104 0619 	add.w	r6, r4, #25
 8004a8c:	e7f5      	b.n	8004a7a <_printf_i+0x222>
 8004a8e:	bf00      	nop
 8004a90:	08004f25 	.word	0x08004f25
 8004a94:	08004f36 	.word	0x08004f36

08004a98 <__sflush_r>:
 8004a98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004aa0:	0716      	lsls	r6, r2, #28
 8004aa2:	4605      	mov	r5, r0
 8004aa4:	460c      	mov	r4, r1
 8004aa6:	d454      	bmi.n	8004b52 <__sflush_r+0xba>
 8004aa8:	684b      	ldr	r3, [r1, #4]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	dc02      	bgt.n	8004ab4 <__sflush_r+0x1c>
 8004aae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	dd48      	ble.n	8004b46 <__sflush_r+0xae>
 8004ab4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004ab6:	2e00      	cmp	r6, #0
 8004ab8:	d045      	beq.n	8004b46 <__sflush_r+0xae>
 8004aba:	2300      	movs	r3, #0
 8004abc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004ac0:	682f      	ldr	r7, [r5, #0]
 8004ac2:	6a21      	ldr	r1, [r4, #32]
 8004ac4:	602b      	str	r3, [r5, #0]
 8004ac6:	d030      	beq.n	8004b2a <__sflush_r+0x92>
 8004ac8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004aca:	89a3      	ldrh	r3, [r4, #12]
 8004acc:	0759      	lsls	r1, r3, #29
 8004ace:	d505      	bpl.n	8004adc <__sflush_r+0x44>
 8004ad0:	6863      	ldr	r3, [r4, #4]
 8004ad2:	1ad2      	subs	r2, r2, r3
 8004ad4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004ad6:	b10b      	cbz	r3, 8004adc <__sflush_r+0x44>
 8004ad8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004ada:	1ad2      	subs	r2, r2, r3
 8004adc:	2300      	movs	r3, #0
 8004ade:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004ae0:	6a21      	ldr	r1, [r4, #32]
 8004ae2:	4628      	mov	r0, r5
 8004ae4:	47b0      	blx	r6
 8004ae6:	1c43      	adds	r3, r0, #1
 8004ae8:	89a3      	ldrh	r3, [r4, #12]
 8004aea:	d106      	bne.n	8004afa <__sflush_r+0x62>
 8004aec:	6829      	ldr	r1, [r5, #0]
 8004aee:	291d      	cmp	r1, #29
 8004af0:	d82b      	bhi.n	8004b4a <__sflush_r+0xb2>
 8004af2:	4a2a      	ldr	r2, [pc, #168]	@ (8004b9c <__sflush_r+0x104>)
 8004af4:	410a      	asrs	r2, r1
 8004af6:	07d6      	lsls	r6, r2, #31
 8004af8:	d427      	bmi.n	8004b4a <__sflush_r+0xb2>
 8004afa:	2200      	movs	r2, #0
 8004afc:	6062      	str	r2, [r4, #4]
 8004afe:	04d9      	lsls	r1, r3, #19
 8004b00:	6922      	ldr	r2, [r4, #16]
 8004b02:	6022      	str	r2, [r4, #0]
 8004b04:	d504      	bpl.n	8004b10 <__sflush_r+0x78>
 8004b06:	1c42      	adds	r2, r0, #1
 8004b08:	d101      	bne.n	8004b0e <__sflush_r+0x76>
 8004b0a:	682b      	ldr	r3, [r5, #0]
 8004b0c:	b903      	cbnz	r3, 8004b10 <__sflush_r+0x78>
 8004b0e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004b10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004b12:	602f      	str	r7, [r5, #0]
 8004b14:	b1b9      	cbz	r1, 8004b46 <__sflush_r+0xae>
 8004b16:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004b1a:	4299      	cmp	r1, r3
 8004b1c:	d002      	beq.n	8004b24 <__sflush_r+0x8c>
 8004b1e:	4628      	mov	r0, r5
 8004b20:	f7ff fb48 	bl	80041b4 <_free_r>
 8004b24:	2300      	movs	r3, #0
 8004b26:	6363      	str	r3, [r4, #52]	@ 0x34
 8004b28:	e00d      	b.n	8004b46 <__sflush_r+0xae>
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	4628      	mov	r0, r5
 8004b2e:	47b0      	blx	r6
 8004b30:	4602      	mov	r2, r0
 8004b32:	1c50      	adds	r0, r2, #1
 8004b34:	d1c9      	bne.n	8004aca <__sflush_r+0x32>
 8004b36:	682b      	ldr	r3, [r5, #0]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d0c6      	beq.n	8004aca <__sflush_r+0x32>
 8004b3c:	2b1d      	cmp	r3, #29
 8004b3e:	d001      	beq.n	8004b44 <__sflush_r+0xac>
 8004b40:	2b16      	cmp	r3, #22
 8004b42:	d11e      	bne.n	8004b82 <__sflush_r+0xea>
 8004b44:	602f      	str	r7, [r5, #0]
 8004b46:	2000      	movs	r0, #0
 8004b48:	e022      	b.n	8004b90 <__sflush_r+0xf8>
 8004b4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b4e:	b21b      	sxth	r3, r3
 8004b50:	e01b      	b.n	8004b8a <__sflush_r+0xf2>
 8004b52:	690f      	ldr	r7, [r1, #16]
 8004b54:	2f00      	cmp	r7, #0
 8004b56:	d0f6      	beq.n	8004b46 <__sflush_r+0xae>
 8004b58:	0793      	lsls	r3, r2, #30
 8004b5a:	680e      	ldr	r6, [r1, #0]
 8004b5c:	bf08      	it	eq
 8004b5e:	694b      	ldreq	r3, [r1, #20]
 8004b60:	600f      	str	r7, [r1, #0]
 8004b62:	bf18      	it	ne
 8004b64:	2300      	movne	r3, #0
 8004b66:	eba6 0807 	sub.w	r8, r6, r7
 8004b6a:	608b      	str	r3, [r1, #8]
 8004b6c:	f1b8 0f00 	cmp.w	r8, #0
 8004b70:	dde9      	ble.n	8004b46 <__sflush_r+0xae>
 8004b72:	6a21      	ldr	r1, [r4, #32]
 8004b74:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004b76:	4643      	mov	r3, r8
 8004b78:	463a      	mov	r2, r7
 8004b7a:	4628      	mov	r0, r5
 8004b7c:	47b0      	blx	r6
 8004b7e:	2800      	cmp	r0, #0
 8004b80:	dc08      	bgt.n	8004b94 <__sflush_r+0xfc>
 8004b82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b8a:	81a3      	strh	r3, [r4, #12]
 8004b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b94:	4407      	add	r7, r0
 8004b96:	eba8 0800 	sub.w	r8, r8, r0
 8004b9a:	e7e7      	b.n	8004b6c <__sflush_r+0xd4>
 8004b9c:	dfbffffe 	.word	0xdfbffffe

08004ba0 <_fflush_r>:
 8004ba0:	b538      	push	{r3, r4, r5, lr}
 8004ba2:	690b      	ldr	r3, [r1, #16]
 8004ba4:	4605      	mov	r5, r0
 8004ba6:	460c      	mov	r4, r1
 8004ba8:	b913      	cbnz	r3, 8004bb0 <_fflush_r+0x10>
 8004baa:	2500      	movs	r5, #0
 8004bac:	4628      	mov	r0, r5
 8004bae:	bd38      	pop	{r3, r4, r5, pc}
 8004bb0:	b118      	cbz	r0, 8004bba <_fflush_r+0x1a>
 8004bb2:	6a03      	ldr	r3, [r0, #32]
 8004bb4:	b90b      	cbnz	r3, 8004bba <_fflush_r+0x1a>
 8004bb6:	f7ff f8b1 	bl	8003d1c <__sinit>
 8004bba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d0f3      	beq.n	8004baa <_fflush_r+0xa>
 8004bc2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004bc4:	07d0      	lsls	r0, r2, #31
 8004bc6:	d404      	bmi.n	8004bd2 <_fflush_r+0x32>
 8004bc8:	0599      	lsls	r1, r3, #22
 8004bca:	d402      	bmi.n	8004bd2 <_fflush_r+0x32>
 8004bcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004bce:	f7ff fae0 	bl	8004192 <__retarget_lock_acquire_recursive>
 8004bd2:	4628      	mov	r0, r5
 8004bd4:	4621      	mov	r1, r4
 8004bd6:	f7ff ff5f 	bl	8004a98 <__sflush_r>
 8004bda:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004bdc:	07da      	lsls	r2, r3, #31
 8004bde:	4605      	mov	r5, r0
 8004be0:	d4e4      	bmi.n	8004bac <_fflush_r+0xc>
 8004be2:	89a3      	ldrh	r3, [r4, #12]
 8004be4:	059b      	lsls	r3, r3, #22
 8004be6:	d4e1      	bmi.n	8004bac <_fflush_r+0xc>
 8004be8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004bea:	f7ff fad3 	bl	8004194 <__retarget_lock_release_recursive>
 8004bee:	e7dd      	b.n	8004bac <_fflush_r+0xc>

08004bf0 <__swhatbuf_r>:
 8004bf0:	b570      	push	{r4, r5, r6, lr}
 8004bf2:	460c      	mov	r4, r1
 8004bf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bf8:	2900      	cmp	r1, #0
 8004bfa:	b096      	sub	sp, #88	@ 0x58
 8004bfc:	4615      	mov	r5, r2
 8004bfe:	461e      	mov	r6, r3
 8004c00:	da0d      	bge.n	8004c1e <__swhatbuf_r+0x2e>
 8004c02:	89a3      	ldrh	r3, [r4, #12]
 8004c04:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004c08:	f04f 0100 	mov.w	r1, #0
 8004c0c:	bf14      	ite	ne
 8004c0e:	2340      	movne	r3, #64	@ 0x40
 8004c10:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004c14:	2000      	movs	r0, #0
 8004c16:	6031      	str	r1, [r6, #0]
 8004c18:	602b      	str	r3, [r5, #0]
 8004c1a:	b016      	add	sp, #88	@ 0x58
 8004c1c:	bd70      	pop	{r4, r5, r6, pc}
 8004c1e:	466a      	mov	r2, sp
 8004c20:	f000 f862 	bl	8004ce8 <_fstat_r>
 8004c24:	2800      	cmp	r0, #0
 8004c26:	dbec      	blt.n	8004c02 <__swhatbuf_r+0x12>
 8004c28:	9901      	ldr	r1, [sp, #4]
 8004c2a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004c2e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004c32:	4259      	negs	r1, r3
 8004c34:	4159      	adcs	r1, r3
 8004c36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004c3a:	e7eb      	b.n	8004c14 <__swhatbuf_r+0x24>

08004c3c <__smakebuf_r>:
 8004c3c:	898b      	ldrh	r3, [r1, #12]
 8004c3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c40:	079d      	lsls	r5, r3, #30
 8004c42:	4606      	mov	r6, r0
 8004c44:	460c      	mov	r4, r1
 8004c46:	d507      	bpl.n	8004c58 <__smakebuf_r+0x1c>
 8004c48:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004c4c:	6023      	str	r3, [r4, #0]
 8004c4e:	6123      	str	r3, [r4, #16]
 8004c50:	2301      	movs	r3, #1
 8004c52:	6163      	str	r3, [r4, #20]
 8004c54:	b003      	add	sp, #12
 8004c56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c58:	ab01      	add	r3, sp, #4
 8004c5a:	466a      	mov	r2, sp
 8004c5c:	f7ff ffc8 	bl	8004bf0 <__swhatbuf_r>
 8004c60:	9f00      	ldr	r7, [sp, #0]
 8004c62:	4605      	mov	r5, r0
 8004c64:	4639      	mov	r1, r7
 8004c66:	4630      	mov	r0, r6
 8004c68:	f7fe ff40 	bl	8003aec <_malloc_r>
 8004c6c:	b948      	cbnz	r0, 8004c82 <__smakebuf_r+0x46>
 8004c6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c72:	059a      	lsls	r2, r3, #22
 8004c74:	d4ee      	bmi.n	8004c54 <__smakebuf_r+0x18>
 8004c76:	f023 0303 	bic.w	r3, r3, #3
 8004c7a:	f043 0302 	orr.w	r3, r3, #2
 8004c7e:	81a3      	strh	r3, [r4, #12]
 8004c80:	e7e2      	b.n	8004c48 <__smakebuf_r+0xc>
 8004c82:	89a3      	ldrh	r3, [r4, #12]
 8004c84:	6020      	str	r0, [r4, #0]
 8004c86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c8a:	81a3      	strh	r3, [r4, #12]
 8004c8c:	9b01      	ldr	r3, [sp, #4]
 8004c8e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004c92:	b15b      	cbz	r3, 8004cac <__smakebuf_r+0x70>
 8004c94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c98:	4630      	mov	r0, r6
 8004c9a:	f000 f837 	bl	8004d0c <_isatty_r>
 8004c9e:	b128      	cbz	r0, 8004cac <__smakebuf_r+0x70>
 8004ca0:	89a3      	ldrh	r3, [r4, #12]
 8004ca2:	f023 0303 	bic.w	r3, r3, #3
 8004ca6:	f043 0301 	orr.w	r3, r3, #1
 8004caa:	81a3      	strh	r3, [r4, #12]
 8004cac:	89a3      	ldrh	r3, [r4, #12]
 8004cae:	431d      	orrs	r5, r3
 8004cb0:	81a5      	strh	r5, [r4, #12]
 8004cb2:	e7cf      	b.n	8004c54 <__smakebuf_r+0x18>

08004cb4 <memmove>:
 8004cb4:	4288      	cmp	r0, r1
 8004cb6:	b510      	push	{r4, lr}
 8004cb8:	eb01 0402 	add.w	r4, r1, r2
 8004cbc:	d902      	bls.n	8004cc4 <memmove+0x10>
 8004cbe:	4284      	cmp	r4, r0
 8004cc0:	4623      	mov	r3, r4
 8004cc2:	d807      	bhi.n	8004cd4 <memmove+0x20>
 8004cc4:	1e43      	subs	r3, r0, #1
 8004cc6:	42a1      	cmp	r1, r4
 8004cc8:	d008      	beq.n	8004cdc <memmove+0x28>
 8004cca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004cce:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004cd2:	e7f8      	b.n	8004cc6 <memmove+0x12>
 8004cd4:	4402      	add	r2, r0
 8004cd6:	4601      	mov	r1, r0
 8004cd8:	428a      	cmp	r2, r1
 8004cda:	d100      	bne.n	8004cde <memmove+0x2a>
 8004cdc:	bd10      	pop	{r4, pc}
 8004cde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004ce2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004ce6:	e7f7      	b.n	8004cd8 <memmove+0x24>

08004ce8 <_fstat_r>:
 8004ce8:	b538      	push	{r3, r4, r5, lr}
 8004cea:	4d07      	ldr	r5, [pc, #28]	@ (8004d08 <_fstat_r+0x20>)
 8004cec:	2300      	movs	r3, #0
 8004cee:	4604      	mov	r4, r0
 8004cf0:	4608      	mov	r0, r1
 8004cf2:	4611      	mov	r1, r2
 8004cf4:	602b      	str	r3, [r5, #0]
 8004cf6:	f7fc fdbf 	bl	8001878 <_fstat>
 8004cfa:	1c43      	adds	r3, r0, #1
 8004cfc:	d102      	bne.n	8004d04 <_fstat_r+0x1c>
 8004cfe:	682b      	ldr	r3, [r5, #0]
 8004d00:	b103      	cbz	r3, 8004d04 <_fstat_r+0x1c>
 8004d02:	6023      	str	r3, [r4, #0]
 8004d04:	bd38      	pop	{r3, r4, r5, pc}
 8004d06:	bf00      	nop
 8004d08:	200004b0 	.word	0x200004b0

08004d0c <_isatty_r>:
 8004d0c:	b538      	push	{r3, r4, r5, lr}
 8004d0e:	4d06      	ldr	r5, [pc, #24]	@ (8004d28 <_isatty_r+0x1c>)
 8004d10:	2300      	movs	r3, #0
 8004d12:	4604      	mov	r4, r0
 8004d14:	4608      	mov	r0, r1
 8004d16:	602b      	str	r3, [r5, #0]
 8004d18:	f7fc fdbe 	bl	8001898 <_isatty>
 8004d1c:	1c43      	adds	r3, r0, #1
 8004d1e:	d102      	bne.n	8004d26 <_isatty_r+0x1a>
 8004d20:	682b      	ldr	r3, [r5, #0]
 8004d22:	b103      	cbz	r3, 8004d26 <_isatty_r+0x1a>
 8004d24:	6023      	str	r3, [r4, #0]
 8004d26:	bd38      	pop	{r3, r4, r5, pc}
 8004d28:	200004b0 	.word	0x200004b0

08004d2c <_realloc_r>:
 8004d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d30:	4680      	mov	r8, r0
 8004d32:	4615      	mov	r5, r2
 8004d34:	460c      	mov	r4, r1
 8004d36:	b921      	cbnz	r1, 8004d42 <_realloc_r+0x16>
 8004d38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d3c:	4611      	mov	r1, r2
 8004d3e:	f7fe bed5 	b.w	8003aec <_malloc_r>
 8004d42:	b92a      	cbnz	r2, 8004d50 <_realloc_r+0x24>
 8004d44:	f7ff fa36 	bl	80041b4 <_free_r>
 8004d48:	2400      	movs	r4, #0
 8004d4a:	4620      	mov	r0, r4
 8004d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d50:	f000 f81a 	bl	8004d88 <_malloc_usable_size_r>
 8004d54:	4285      	cmp	r5, r0
 8004d56:	4606      	mov	r6, r0
 8004d58:	d802      	bhi.n	8004d60 <_realloc_r+0x34>
 8004d5a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004d5e:	d8f4      	bhi.n	8004d4a <_realloc_r+0x1e>
 8004d60:	4629      	mov	r1, r5
 8004d62:	4640      	mov	r0, r8
 8004d64:	f7fe fec2 	bl	8003aec <_malloc_r>
 8004d68:	4607      	mov	r7, r0
 8004d6a:	2800      	cmp	r0, #0
 8004d6c:	d0ec      	beq.n	8004d48 <_realloc_r+0x1c>
 8004d6e:	42b5      	cmp	r5, r6
 8004d70:	462a      	mov	r2, r5
 8004d72:	4621      	mov	r1, r4
 8004d74:	bf28      	it	cs
 8004d76:	4632      	movcs	r2, r6
 8004d78:	f7ff fa0d 	bl	8004196 <memcpy>
 8004d7c:	4621      	mov	r1, r4
 8004d7e:	4640      	mov	r0, r8
 8004d80:	f7ff fa18 	bl	80041b4 <_free_r>
 8004d84:	463c      	mov	r4, r7
 8004d86:	e7e0      	b.n	8004d4a <_realloc_r+0x1e>

08004d88 <_malloc_usable_size_r>:
 8004d88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d8c:	1f18      	subs	r0, r3, #4
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	bfbc      	itt	lt
 8004d92:	580b      	ldrlt	r3, [r1, r0]
 8004d94:	18c0      	addlt	r0, r0, r3
 8004d96:	4770      	bx	lr

08004d98 <_init>:
 8004d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d9a:	bf00      	nop
 8004d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d9e:	bc08      	pop	{r3}
 8004da0:	469e      	mov	lr, r3
 8004da2:	4770      	bx	lr

08004da4 <_fini>:
 8004da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004da6:	bf00      	nop
 8004da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004daa:	bc08      	pop	{r3}
 8004dac:	469e      	mov	lr, r3
 8004dae:	4770      	bx	lr
